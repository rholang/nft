var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a2, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a2, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a2, prop, b[prop]);
    }
  return a2;
};
var __spreadProps = (a2, b) => __defProps(a2, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __require = (x) => {
  if (typeof require !== "undefined")
    return require(x);
  throw new Error('Dynamic require of "' + x + '" is not supported');
};
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/helpers/bind.js"(exports2, module2) {
    "use strict";
    module2.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i2 = 0; i2 < args.length; i2++) {
          args[i2] = arguments[i2];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/utils.js
var require_utils = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/utils.js"(exports2, module2) {
    "use strict";
    var bind = require_bind();
    var toString = Object.prototype.toString;
    function isArray(val) {
      return toString.call(val) === "[object Array]";
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    function isArrayBuffer(val) {
      return toString.call(val) === "[object ArrayBuffer]";
    }
    function isFormData(val) {
      return typeof FormData !== "undefined" && val instanceof FormData;
    }
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && val.buffer instanceof ArrayBuffer;
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (toString.call(val) !== "[object Object]") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    function isDate(val) {
      return toString.call(val) === "[object Date]";
    }
    function isFile(val) {
      return toString.call(val) === "[object File]";
    }
    function isBlob(val) {
      return toString.call(val) === "[object Blob]";
    }
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isURLSearchParams(val) {
      return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
    }
    function trim(str) {
      return str.replace(/^\s*/, "").replace(/\s*$/, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i2 = 0, l2 = obj.length; i2 < l2; i2++) {
          fn.call(null, obj[i2], i2, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i2 = 0, l2 = arguments.length; i2 < l2; i2++) {
        forEach(arguments[i2], assignValue);
      }
      return result;
    }
    function extend(a2, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a2[key] = bind(val, thisArg);
        } else {
          a2[key] = val;
        }
      });
      return a2;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    module2.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM
    };
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/helpers/buildURL.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module2.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + "=" + encode(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/core/InterceptorManager.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected) {
      this.handlers.push({
        fulfilled,
        rejected
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h2) {
        if (h2 !== null) {
          fn(h2);
        }
      });
    };
    module2.exports = InterceptorManager;
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/core/transformData.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function transformData(data, headers, fns) {
      utils.forEach(fns, function transform(fn) {
        data = fn(data, headers);
      });
      return data;
    };
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/cancel/isCancel.js"(exports2, module2) {
    "use strict";
    module2.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/core/enhanceError.js
var require_enhanceError = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/core/enhanceError.js"(exports2, module2) {
    "use strict";
    module2.exports = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }
      error.request = request;
      error.response = response;
      error.isAxiosError = true;
      error.toJSON = function toJSON() {
        return {
          message: this.message,
          name: this.name,
          description: this.description,
          number: this.number,
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          config: this.config,
          code: this.code
        };
      };
      return error;
    };
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/core/createError.js
var require_createError = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/core/createError.js"(exports2, module2) {
    "use strict";
    var enhanceError = require_enhanceError();
    module2.exports = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/core/settle.js"(exports2, module2) {
    "use strict";
    var createError = require_createError();
    module2.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError("Request failed with status code " + response.status, response.config, null, response.request, response));
      }
    };
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/helpers/cookies.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path2, domain2, secure) {
          var cookie = [];
          cookie.push(name + "=" + encodeURIComponent(value));
          if (utils.isNumber(expires)) {
            cookie.push("expires=" + new Date(expires).toGMTString());
          }
          if (utils.isString(path2)) {
            cookie.push("path=" + path2);
          }
          if (utils.isString(domain2)) {
            cookie.push("domain=" + domain2);
          }
          if (secure === true) {
            cookie.push("secure");
          }
          document.cookie = cookie.join("; ");
        },
        read: function read(name) {
          var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      };
    }() : function nonStandardBrowserEnv() {
      return {
        write: function write() {
        },
        read: function read() {
          return null;
        },
        remove: function remove() {
        }
      };
    }();
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports2, module2) {
    "use strict";
    module2.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/helpers/combineURLs.js"(exports2, module2) {
    "use strict";
    module2.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/core/buildFullPath.js"(exports2, module2) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module2.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/helpers/parseHeaders.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module2.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i2;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i2 = line.indexOf(":");
        key = utils.trim(line.substr(0, i2)).toLowerCase();
        val = utils.trim(line.substr(i2 + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement("a");
      var originURL;
      function resolveURL(url) {
        var href = url;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }() : function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    }();
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/adapters/xhr.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var createError = require_createError();
    module2.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        if (utils.isFormData(requestData)) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          }
          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !config.responseType || config.responseType === "text" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(resolve, reject, response);
          request = null;
        };
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(createError("Request aborted", config, "ECONNABORTED", request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(createError("Network Error", config, null, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = "timeout of " + config.timeout + "ms exceeded";
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError(timeoutErrorMessage, config, "ECONNABORTED", request));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (config.responseType) {
          try {
            request.responseType = config.responseType;
          } catch (e2) {
            if (config.responseType !== "json") {
              throw e2;
            }
          }
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken) {
          config.cancelToken.promise.then(function onCanceled(cancel) {
            if (!request) {
              return;
            }
            request.abort();
            reject(cancel);
            request = null;
          });
        }
        if (!requestData) {
          requestData = null;
        }
        request.send(requestData);
      });
    };
  }
});

// ../../node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js
var require_ms = __commonJS({
  "../../node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js"(exports2, module2) {
    var s = 1e3;
    var m2 = s * 60;
    var h2 = m2 * 60;
    var d2 = h2 * 24;
    var w = d2 * 7;
    var y2 = d2 * 365.25;
    module2.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
      if (!match) {
        return;
      }
      var n2 = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n2 * y2;
        case "weeks":
        case "week":
        case "w":
          return n2 * w;
        case "days":
        case "day":
        case "d":
          return n2 * d2;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n2 * h2;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n2 * m2;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n2 * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n2;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d2) {
        return Math.round(ms / d2) + "d";
      }
      if (msAbs >= h2) {
        return Math.round(ms / h2) + "h";
      }
      if (msAbs >= m2) {
        return Math.round(ms / m2) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d2) {
        return plural(ms, msAbs, d2, "day");
      }
      if (msAbs >= h2) {
        return plural(ms, msAbs, h2, "hour");
      }
      if (msAbs >= m2) {
        return plural(ms, msAbs, m2, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n2, name) {
      var isPlural = msAbs >= n2 * 1.5;
      return Math.round(ms / n2) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// ../../node_modules/.pnpm/debug@4.3.2/node_modules/debug/src/common.js
var require_common = __commonJS({
  "../../node_modules/.pnpm/debug@4.3.2/node_modules/debug/src/common.js"(exports2, module2) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i2 = 0; i2 < namespace.length; i2++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i2);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
          if (!debug.enabled) {
            return;
          }
          const self2 = debug;
          const curr = Number(new Date());
          const ms = curr - (prevTime || curr);
          self2.diff = ms;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index];
              match = formatter.call(self2, val);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self2, args);
          const logFn = self2.log || createDebug.log;
          logFn.apply(self2, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy;
        Object.defineProperty(debug, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug);
        }
        return debug;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i2;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for (i2 = 0; i2 < len; i2++) {
          if (!split[i2]) {
            continue;
          }
          namespaces = split[i2].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
          } else {
            createDebug.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        let i2;
        let len;
        for (i2 = 0, len = createDebug.skips.length; i2 < len; i2++) {
          if (createDebug.skips[i2].test(name)) {
            return false;
          }
        }
        for (i2 = 0, len = createDebug.names.length; i2 < len; i2++) {
          if (createDebug.names[i2].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module2.exports = setup;
  }
});

// ../../node_modules/.pnpm/debug@4.3.2/node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "../../node_modules/.pnpm/debug@4.3.2/node_modules/debug/src/browser.js"(exports2, module2) {
    exports2.formatArgs = formatArgs;
    exports2.save = save;
    exports2.load = load;
    exports2.useColors = useColors;
    exports2.storage = localstorage();
    exports2.destroy = (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports2.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module2.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c2 = "color: " + this.color;
      args.splice(1, 0, c2, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c2);
    }
    exports2.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports2.storage.setItem("debug", namespaces);
        } else {
          exports2.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r;
      try {
        r = exports2.storage.getItem("debug");
      } catch (error) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module2.exports = require_common()(exports2);
    var { formatters } = module2.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// ../../node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js
var require_has_flag = __commonJS({
  "../../node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (flag, argv = process.argv) => {
      const prefix2 = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
      const position = argv.indexOf(prefix2 + flag);
      const terminatorPosition = argv.indexOf("--");
      return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
    };
  }
});

// ../../node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js
var require_supports_color = __commonJS({
  "../../node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js"(exports2, module2) {
    "use strict";
    var os = __require("os");
    var tty = __require("tty");
    var hasFlag = require_has_flag();
    var { env } = process;
    var forceColor;
    if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
      forceColor = 0;
    } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
      forceColor = 1;
    }
    if ("FORCE_COLOR" in env) {
      if (env.FORCE_COLOR === "true") {
        forceColor = 1;
      } else if (env.FORCE_COLOR === "false") {
        forceColor = 0;
      } else {
        forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
      }
    }
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    function supportsColor(haveStream, streamIsTTY) {
      if (forceColor === 0) {
        return 0;
      }
      if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
        return 3;
      }
      if (hasFlag("color=256")) {
        return 2;
      }
      if (haveStream && !streamIsTTY && forceColor === void 0) {
        return 0;
      }
      const min = forceColor || 0;
      if (env.TERM === "dumb") {
        return min;
      }
      if (process.platform === "win32") {
        const osRelease = os.release().split(".");
        if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if ("CI" in env) {
        if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
          return 1;
        }
        return min;
      }
      if ("TEAMCITY_VERSION" in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
      }
      if (env.COLORTERM === "truecolor") {
        return 3;
      }
      if ("TERM_PROGRAM" in env) {
        const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (env.TERM_PROGRAM) {
          case "iTerm.app":
            return version >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
      }
      if ("COLORTERM" in env) {
        return 1;
      }
      return min;
    }
    function getSupportLevel(stream) {
      const level = supportsColor(stream, stream && stream.isTTY);
      return translateLevel(level);
    }
    module2.exports = {
      supportsColor: getSupportLevel,
      stdout: translateLevel(supportsColor(true, tty.isatty(1))),
      stderr: translateLevel(supportsColor(true, tty.isatty(2)))
    };
  }
});

// ../../node_modules/.pnpm/debug@4.3.2/node_modules/debug/src/node.js
var require_node = __commonJS({
  "../../node_modules/.pnpm/debug@4.3.2/node_modules/debug/src/node.js"(exports2, module2) {
    var tty = __require("tty");
    var util = __require("util");
    exports2.init = init;
    exports2.log = log;
    exports2.formatArgs = formatArgs;
    exports2.save = save;
    exports2.load = load;
    exports2.useColors = useColors;
    exports2.destroy = util.deprecate(() => {
    }, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    exports2.colors = [6, 2, 3, 4, 5, 1];
    try {
      const supportsColor = require_supports_color();
      if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports2.colors = [
          20,
          21,
          26,
          27,
          32,
          33,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          56,
          57,
          62,
          63,
          68,
          69,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          92,
          93,
          98,
          99,
          112,
          113,
          128,
          129,
          134,
          135,
          148,
          149,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          178,
          179,
          184,
          185,
          196,
          197,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          214,
          215,
          220,
          221
        ];
      }
    } catch (error) {
    }
    exports2.inspectOpts = Object.keys(process.env).filter((key) => {
      return /^debug_/i.test(key);
    }).reduce((obj, key) => {
      const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_2, k) => {
        return k.toUpperCase();
      });
      let val = process.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val)) {
        val = true;
      } else if (/^(no|off|false|disabled)$/i.test(val)) {
        val = false;
      } else if (val === "null") {
        val = null;
      } else {
        val = Number(val);
      }
      obj[prop] = val;
      return obj;
    }, {});
    function useColors() {
      return "colors" in exports2.inspectOpts ? Boolean(exports2.inspectOpts.colors) : tty.isatty(process.stderr.fd);
    }
    function formatArgs(args) {
      const { namespace: name, useColors: useColors2 } = this;
      if (useColors2) {
        const c2 = this.color;
        const colorCode = "[3" + (c2 < 8 ? c2 : "8;5;" + c2);
        const prefix2 = `  ${colorCode};1m${name} [0m`;
        args[0] = prefix2 + args[0].split("\n").join("\n" + prefix2);
        args.push(colorCode + "m+" + module2.exports.humanize(this.diff) + "[0m");
      } else {
        args[0] = getDate() + name + " " + args[0];
      }
    }
    function getDate() {
      if (exports2.inspectOpts.hideDate) {
        return "";
      }
      return new Date().toISOString() + " ";
    }
    function log(...args) {
      return process.stderr.write(util.format(...args) + "\n");
    }
    function save(namespaces) {
      if (namespaces) {
        process.env.DEBUG = namespaces;
      } else {
        delete process.env.DEBUG;
      }
    }
    function load() {
      return process.env.DEBUG;
    }
    function init(debug) {
      debug.inspectOpts = {};
      const keys = Object.keys(exports2.inspectOpts);
      for (let i2 = 0; i2 < keys.length; i2++) {
        debug.inspectOpts[keys[i2]] = exports2.inspectOpts[keys[i2]];
      }
    }
    module2.exports = require_common()(exports2);
    var { formatters } = module2.exports;
    formatters.o = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
    };
    formatters.O = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts);
    };
  }
});

// ../../node_modules/.pnpm/debug@4.3.2/node_modules/debug/src/index.js
var require_src = __commonJS({
  "../../node_modules/.pnpm/debug@4.3.2/node_modules/debug/src/index.js"(exports2, module2) {
    if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
      module2.exports = require_browser();
    } else {
      module2.exports = require_node();
    }
  }
});

// ../../node_modules/.pnpm/follow-redirects@1.14.1/node_modules/follow-redirects/debug.js
var require_debug = __commonJS({
  "../../node_modules/.pnpm/follow-redirects@1.14.1/node_modules/follow-redirects/debug.js"(exports2, module2) {
    var debug;
    module2.exports = function() {
      if (!debug) {
        try {
          debug = require_src()("follow-redirects");
        } catch (error) {
          debug = function() {
          };
        }
      }
      debug.apply(null, arguments);
    };
  }
});

// ../../node_modules/.pnpm/follow-redirects@1.14.1/node_modules/follow-redirects/index.js
var require_follow_redirects = __commonJS({
  "../../node_modules/.pnpm/follow-redirects@1.14.1/node_modules/follow-redirects/index.js"(exports2, module2) {
    var url = __require("url");
    var URL = url.URL;
    var http = __require("http");
    var https = __require("https");
    var Writable = __require("stream").Writable;
    var assert = __require("assert");
    var debug = require_debug();
    var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
    var eventHandlers = Object.create(null);
    events.forEach(function(event) {
      eventHandlers[event] = function(arg1, arg2, arg3) {
        this._redirectable.emit(event, arg1, arg2, arg3);
      };
    });
    var RedirectionError = createErrorType("ERR_FR_REDIRECTION_FAILURE", "");
    var TooManyRedirectsError = createErrorType("ERR_FR_TOO_MANY_REDIRECTS", "Maximum number of redirects exceeded");
    var MaxBodyLengthExceededError = createErrorType("ERR_FR_MAX_BODY_LENGTH_EXCEEDED", "Request body larger than maxBodyLength limit");
    var WriteAfterEndError = createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
    function RedirectableRequest(options, responseCallback) {
      Writable.call(this);
      this._sanitizeOptions(options);
      this._options = options;
      this._ended = false;
      this._ending = false;
      this._redirectCount = 0;
      this._redirects = [];
      this._requestBodyLength = 0;
      this._requestBodyBuffers = [];
      if (responseCallback) {
        this.on("response", responseCallback);
      }
      var self2 = this;
      this._onNativeResponse = function(response) {
        self2._processResponse(response);
      };
      this._performRequest();
    }
    RedirectableRequest.prototype = Object.create(Writable.prototype);
    RedirectableRequest.prototype.abort = function() {
      abortRequest(this._currentRequest);
      this.emit("abort");
    };
    RedirectableRequest.prototype.write = function(data, encoding, callback) {
      if (this._ending) {
        throw new WriteAfterEndError();
      }
      if (!(typeof data === "string" || typeof data === "object" && "length" in data)) {
        throw new TypeError("data should be a string, Buffer or Uint8Array");
      }
      if (typeof encoding === "function") {
        callback = encoding;
        encoding = null;
      }
      if (data.length === 0) {
        if (callback) {
          callback();
        }
        return;
      }
      if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
        this._requestBodyLength += data.length;
        this._requestBodyBuffers.push({ data, encoding });
        this._currentRequest.write(data, encoding, callback);
      } else {
        this.emit("error", new MaxBodyLengthExceededError());
        this.abort();
      }
    };
    RedirectableRequest.prototype.end = function(data, encoding, callback) {
      if (typeof data === "function") {
        callback = data;
        data = encoding = null;
      } else if (typeof encoding === "function") {
        callback = encoding;
        encoding = null;
      }
      if (!data) {
        this._ended = this._ending = true;
        this._currentRequest.end(null, null, callback);
      } else {
        var self2 = this;
        var currentRequest = this._currentRequest;
        this.write(data, encoding, function() {
          self2._ended = true;
          currentRequest.end(null, null, callback);
        });
        this._ending = true;
      }
    };
    RedirectableRequest.prototype.setHeader = function(name, value) {
      this._options.headers[name] = value;
      this._currentRequest.setHeader(name, value);
    };
    RedirectableRequest.prototype.removeHeader = function(name) {
      delete this._options.headers[name];
      this._currentRequest.removeHeader(name);
    };
    RedirectableRequest.prototype.setTimeout = function(msecs, callback) {
      var self2 = this;
      if (callback) {
        this.on("timeout", callback);
      }
      function destroyOnTimeout(socket) {
        socket.setTimeout(msecs);
        socket.removeListener("timeout", socket.destroy);
        socket.addListener("timeout", socket.destroy);
      }
      function startTimer(socket) {
        if (self2._timeout) {
          clearTimeout(self2._timeout);
        }
        self2._timeout = setTimeout(function() {
          self2.emit("timeout");
          clearTimer();
        }, msecs);
        destroyOnTimeout(socket);
      }
      function clearTimer() {
        clearTimeout(this._timeout);
        if (callback) {
          self2.removeListener("timeout", callback);
        }
        if (!this.socket) {
          self2._currentRequest.removeListener("socket", startTimer);
        }
      }
      if (this.socket) {
        startTimer(this.socket);
      } else {
        this._currentRequest.once("socket", startTimer);
      }
      this.on("socket", destroyOnTimeout);
      this.once("response", clearTimer);
      this.once("error", clearTimer);
      return this;
    };
    [
      "flushHeaders",
      "getHeader",
      "setNoDelay",
      "setSocketKeepAlive"
    ].forEach(function(method) {
      RedirectableRequest.prototype[method] = function(a2, b) {
        return this._currentRequest[method](a2, b);
      };
    });
    ["aborted", "connection", "socket"].forEach(function(property) {
      Object.defineProperty(RedirectableRequest.prototype, property, {
        get: function() {
          return this._currentRequest[property];
        }
      });
    });
    RedirectableRequest.prototype._sanitizeOptions = function(options) {
      if (!options.headers) {
        options.headers = {};
      }
      if (options.host) {
        if (!options.hostname) {
          options.hostname = options.host;
        }
        delete options.host;
      }
      if (!options.pathname && options.path) {
        var searchPos = options.path.indexOf("?");
        if (searchPos < 0) {
          options.pathname = options.path;
        } else {
          options.pathname = options.path.substring(0, searchPos);
          options.search = options.path.substring(searchPos);
        }
      }
    };
    RedirectableRequest.prototype._performRequest = function() {
      var protocol = this._options.protocol;
      var nativeProtocol = this._options.nativeProtocols[protocol];
      if (!nativeProtocol) {
        this.emit("error", new TypeError("Unsupported protocol " + protocol));
        return;
      }
      if (this._options.agents) {
        var scheme = protocol.substr(0, protocol.length - 1);
        this._options.agent = this._options.agents[scheme];
      }
      var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
      this._currentUrl = url.format(this._options);
      request._redirectable = this;
      for (var e2 = 0; e2 < events.length; e2++) {
        request.on(events[e2], eventHandlers[events[e2]]);
      }
      if (this._isRedirect) {
        var i2 = 0;
        var self2 = this;
        var buffers = this._requestBodyBuffers;
        (function writeNext(error) {
          if (request === self2._currentRequest) {
            if (error) {
              self2.emit("error", error);
            } else if (i2 < buffers.length) {
              var buffer = buffers[i2++];
              if (!request.finished) {
                request.write(buffer.data, buffer.encoding, writeNext);
              }
            } else if (self2._ended) {
              request.end();
            }
          }
        })();
      }
    };
    RedirectableRequest.prototype._processResponse = function(response) {
      var statusCode = response.statusCode;
      if (this._options.trackRedirects) {
        this._redirects.push({
          url: this._currentUrl,
          headers: response.headers,
          statusCode
        });
      }
      var location = response.headers.location;
      if (location && this._options.followRedirects !== false && statusCode >= 300 && statusCode < 400) {
        abortRequest(this._currentRequest);
        response.destroy();
        if (++this._redirectCount > this._options.maxRedirects) {
          this.emit("error", new TooManyRedirectsError());
          return;
        }
        if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" || statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
          this._options.method = "GET";
          this._requestBodyBuffers = [];
          removeMatchingHeaders(/^content-/i, this._options.headers);
        }
        var previousHostName = removeMatchingHeaders(/^host$/i, this._options.headers) || url.parse(this._currentUrl).hostname;
        var redirectUrl = url.resolve(this._currentUrl, location);
        debug("redirecting to", redirectUrl);
        this._isRedirect = true;
        var redirectUrlParts = url.parse(redirectUrl);
        Object.assign(this._options, redirectUrlParts);
        if (redirectUrlParts.hostname !== previousHostName) {
          removeMatchingHeaders(/^authorization$/i, this._options.headers);
        }
        if (typeof this._options.beforeRedirect === "function") {
          var responseDetails = { headers: response.headers };
          try {
            this._options.beforeRedirect.call(null, this._options, responseDetails);
          } catch (err) {
            this.emit("error", err);
            return;
          }
          this._sanitizeOptions(this._options);
        }
        try {
          this._performRequest();
        } catch (cause) {
          var error = new RedirectionError("Redirected request failed: " + cause.message);
          error.cause = cause;
          this.emit("error", error);
        }
      } else {
        response.responseUrl = this._currentUrl;
        response.redirects = this._redirects;
        this.emit("response", response);
        this._requestBodyBuffers = [];
      }
    };
    function wrap(protocols) {
      var exports3 = {
        maxRedirects: 21,
        maxBodyLength: 10 * 1024 * 1024
      };
      var nativeProtocols = {};
      Object.keys(protocols).forEach(function(scheme) {
        var protocol = scheme + ":";
        var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
        var wrappedProtocol = exports3[scheme] = Object.create(nativeProtocol);
        function request(input, options, callback) {
          if (typeof input === "string") {
            var urlStr = input;
            try {
              input = urlToOptions(new URL(urlStr));
            } catch (err) {
              input = url.parse(urlStr);
            }
          } else if (URL && input instanceof URL) {
            input = urlToOptions(input);
          } else {
            callback = options;
            options = input;
            input = { protocol };
          }
          if (typeof options === "function") {
            callback = options;
            options = null;
          }
          options = Object.assign({
            maxRedirects: exports3.maxRedirects,
            maxBodyLength: exports3.maxBodyLength
          }, input, options);
          options.nativeProtocols = nativeProtocols;
          assert.equal(options.protocol, protocol, "protocol mismatch");
          debug("options", options);
          return new RedirectableRequest(options, callback);
        }
        function get(input, options, callback) {
          var wrappedRequest = wrappedProtocol.request(input, options, callback);
          wrappedRequest.end();
          return wrappedRequest;
        }
        Object.defineProperties(wrappedProtocol, {
          request: { value: request, configurable: true, enumerable: true, writable: true },
          get: { value: get, configurable: true, enumerable: true, writable: true }
        });
      });
      return exports3;
    }
    function noop() {
    }
    function urlToOptions(urlObject) {
      var options = {
        protocol: urlObject.protocol,
        hostname: urlObject.hostname.startsWith("[") ? urlObject.hostname.slice(1, -1) : urlObject.hostname,
        hash: urlObject.hash,
        search: urlObject.search,
        pathname: urlObject.pathname,
        path: urlObject.pathname + urlObject.search,
        href: urlObject.href
      };
      if (urlObject.port !== "") {
        options.port = Number(urlObject.port);
      }
      return options;
    }
    function removeMatchingHeaders(regex, headers) {
      var lastValue;
      for (var header in headers) {
        if (regex.test(header)) {
          lastValue = headers[header];
          delete headers[header];
        }
      }
      return lastValue;
    }
    function createErrorType(code, defaultMessage) {
      function CustomError(message) {
        Error.captureStackTrace(this, this.constructor);
        this.message = message || defaultMessage;
      }
      CustomError.prototype = new Error();
      CustomError.prototype.constructor = CustomError;
      CustomError.prototype.name = "Error [" + code + "]";
      CustomError.prototype.code = code;
      return CustomError;
    }
    function abortRequest(request) {
      for (var e2 = 0; e2 < events.length; e2++) {
        request.removeListener(events[e2], eventHandlers[events[e2]]);
      }
      request.on("error", noop);
      request.abort();
    }
    module2.exports = wrap({ http, https });
    module2.exports.wrap = wrap;
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/package.json
var require_package = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/package.json"(exports2, module2) {
    module2.exports = {
      name: "axios",
      version: "0.21.1",
      description: "Promise based HTTP client for the browser and node.js",
      main: "index.js",
      scripts: {
        test: "grunt test && bundlesize",
        start: "node ./sandbox/server.js",
        build: "NODE_ENV=production grunt build",
        preversion: "npm test",
        version: "npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json",
        postversion: "git push && git push --tags",
        examples: "node ./examples/server.js",
        coveralls: "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
        fix: "eslint --fix lib/**/*.js"
      },
      repository: {
        type: "git",
        url: "https://github.com/axios/axios.git"
      },
      keywords: [
        "xhr",
        "http",
        "ajax",
        "promise",
        "node"
      ],
      author: "Matt Zabriskie",
      license: "MIT",
      bugs: {
        url: "https://github.com/axios/axios/issues"
      },
      homepage: "https://github.com/axios/axios",
      devDependencies: {
        bundlesize: "^0.17.0",
        coveralls: "^3.0.0",
        "es6-promise": "^4.2.4",
        grunt: "^1.0.2",
        "grunt-banner": "^0.6.0",
        "grunt-cli": "^1.2.0",
        "grunt-contrib-clean": "^1.1.0",
        "grunt-contrib-watch": "^1.0.0",
        "grunt-eslint": "^20.1.0",
        "grunt-karma": "^2.0.0",
        "grunt-mocha-test": "^0.13.3",
        "grunt-ts": "^6.0.0-beta.19",
        "grunt-webpack": "^1.0.18",
        "istanbul-instrumenter-loader": "^1.0.0",
        "jasmine-core": "^2.4.1",
        karma: "^1.3.0",
        "karma-chrome-launcher": "^2.2.0",
        "karma-coverage": "^1.1.1",
        "karma-firefox-launcher": "^1.1.0",
        "karma-jasmine": "^1.1.1",
        "karma-jasmine-ajax": "^0.1.13",
        "karma-opera-launcher": "^1.0.0",
        "karma-safari-launcher": "^1.0.0",
        "karma-sauce-launcher": "^1.2.0",
        "karma-sinon": "^1.0.5",
        "karma-sourcemap-loader": "^0.3.7",
        "karma-webpack": "^1.7.0",
        "load-grunt-tasks": "^3.5.2",
        minimist: "^1.2.0",
        mocha: "^5.2.0",
        sinon: "^4.5.0",
        typescript: "^2.8.1",
        "url-search-params": "^0.10.0",
        webpack: "^1.13.1",
        "webpack-dev-server": "^1.14.1"
      },
      browser: {
        "./lib/adapters/http.js": "./lib/adapters/xhr.js"
      },
      jsdelivr: "dist/axios.min.js",
      unpkg: "dist/axios.min.js",
      typings: "./index.d.ts",
      dependencies: {
        "follow-redirects": "^1.10.0"
      },
      bundlesize: [
        {
          path: "./dist/axios.min.js",
          threshold: "5kB"
        }
      ]
    };
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/adapters/http.js
var require_http = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/adapters/http.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    var settle = require_settle();
    var buildFullPath = require_buildFullPath();
    var buildURL = require_buildURL();
    var http = __require("http");
    var https = __require("https");
    var httpFollow = require_follow_redirects().http;
    var httpsFollow = require_follow_redirects().https;
    var url = __require("url");
    var zlib = __require("zlib");
    var pkg = require_package();
    var createError = require_createError();
    var enhanceError = require_enhanceError();
    var isHttps = /https:?/;
    function setProxy(options, proxy, location) {
      options.hostname = proxy.host;
      options.host = proxy.host;
      options.port = proxy.port;
      options.path = location;
      if (proxy.auth) {
        var base64 = Buffer.from(proxy.auth.username + ":" + proxy.auth.password, "utf8").toString("base64");
        options.headers["Proxy-Authorization"] = "Basic " + base64;
      }
      options.beforeRedirect = function beforeRedirect(redirection) {
        redirection.headers.host = redirection.host;
        setProxy(redirection, proxy, redirection.href);
      };
    }
    module2.exports = function httpAdapter(config) {
      return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {
        var resolve = function resolve2(value) {
          resolvePromise(value);
        };
        var reject = function reject2(value) {
          rejectPromise(value);
        };
        var data = config.data;
        var headers = config.headers;
        if (!headers["User-Agent"] && !headers["user-agent"]) {
          headers["User-Agent"] = "axios/" + pkg.version;
        }
        if (data && !utils.isStream(data)) {
          if (Buffer.isBuffer(data)) {
          } else if (utils.isArrayBuffer(data)) {
            data = Buffer.from(new Uint8Array(data));
          } else if (utils.isString(data)) {
            data = Buffer.from(data, "utf-8");
          } else {
            return reject(createError("Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream", config));
          }
          headers["Content-Length"] = data.length;
        }
        var auth = void 0;
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password || "";
          auth = username + ":" + password;
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        var parsed = url.parse(fullPath);
        var protocol = parsed.protocol || "http:";
        if (!auth && parsed.auth) {
          var urlAuth = parsed.auth.split(":");
          var urlUsername = urlAuth[0] || "";
          var urlPassword = urlAuth[1] || "";
          auth = urlUsername + ":" + urlPassword;
        }
        if (auth) {
          delete headers.Authorization;
        }
        var isHttpsRequest = isHttps.test(protocol);
        var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;
        var options = {
          path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\?/, ""),
          method: config.method.toUpperCase(),
          headers,
          agent,
          agents: { http: config.httpAgent, https: config.httpsAgent },
          auth
        };
        if (config.socketPath) {
          options.socketPath = config.socketPath;
        } else {
          options.hostname = parsed.hostname;
          options.port = parsed.port;
        }
        var proxy = config.proxy;
        if (!proxy && proxy !== false) {
          var proxyEnv = protocol.slice(0, -1) + "_proxy";
          var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];
          if (proxyUrl) {
            var parsedProxyUrl = url.parse(proxyUrl);
            var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;
            var shouldProxy = true;
            if (noProxyEnv) {
              var noProxy = noProxyEnv.split(",").map(function trim(s) {
                return s.trim();
              });
              shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {
                if (!proxyElement) {
                  return false;
                }
                if (proxyElement === "*") {
                  return true;
                }
                if (proxyElement[0] === "." && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {
                  return true;
                }
                return parsed.hostname === proxyElement;
              });
            }
            if (shouldProxy) {
              proxy = {
                host: parsedProxyUrl.hostname,
                port: parsedProxyUrl.port,
                protocol: parsedProxyUrl.protocol
              };
              if (parsedProxyUrl.auth) {
                var proxyUrlAuth = parsedProxyUrl.auth.split(":");
                proxy.auth = {
                  username: proxyUrlAuth[0],
                  password: proxyUrlAuth[1]
                };
              }
            }
          }
        }
        if (proxy) {
          options.headers.host = parsed.hostname + (parsed.port ? ":" + parsed.port : "");
          setProxy(options, proxy, protocol + "//" + parsed.hostname + (parsed.port ? ":" + parsed.port : "") + options.path);
        }
        var transport;
        var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);
        if (config.transport) {
          transport = config.transport;
        } else if (config.maxRedirects === 0) {
          transport = isHttpsProxy ? https : http;
        } else {
          if (config.maxRedirects) {
            options.maxRedirects = config.maxRedirects;
          }
          transport = isHttpsProxy ? httpsFollow : httpFollow;
        }
        if (config.maxBodyLength > -1) {
          options.maxBodyLength = config.maxBodyLength;
        }
        var req = transport.request(options, function handleResponse(res) {
          if (req.aborted)
            return;
          var stream = res;
          var lastRequest = res.req || req;
          if (res.statusCode !== 204 && lastRequest.method !== "HEAD" && config.decompress !== false) {
            switch (res.headers["content-encoding"]) {
              case "gzip":
              case "compress":
              case "deflate":
                stream = stream.pipe(zlib.createUnzip());
                delete res.headers["content-encoding"];
                break;
            }
          }
          var response = {
            status: res.statusCode,
            statusText: res.statusMessage,
            headers: res.headers,
            config,
            request: lastRequest
          };
          if (config.responseType === "stream") {
            response.data = stream;
            settle(resolve, reject, response);
          } else {
            var responseBuffer = [];
            stream.on("data", function handleStreamData(chunk) {
              responseBuffer.push(chunk);
              if (config.maxContentLength > -1 && Buffer.concat(responseBuffer).length > config.maxContentLength) {
                stream.destroy();
                reject(createError("maxContentLength size of " + config.maxContentLength + " exceeded", config, null, lastRequest));
              }
            });
            stream.on("error", function handleStreamError(err) {
              if (req.aborted)
                return;
              reject(enhanceError(err, config, null, lastRequest));
            });
            stream.on("end", function handleStreamEnd() {
              var responseData = Buffer.concat(responseBuffer);
              if (config.responseType !== "arraybuffer") {
                responseData = responseData.toString(config.responseEncoding);
                if (!config.responseEncoding || config.responseEncoding === "utf8") {
                  responseData = utils.stripBOM(responseData);
                }
              }
              response.data = responseData;
              settle(resolve, reject, response);
            });
          }
        });
        req.on("error", function handleRequestError(err) {
          if (req.aborted && err.code !== "ERR_FR_TOO_MANY_REDIRECTS")
            return;
          reject(enhanceError(err, config, null, req));
        });
        if (config.timeout) {
          req.setTimeout(config.timeout, function handleRequestTimeout() {
            req.abort();
            reject(createError("timeout of " + config.timeout + "ms exceeded", config, "ECONNABORTED", req));
          });
        }
        if (config.cancelToken) {
          config.cancelToken.promise.then(function onCanceled(cancel) {
            if (req.aborted)
              return;
            req.abort();
            reject(cancel);
          });
        }
        if (utils.isStream(data)) {
          data.on("error", function handleStreamError(err) {
            reject(enhanceError(err, config, null, req));
          }).pipe(req);
        } else {
          req.end(data);
        }
      });
    };
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/defaults.js
var require_defaults = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/defaults.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    var normalizeHeaderName = require_normalizeHeaderName();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_http();
      }
      return adapter;
    }
    var defaults = {
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        if (utils.isObject(data)) {
          setContentTypeIfUnset(headers, "application/json;charset=utf-8");
          return JSON.stringify(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        if (typeof data === "string") {
          try {
            data = JSON.parse(data);
          } catch (e2) {
          }
        }
        return data;
      }],
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      }
    };
    defaults.headers = {
      common: {
        "Accept": "application/json, text/plain, */*"
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module2.exports = defaults;
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/core/dispatchRequest.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
    }
    module2.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData(config.data, config.headers, config.transformRequest);
      config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
      utils.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function cleanHeaderConfig(method) {
        delete config.headers[method];
      });
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData(response.data, response.headers, config.transformResponse);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/core/mergeConfig.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      var valueFromConfig2Keys = ["url", "method", "data"];
      var mergeDeepPropertiesKeys = ["headers", "auth", "proxy", "params"];
      var defaultToConfig2Keys = [
        "baseURL",
        "transformRequest",
        "transformResponse",
        "paramsSerializer",
        "timeout",
        "timeoutMessage",
        "withCredentials",
        "adapter",
        "responseType",
        "xsrfCookieName",
        "xsrfHeaderName",
        "onUploadProgress",
        "onDownloadProgress",
        "decompress",
        "maxContentLength",
        "maxBodyLength",
        "maxRedirects",
        "transport",
        "httpAgent",
        "httpsAgent",
        "cancelToken",
        "socketPath",
        "responseEncoding"
      ];
      var directMergeKeys = ["validateStatus"];
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          config[prop] = getMergedValue(void 0, config1[prop]);
        }
      }
      utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(void 0, config2[prop]);
        }
      });
      utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);
      utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          config[prop] = getMergedValue(void 0, config1[prop]);
        }
      });
      utils.forEach(directMergeKeys, function merge(prop) {
        if (prop in config2) {
          config[prop] = getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          config[prop] = getMergedValue(void 0, config1[prop]);
        }
      });
      var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys).concat(directMergeKeys);
      var otherKeys = Object.keys(config1).concat(Object.keys(config2)).filter(function filterAxiosKeys(key) {
        return axiosKeys.indexOf(key) === -1;
      });
      utils.forEach(otherKeys, mergeDeepProperties);
      return config;
    };
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/core/Axios.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(config) {
      if (typeof config === "string") {
        config = arguments[1] || {};
        config.url = arguments[0];
      } else {
        config = config || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var chain = [dispatchRequest, void 0];
      var promise = Promise.resolve(config);
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        chain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        chain.push(interceptor.fulfilled, interceptor.rejected);
      });
      while (chain.length) {
        promise = promise.then(chain.shift(), chain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data
        }));
      };
    });
    module2.exports = Axios;
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/cancel/Cancel.js
var require_Cancel = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/cancel/Cancel.js"(exports2, module2) {
    "use strict";
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module2.exports = Cancel;
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/cancel/CancelToken.js"(exports2, module2) {
    "use strict";
    var Cancel = require_Cancel();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c2) {
        cancel = c2;
      });
      return {
        token,
        cancel
      };
    };
    module2.exports = CancelToken;
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/helpers/spread.js"(exports2, module2) {
    "use strict";
    module2.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/helpers/isAxiosError.js"(exports2, module2) {
    "use strict";
    module2.exports = function isAxiosError(payload) {
      return typeof payload === "object" && payload.isAxiosError === true;
    };
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/lib/axios.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      return instance;
    }
    var axios2 = createInstance(defaults);
    axios2.Axios = Axios;
    axios2.create = function create(instanceConfig) {
      return createInstance(mergeConfig(axios2.defaults, instanceConfig));
    };
    axios2.Cancel = require_Cancel();
    axios2.CancelToken = require_CancelToken();
    axios2.isCancel = require_isCancel();
    axios2.all = function all(promises) {
      return Promise.all(promises);
    };
    axios2.spread = require_spread();
    axios2.isAxiosError = require_isAxiosError();
    module2.exports = axios2;
    module2.exports.default = axios2;
  }
});

// ../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/index.js
var require_axios2 = __commonJS({
  "../../node_modules/.pnpm/axios@0.21.1/node_modules/axios/index.js"(exports2, module2) {
    module2.exports = require_axios();
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/F.js
var require_F = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/F.js"(exports2, module2) {
    var F = function() {
      return false;
    };
    module2.exports = F;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/T.js
var require_T = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/T.js"(exports2, module2) {
    var T2 = function() {
      return true;
    };
    module2.exports = T2;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/__.js
var require__ = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/__.js"(exports2, module2) {
    module2.exports = {
      "@@functional/placeholder": true
    };
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_isPlaceholder.js
var require_isPlaceholder = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_isPlaceholder.js"(exports2, module2) {
    function _isPlaceholder(a2) {
      return a2 != null && typeof a2 === "object" && a2["@@functional/placeholder"] === true;
    }
    module2.exports = _isPlaceholder;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_curry1.js
var require_curry1 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_curry1.js"(exports2, module2) {
    var _isPlaceholder = require_isPlaceholder();
    function _curry1(fn) {
      return function f1(a2) {
        if (arguments.length === 0 || _isPlaceholder(a2)) {
          return f1;
        } else {
          return fn.apply(this, arguments);
        }
      };
    }
    module2.exports = _curry1;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_curry2.js
var require_curry2 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_curry2.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var _isPlaceholder = require_isPlaceholder();
    function _curry2(fn) {
      return function f2(a2, b) {
        switch (arguments.length) {
          case 0:
            return f2;
          case 1:
            return _isPlaceholder(a2) ? f2 : _curry1(function(_b) {
              return fn(a2, _b);
            });
          default:
            return _isPlaceholder(a2) && _isPlaceholder(b) ? f2 : _isPlaceholder(a2) ? _curry1(function(_a) {
              return fn(_a, b);
            }) : _isPlaceholder(b) ? _curry1(function(_b) {
              return fn(a2, _b);
            }) : fn(a2, b);
        }
      };
    }
    module2.exports = _curry2;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/add.js
var require_add = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/add.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var add = /* @__PURE__ */ _curry2(function add2(a2, b) {
      return Number(a2) + Number(b);
    });
    module2.exports = add;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_concat.js
var require_concat = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_concat.js"(exports2, module2) {
    function _concat(set1, set2) {
      set1 = set1 || [];
      set2 = set2 || [];
      var idx;
      var len1 = set1.length;
      var len2 = set2.length;
      var result = [];
      idx = 0;
      while (idx < len1) {
        result[result.length] = set1[idx];
        idx += 1;
      }
      idx = 0;
      while (idx < len2) {
        result[result.length] = set2[idx];
        idx += 1;
      }
      return result;
    }
    module2.exports = _concat;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_arity.js
var require_arity = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_arity.js"(exports2, module2) {
    function _arity(n2, fn) {
      switch (n2) {
        case 0:
          return function() {
            return fn.apply(this, arguments);
          };
        case 1:
          return function(a0) {
            return fn.apply(this, arguments);
          };
        case 2:
          return function(a0, a1) {
            return fn.apply(this, arguments);
          };
        case 3:
          return function(a0, a1, a2) {
            return fn.apply(this, arguments);
          };
        case 4:
          return function(a0, a1, a2, a3) {
            return fn.apply(this, arguments);
          };
        case 5:
          return function(a0, a1, a2, a3, a4) {
            return fn.apply(this, arguments);
          };
        case 6:
          return function(a0, a1, a2, a3, a4, a5) {
            return fn.apply(this, arguments);
          };
        case 7:
          return function(a0, a1, a2, a3, a4, a5, a6) {
            return fn.apply(this, arguments);
          };
        case 8:
          return function(a0, a1, a2, a3, a4, a5, a6, a7) {
            return fn.apply(this, arguments);
          };
        case 9:
          return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) {
            return fn.apply(this, arguments);
          };
        case 10:
          return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
            return fn.apply(this, arguments);
          };
        default:
          throw new Error("First argument to _arity must be a non-negative integer no greater than ten");
      }
    }
    module2.exports = _arity;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_curryN.js
var require_curryN = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_curryN.js"(exports2, module2) {
    var _arity = require_arity();
    var _isPlaceholder = require_isPlaceholder();
    function _curryN(length, received, fn) {
      return function() {
        var combined = [];
        var argsIdx = 0;
        var left = length;
        var combinedIdx = 0;
        while (combinedIdx < received.length || argsIdx < arguments.length) {
          var result;
          if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {
            result = received[combinedIdx];
          } else {
            result = arguments[argsIdx];
            argsIdx += 1;
          }
          combined[combinedIdx] = result;
          if (!_isPlaceholder(result)) {
            left -= 1;
          }
          combinedIdx += 1;
        }
        return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));
      };
    }
    module2.exports = _curryN;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/curryN.js
var require_curryN2 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/curryN.js"(exports2, module2) {
    var _arity = require_arity();
    var _curry1 = require_curry1();
    var _curry2 = require_curry2();
    var _curryN = require_curryN();
    var curryN = /* @__PURE__ */ _curry2(function curryN2(length, fn) {
      if (length === 1) {
        return _curry1(fn);
      }
      return _arity(length, _curryN(length, [], fn));
    });
    module2.exports = curryN;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/addIndex.js
var require_addIndex = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/addIndex.js"(exports2, module2) {
    var _concat = require_concat();
    var _curry1 = require_curry1();
    var curryN = require_curryN2();
    var addIndex = /* @__PURE__ */ _curry1(function addIndex2(fn) {
      return curryN(fn.length, function() {
        var idx = 0;
        var origFn = arguments[0];
        var list = arguments[arguments.length - 1];
        var args = Array.prototype.slice.call(arguments, 0);
        args[0] = function() {
          var result = origFn.apply(this, _concat(arguments, [idx, list]));
          idx += 1;
          return result;
        };
        return fn.apply(this, args);
      });
    });
    module2.exports = addIndex;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_curry3.js
var require_curry3 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_curry3.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var _curry2 = require_curry2();
    var _isPlaceholder = require_isPlaceholder();
    function _curry3(fn) {
      return function f3(a2, b, c2) {
        switch (arguments.length) {
          case 0:
            return f3;
          case 1:
            return _isPlaceholder(a2) ? f3 : _curry2(function(_b, _c) {
              return fn(a2, _b, _c);
            });
          case 2:
            return _isPlaceholder(a2) && _isPlaceholder(b) ? f3 : _isPlaceholder(a2) ? _curry2(function(_a, _c) {
              return fn(_a, b, _c);
            }) : _isPlaceholder(b) ? _curry2(function(_b, _c) {
              return fn(a2, _b, _c);
            }) : _curry1(function(_c) {
              return fn(a2, b, _c);
            });
          default:
            return _isPlaceholder(a2) && _isPlaceholder(b) && _isPlaceholder(c2) ? f3 : _isPlaceholder(a2) && _isPlaceholder(b) ? _curry2(function(_a, _b) {
              return fn(_a, _b, c2);
            }) : _isPlaceholder(a2) && _isPlaceholder(c2) ? _curry2(function(_a, _c) {
              return fn(_a, b, _c);
            }) : _isPlaceholder(b) && _isPlaceholder(c2) ? _curry2(function(_b, _c) {
              return fn(a2, _b, _c);
            }) : _isPlaceholder(a2) ? _curry1(function(_a) {
              return fn(_a, b, c2);
            }) : _isPlaceholder(b) ? _curry1(function(_b) {
              return fn(a2, _b, c2);
            }) : _isPlaceholder(c2) ? _curry1(function(_c) {
              return fn(a2, b, _c);
            }) : fn(a2, b, c2);
        }
      };
    }
    module2.exports = _curry3;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/adjust.js
var require_adjust = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/adjust.js"(exports2, module2) {
    var _concat = require_concat();
    var _curry3 = require_curry3();
    var adjust = /* @__PURE__ */ _curry3(function adjust2(idx, fn, list) {
      if (idx >= list.length || idx < -list.length) {
        return list;
      }
      var start = idx < 0 ? list.length : 0;
      var _idx = start + idx;
      var _list = _concat(list);
      _list[_idx] = fn(list[_idx]);
      return _list;
    });
    module2.exports = adjust;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_isArray.js
var require_isArray = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_isArray.js"(exports2, module2) {
    module2.exports = Array.isArray || function _isArray(val) {
      return val != null && val.length >= 0 && Object.prototype.toString.call(val) === "[object Array]";
    };
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_isTransformer.js
var require_isTransformer = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_isTransformer.js"(exports2, module2) {
    function _isTransformer(obj) {
      return obj != null && typeof obj["@@transducer/step"] === "function";
    }
    module2.exports = _isTransformer;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_dispatchable.js
var require_dispatchable = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_dispatchable.js"(exports2, module2) {
    var _isArray = require_isArray();
    var _isTransformer = require_isTransformer();
    function _dispatchable(methodNames, xf, fn) {
      return function() {
        if (arguments.length === 0) {
          return fn();
        }
        var args = Array.prototype.slice.call(arguments, 0);
        var obj = args.pop();
        if (!_isArray(obj)) {
          var idx = 0;
          while (idx < methodNames.length) {
            if (typeof obj[methodNames[idx]] === "function") {
              return obj[methodNames[idx]].apply(obj, args);
            }
            idx += 1;
          }
          if (_isTransformer(obj)) {
            var transducer = xf.apply(null, args);
            return transducer(obj);
          }
        }
        return fn.apply(this, arguments);
      };
    }
    module2.exports = _dispatchable;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_reduced.js
var require_reduced = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_reduced.js"(exports2, module2) {
    function _reduced(x) {
      return x && x["@@transducer/reduced"] ? x : {
        "@@transducer/value": x,
        "@@transducer/reduced": true
      };
    }
    module2.exports = _reduced;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xfBase.js
var require_xfBase = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xfBase.js"(exports2, module2) {
    module2.exports = {
      init: function() {
        return this.xf["@@transducer/init"]();
      },
      result: function(result) {
        return this.xf["@@transducer/result"](result);
      }
    };
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xall.js
var require_xall = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xall.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _reduced = require_reduced();
    var _xfBase = require_xfBase();
    var XAll = /* @__PURE__ */ function() {
      function XAll2(f, xf) {
        this.xf = xf;
        this.f = f;
        this.all = true;
      }
      XAll2.prototype["@@transducer/init"] = _xfBase.init;
      XAll2.prototype["@@transducer/result"] = function(result) {
        if (this.all) {
          result = this.xf["@@transducer/step"](result, true);
        }
        return this.xf["@@transducer/result"](result);
      };
      XAll2.prototype["@@transducer/step"] = function(result, input) {
        if (!this.f(input)) {
          this.all = false;
          result = _reduced(this.xf["@@transducer/step"](result, false));
        }
        return result;
      };
      return XAll2;
    }();
    var _xall = /* @__PURE__ */ _curry2(function _xall2(f, xf) {
      return new XAll(f, xf);
    });
    module2.exports = _xall;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/all.js
var require_all = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/all.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xall = require_xall();
    var all = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable(["all"], _xall, function all2(fn, list) {
      var idx = 0;
      while (idx < list.length) {
        if (!fn(list[idx])) {
          return false;
        }
        idx += 1;
      }
      return true;
    }));
    module2.exports = all;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/max.js
var require_max = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/max.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var max = /* @__PURE__ */ _curry2(function max2(a2, b) {
      return b > a2 ? b : a2;
    });
    module2.exports = max;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_map.js
var require_map = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_map.js"(exports2, module2) {
    function _map(fn, functor) {
      var idx = 0;
      var len = functor.length;
      var result = Array(len);
      while (idx < len) {
        result[idx] = fn(functor[idx]);
        idx += 1;
      }
      return result;
    }
    module2.exports = _map;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_isString.js
var require_isString = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_isString.js"(exports2, module2) {
    function _isString(x) {
      return Object.prototype.toString.call(x) === "[object String]";
    }
    module2.exports = _isString;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_isArrayLike.js
var require_isArrayLike = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_isArrayLike.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var _isArray = require_isArray();
    var _isString = require_isString();
    var _isArrayLike = /* @__PURE__ */ _curry1(function isArrayLike(x) {
      if (_isArray(x)) {
        return true;
      }
      if (!x) {
        return false;
      }
      if (typeof x !== "object") {
        return false;
      }
      if (_isString(x)) {
        return false;
      }
      if (x.nodeType === 1) {
        return !!x.length;
      }
      if (x.length === 0) {
        return true;
      }
      if (x.length > 0) {
        return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
      }
      return false;
    });
    module2.exports = _isArrayLike;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xwrap.js
var require_xwrap = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xwrap.js"(exports2, module2) {
    var XWrap = /* @__PURE__ */ function() {
      function XWrap2(fn) {
        this.f = fn;
      }
      XWrap2.prototype["@@transducer/init"] = function() {
        throw new Error("init not implemented on XWrap");
      };
      XWrap2.prototype["@@transducer/result"] = function(acc) {
        return acc;
      };
      XWrap2.prototype["@@transducer/step"] = function(acc, x) {
        return this.f(acc, x);
      };
      return XWrap2;
    }();
    function _xwrap(fn) {
      return new XWrap(fn);
    }
    module2.exports = _xwrap;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/bind.js
var require_bind2 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/bind.js"(exports2, module2) {
    var _arity = require_arity();
    var _curry2 = require_curry2();
    var bind = /* @__PURE__ */ _curry2(function bind2(fn, thisObj) {
      return _arity(fn.length, function() {
        return fn.apply(thisObj, arguments);
      });
    });
    module2.exports = bind;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_reduce.js
var require_reduce = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_reduce.js"(exports2, module2) {
    var _isArrayLike = require_isArrayLike();
    var _xwrap = require_xwrap();
    var bind = require_bind2();
    function _arrayReduce(xf, acc, list) {
      var idx = 0;
      var len = list.length;
      while (idx < len) {
        acc = xf["@@transducer/step"](acc, list[idx]);
        if (acc && acc["@@transducer/reduced"]) {
          acc = acc["@@transducer/value"];
          break;
        }
        idx += 1;
      }
      return xf["@@transducer/result"](acc);
    }
    function _iterableReduce(xf, acc, iter) {
      var step = iter.next();
      while (!step.done) {
        acc = xf["@@transducer/step"](acc, step.value);
        if (acc && acc["@@transducer/reduced"]) {
          acc = acc["@@transducer/value"];
          break;
        }
        step = iter.next();
      }
      return xf["@@transducer/result"](acc);
    }
    function _methodReduce(xf, acc, obj, methodName) {
      return xf["@@transducer/result"](obj[methodName](bind(xf["@@transducer/step"], xf), acc));
    }
    var symIterator = typeof Symbol !== "undefined" ? Symbol.iterator : "@@iterator";
    function _reduce(fn, acc, list) {
      if (typeof fn === "function") {
        fn = _xwrap(fn);
      }
      if (_isArrayLike(list)) {
        return _arrayReduce(fn, acc, list);
      }
      if (typeof list["fantasy-land/reduce"] === "function") {
        return _methodReduce(fn, acc, list, "fantasy-land/reduce");
      }
      if (list[symIterator] != null) {
        return _iterableReduce(fn, acc, list[symIterator]());
      }
      if (typeof list.next === "function") {
        return _iterableReduce(fn, acc, list);
      }
      if (typeof list.reduce === "function") {
        return _methodReduce(fn, acc, list, "reduce");
      }
      throw new TypeError("reduce: list must be array or iterable");
    }
    module2.exports = _reduce;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xmap.js
var require_xmap = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xmap.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _xfBase = require_xfBase();
    var XMap = /* @__PURE__ */ function() {
      function XMap2(f, xf) {
        this.xf = xf;
        this.f = f;
      }
      XMap2.prototype["@@transducer/init"] = _xfBase.init;
      XMap2.prototype["@@transducer/result"] = _xfBase.result;
      XMap2.prototype["@@transducer/step"] = function(result, input) {
        return this.xf["@@transducer/step"](result, this.f(input));
      };
      return XMap2;
    }();
    var _xmap = /* @__PURE__ */ _curry2(function _xmap2(f, xf) {
      return new XMap(f, xf);
    });
    module2.exports = _xmap;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_has.js
var require_has = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_has.js"(exports2, module2) {
    function _has(prop, obj) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    module2.exports = _has;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_isArguments.js
var require_isArguments = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_isArguments.js"(exports2, module2) {
    var _has = require_has();
    var toString = Object.prototype.toString;
    var _isArguments = /* @__PURE__ */ function() {
      return toString.call(arguments) === "[object Arguments]" ? function _isArguments2(x) {
        return toString.call(x) === "[object Arguments]";
      } : function _isArguments2(x) {
        return _has("callee", x);
      };
    }();
    module2.exports = _isArguments;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/keys.js
var require_keys = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/keys.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var _has = require_has();
    var _isArguments = require_isArguments();
    var hasEnumBug = !/* @__PURE__ */ {
      toString: null
    }.propertyIsEnumerable("toString");
    var nonEnumerableProps = ["constructor", "valueOf", "isPrototypeOf", "toString", "propertyIsEnumerable", "hasOwnProperty", "toLocaleString"];
    var hasArgsEnumBug = /* @__PURE__ */ function() {
      "use strict";
      return arguments.propertyIsEnumerable("length");
    }();
    var contains = function contains2(list, item) {
      var idx = 0;
      while (idx < list.length) {
        if (list[idx] === item) {
          return true;
        }
        idx += 1;
      }
      return false;
    };
    var keys = typeof Object.keys === "function" && !hasArgsEnumBug ? /* @__PURE__ */ _curry1(function keys2(obj) {
      return Object(obj) !== obj ? [] : Object.keys(obj);
    }) : /* @__PURE__ */ _curry1(function keys2(obj) {
      if (Object(obj) !== obj) {
        return [];
      }
      var prop, nIdx;
      var ks = [];
      var checkArgsLength = hasArgsEnumBug && _isArguments(obj);
      for (prop in obj) {
        if (_has(prop, obj) && (!checkArgsLength || prop !== "length")) {
          ks[ks.length] = prop;
        }
      }
      if (hasEnumBug) {
        nIdx = nonEnumerableProps.length - 1;
        while (nIdx >= 0) {
          prop = nonEnumerableProps[nIdx];
          if (_has(prop, obj) && !contains(ks, prop)) {
            ks[ks.length] = prop;
          }
          nIdx -= 1;
        }
      }
      return ks;
    });
    module2.exports = keys;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/map.js
var require_map2 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/map.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _map = require_map();
    var _reduce = require_reduce();
    var _xmap = require_xmap();
    var curryN = require_curryN2();
    var keys = require_keys();
    var map2 = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable(["fantasy-land/map", "map"], _xmap, function map3(fn, functor) {
      switch (Object.prototype.toString.call(functor)) {
        case "[object Function]":
          return curryN(functor.length, function() {
            return fn.call(this, functor.apply(this, arguments));
          });
        case "[object Object]":
          return _reduce(function(acc, key) {
            acc[key] = fn(functor[key]);
            return acc;
          }, {}, keys(functor));
        default:
          return _map(fn, functor);
      }
    }));
    module2.exports = map2;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_isInteger.js
var require_isInteger = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_isInteger.js"(exports2, module2) {
    module2.exports = Number.isInteger || function _isInteger(n2) {
      return n2 << 0 === n2;
    };
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/nth.js
var require_nth = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/nth.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _isString = require_isString();
    var nth = /* @__PURE__ */ _curry2(function nth2(offset, list) {
      var idx = offset < 0 ? list.length + offset : offset;
      return _isString(list) ? list.charAt(idx) : list[idx];
    });
    module2.exports = nth;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/paths.js
var require_paths = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/paths.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _isInteger = require_isInteger();
    var nth = require_nth();
    var paths = /* @__PURE__ */ _curry2(function paths2(pathsArray, obj) {
      return pathsArray.map(function(paths3) {
        var val = obj;
        var idx = 0;
        var p2;
        while (idx < paths3.length) {
          if (val == null) {
            return;
          }
          p2 = paths3[idx];
          val = _isInteger(p2) ? nth(p2, val) : val[p2];
          idx += 1;
        }
        return val;
      });
    });
    module2.exports = paths;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/path.js
var require_path = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/path.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var paths = require_paths();
    var path2 = /* @__PURE__ */ _curry2(function path3(pathAr, obj) {
      return paths([pathAr], obj)[0];
    });
    module2.exports = path2;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/prop.js
var require_prop = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/prop.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var path2 = require_path();
    var prop = /* @__PURE__ */ _curry2(function prop2(p2, obj) {
      return path2([p2], obj);
    });
    module2.exports = prop;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/pluck.js
var require_pluck = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/pluck.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var map2 = require_map2();
    var prop = require_prop();
    var pluck = /* @__PURE__ */ _curry2(function pluck2(p2, list) {
      return map2(prop(p2), list);
    });
    module2.exports = pluck;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/reduce.js
var require_reduce2 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/reduce.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var _reduce = require_reduce();
    var reduce = /* @__PURE__ */ _curry3(_reduce);
    module2.exports = reduce;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/allPass.js
var require_allPass = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/allPass.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var curryN = require_curryN2();
    var max = require_max();
    var pluck = require_pluck();
    var reduce = require_reduce2();
    var allPass = /* @__PURE__ */ _curry1(function allPass2(preds) {
      return curryN(reduce(max, 0, pluck("length", preds)), function() {
        var idx = 0;
        var len = preds.length;
        while (idx < len) {
          if (!preds[idx].apply(this, arguments)) {
            return false;
          }
          idx += 1;
        }
        return true;
      });
    });
    module2.exports = allPass;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/always.js
var require_always = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/always.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var always = /* @__PURE__ */ _curry1(function always2(val) {
      return function() {
        return val;
      };
    });
    module2.exports = always;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/and.js
var require_and = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/and.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var and = /* @__PURE__ */ _curry2(function and2(a2, b) {
      return a2 && b;
    });
    module2.exports = and;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xany.js
var require_xany = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xany.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _reduced = require_reduced();
    var _xfBase = require_xfBase();
    var XAny = /* @__PURE__ */ function() {
      function XAny2(f, xf) {
        this.xf = xf;
        this.f = f;
        this.any = false;
      }
      XAny2.prototype["@@transducer/init"] = _xfBase.init;
      XAny2.prototype["@@transducer/result"] = function(result) {
        if (!this.any) {
          result = this.xf["@@transducer/step"](result, false);
        }
        return this.xf["@@transducer/result"](result);
      };
      XAny2.prototype["@@transducer/step"] = function(result, input) {
        if (this.f(input)) {
          this.any = true;
          result = _reduced(this.xf["@@transducer/step"](result, true));
        }
        return result;
      };
      return XAny2;
    }();
    var _xany = /* @__PURE__ */ _curry2(function _xany2(f, xf) {
      return new XAny(f, xf);
    });
    module2.exports = _xany;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/any.js
var require_any = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/any.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xany = require_xany();
    var any = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable(["any"], _xany, function any2(fn, list) {
      var idx = 0;
      while (idx < list.length) {
        if (fn(list[idx])) {
          return true;
        }
        idx += 1;
      }
      return false;
    }));
    module2.exports = any;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/anyPass.js
var require_anyPass = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/anyPass.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var curryN = require_curryN2();
    var max = require_max();
    var pluck = require_pluck();
    var reduce = require_reduce2();
    var anyPass = /* @__PURE__ */ _curry1(function anyPass2(preds) {
      return curryN(reduce(max, 0, pluck("length", preds)), function() {
        var idx = 0;
        var len = preds.length;
        while (idx < len) {
          if (preds[idx].apply(this, arguments)) {
            return true;
          }
          idx += 1;
        }
        return false;
      });
    });
    module2.exports = anyPass;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/ap.js
var require_ap = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/ap.js"(exports2, module2) {
    var _concat = require_concat();
    var _curry2 = require_curry2();
    var _reduce = require_reduce();
    var map2 = require_map2();
    var ap = /* @__PURE__ */ _curry2(function ap2(applyF, applyX) {
      return typeof applyX["fantasy-land/ap"] === "function" ? applyX["fantasy-land/ap"](applyF) : typeof applyF.ap === "function" ? applyF.ap(applyX) : typeof applyF === "function" ? function(x) {
        return applyF(x)(applyX(x));
      } : _reduce(function(acc, f) {
        return _concat(acc, map2(f, applyX));
      }, [], applyF);
    });
    module2.exports = ap;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_aperture.js
var require_aperture = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_aperture.js"(exports2, module2) {
    function _aperture(n2, list) {
      var idx = 0;
      var limit = list.length - (n2 - 1);
      var acc = new Array(limit >= 0 ? limit : 0);
      while (idx < limit) {
        acc[idx] = Array.prototype.slice.call(list, idx, idx + n2);
        idx += 1;
      }
      return acc;
    }
    module2.exports = _aperture;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xaperture.js
var require_xaperture = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xaperture.js"(exports2, module2) {
    var _concat = require_concat();
    var _curry2 = require_curry2();
    var _xfBase = require_xfBase();
    var XAperture = /* @__PURE__ */ function() {
      function XAperture2(n2, xf) {
        this.xf = xf;
        this.pos = 0;
        this.full = false;
        this.acc = new Array(n2);
      }
      XAperture2.prototype["@@transducer/init"] = _xfBase.init;
      XAperture2.prototype["@@transducer/result"] = function(result) {
        this.acc = null;
        return this.xf["@@transducer/result"](result);
      };
      XAperture2.prototype["@@transducer/step"] = function(result, input) {
        this.store(input);
        return this.full ? this.xf["@@transducer/step"](result, this.getCopy()) : result;
      };
      XAperture2.prototype.store = function(input) {
        this.acc[this.pos] = input;
        this.pos += 1;
        if (this.pos === this.acc.length) {
          this.pos = 0;
          this.full = true;
        }
      };
      XAperture2.prototype.getCopy = function() {
        return _concat(Array.prototype.slice.call(this.acc, this.pos), Array.prototype.slice.call(this.acc, 0, this.pos));
      };
      return XAperture2;
    }();
    var _xaperture = /* @__PURE__ */ _curry2(function _xaperture2(n2, xf) {
      return new XAperture(n2, xf);
    });
    module2.exports = _xaperture;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/aperture.js
var require_aperture2 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/aperture.js"(exports2, module2) {
    var _aperture = require_aperture();
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xaperture = require_xaperture();
    var aperture = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable([], _xaperture, _aperture));
    module2.exports = aperture;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/append.js
var require_append = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/append.js"(exports2, module2) {
    var _concat = require_concat();
    var _curry2 = require_curry2();
    var append = /* @__PURE__ */ _curry2(function append2(el, list) {
      return _concat(list, [el]);
    });
    module2.exports = append;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/apply.js
var require_apply = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/apply.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var apply = /* @__PURE__ */ _curry2(function apply2(fn, args) {
      return fn.apply(this, args);
    });
    module2.exports = apply;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/values.js
var require_values = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/values.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var keys = require_keys();
    var values = /* @__PURE__ */ _curry1(function values2(obj) {
      var props = keys(obj);
      var len = props.length;
      var vals = [];
      var idx = 0;
      while (idx < len) {
        vals[idx] = obj[props[idx]];
        idx += 1;
      }
      return vals;
    });
    module2.exports = values;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/applySpec.js
var require_applySpec = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/applySpec.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var apply = require_apply();
    var curryN = require_curryN2();
    var max = require_max();
    var pluck = require_pluck();
    var reduce = require_reduce2();
    var keys = require_keys();
    var values = require_values();
    function mapValues(fn, obj) {
      return keys(obj).reduce(function(acc, key) {
        acc[key] = fn(obj[key]);
        return acc;
      }, {});
    }
    var applySpec = /* @__PURE__ */ _curry1(function applySpec2(spec) {
      spec = mapValues(function(v) {
        return typeof v == "function" ? v : applySpec2(v);
      }, spec);
      return curryN(reduce(max, 0, pluck("length", values(spec))), function() {
        var args = arguments;
        return mapValues(function(f) {
          return apply(f, args);
        }, spec);
      });
    });
    module2.exports = applySpec;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/applyTo.js
var require_applyTo = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/applyTo.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var applyTo = /* @__PURE__ */ _curry2(function applyTo2(x, f) {
      return f(x);
    });
    module2.exports = applyTo;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/ascend.js
var require_ascend = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/ascend.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var ascend = /* @__PURE__ */ _curry3(function ascend2(fn, a2, b) {
      var aa = fn(a2);
      var bb = fn(b);
      return aa < bb ? -1 : aa > bb ? 1 : 0;
    });
    module2.exports = ascend;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/assoc.js
var require_assoc = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/assoc.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var assoc = /* @__PURE__ */ _curry3(function assoc2(prop, val, obj) {
      var result = {};
      for (var p2 in obj) {
        result[p2] = obj[p2];
      }
      result[prop] = val;
      return result;
    });
    module2.exports = assoc;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/isNil.js
var require_isNil = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/isNil.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var isNil3 = /* @__PURE__ */ _curry1(function isNil4(x) {
      return x == null;
    });
    module2.exports = isNil3;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/assocPath.js
var require_assocPath = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/assocPath.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var _has = require_has();
    var _isArray = require_isArray();
    var _isInteger = require_isInteger();
    var assoc = require_assoc();
    var isNil3 = require_isNil();
    var assocPath = /* @__PURE__ */ _curry3(function assocPath2(path2, val, obj) {
      if (path2.length === 0) {
        return val;
      }
      var idx = path2[0];
      if (path2.length > 1) {
        var nextObj = !isNil3(obj) && _has(idx, obj) ? obj[idx] : _isInteger(path2[1]) ? [] : {};
        val = assocPath2(Array.prototype.slice.call(path2, 1), val, nextObj);
      }
      if (_isInteger(idx) && _isArray(obj)) {
        var arr = [].concat(obj);
        arr[idx] = val;
        return arr;
      } else {
        return assoc(idx, val, obj);
      }
    });
    module2.exports = assocPath;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/nAry.js
var require_nAry = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/nAry.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var nAry = /* @__PURE__ */ _curry2(function nAry2(n2, fn) {
      switch (n2) {
        case 0:
          return function() {
            return fn.call(this);
          };
        case 1:
          return function(a0) {
            return fn.call(this, a0);
          };
        case 2:
          return function(a0, a1) {
            return fn.call(this, a0, a1);
          };
        case 3:
          return function(a0, a1, a2) {
            return fn.call(this, a0, a1, a2);
          };
        case 4:
          return function(a0, a1, a2, a3) {
            return fn.call(this, a0, a1, a2, a3);
          };
        case 5:
          return function(a0, a1, a2, a3, a4) {
            return fn.call(this, a0, a1, a2, a3, a4);
          };
        case 6:
          return function(a0, a1, a2, a3, a4, a5) {
            return fn.call(this, a0, a1, a2, a3, a4, a5);
          };
        case 7:
          return function(a0, a1, a2, a3, a4, a5, a6) {
            return fn.call(this, a0, a1, a2, a3, a4, a5, a6);
          };
        case 8:
          return function(a0, a1, a2, a3, a4, a5, a6, a7) {
            return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);
          };
        case 9:
          return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) {
            return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);
          };
        case 10:
          return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
            return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
          };
        default:
          throw new Error("First argument to nAry must be a non-negative integer no greater than ten");
      }
    });
    module2.exports = nAry;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/binary.js
var require_binary = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/binary.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var nAry = require_nAry();
    var binary = /* @__PURE__ */ _curry1(function binary2(fn) {
      return nAry(2, fn);
    });
    module2.exports = binary;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_isFunction.js
var require_isFunction = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_isFunction.js"(exports2, module2) {
    function _isFunction(x) {
      var type = Object.prototype.toString.call(x);
      return type === "[object Function]" || type === "[object AsyncFunction]" || type === "[object GeneratorFunction]" || type === "[object AsyncGeneratorFunction]";
    }
    module2.exports = _isFunction;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/liftN.js
var require_liftN = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/liftN.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _reduce = require_reduce();
    var ap = require_ap();
    var curryN = require_curryN2();
    var map2 = require_map2();
    var liftN = /* @__PURE__ */ _curry2(function liftN2(arity, fn) {
      var lifted = curryN(arity, fn);
      return curryN(arity, function() {
        return _reduce(ap, map2(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));
      });
    });
    module2.exports = liftN;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/lift.js
var require_lift = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/lift.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var liftN = require_liftN();
    var lift = /* @__PURE__ */ _curry1(function lift2(fn) {
      return liftN(fn.length, fn);
    });
    module2.exports = lift;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/both.js
var require_both = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/both.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _isFunction = require_isFunction();
    var and = require_and();
    var lift = require_lift();
    var both = /* @__PURE__ */ _curry2(function both2(f, g) {
      return _isFunction(f) ? function _both() {
        return f.apply(this, arguments) && g.apply(this, arguments);
      } : lift(and)(f, g);
    });
    module2.exports = both;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/curry.js
var require_curry = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/curry.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var curryN = require_curryN2();
    var curry = /* @__PURE__ */ _curry1(function curry2(fn) {
      return curryN(fn.length, fn);
    });
    module2.exports = curry;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/call.js
var require_call = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/call.js"(exports2, module2) {
    var curry = require_curry();
    var call = /* @__PURE__ */ curry(function call2(fn) {
      return fn.apply(this, Array.prototype.slice.call(arguments, 1));
    });
    module2.exports = call;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_makeFlat.js
var require_makeFlat = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_makeFlat.js"(exports2, module2) {
    var _isArrayLike = require_isArrayLike();
    function _makeFlat(recursive) {
      return function flatt(list) {
        var value, jlen, j;
        var result = [];
        var idx = 0;
        var ilen = list.length;
        while (idx < ilen) {
          if (_isArrayLike(list[idx])) {
            value = recursive ? flatt(list[idx]) : list[idx];
            j = 0;
            jlen = value.length;
            while (j < jlen) {
              result[result.length] = value[j];
              j += 1;
            }
          } else {
            result[result.length] = list[idx];
          }
          idx += 1;
        }
        return result;
      };
    }
    module2.exports = _makeFlat;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_forceReduced.js
var require_forceReduced = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_forceReduced.js"(exports2, module2) {
    function _forceReduced(x) {
      return {
        "@@transducer/value": x,
        "@@transducer/reduced": true
      };
    }
    module2.exports = _forceReduced;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_flatCat.js
var require_flatCat = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_flatCat.js"(exports2, module2) {
    var _forceReduced = require_forceReduced();
    var _isArrayLike = require_isArrayLike();
    var _reduce = require_reduce();
    var _xfBase = require_xfBase();
    var preservingReduced = function(xf) {
      return {
        "@@transducer/init": _xfBase.init,
        "@@transducer/result": function(result) {
          return xf["@@transducer/result"](result);
        },
        "@@transducer/step": function(result, input) {
          var ret = xf["@@transducer/step"](result, input);
          return ret["@@transducer/reduced"] ? _forceReduced(ret) : ret;
        }
      };
    };
    var _flatCat = function _xcat(xf) {
      var rxf = preservingReduced(xf);
      return {
        "@@transducer/init": _xfBase.init,
        "@@transducer/result": function(result) {
          return rxf["@@transducer/result"](result);
        },
        "@@transducer/step": function(result, input) {
          return !_isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);
        }
      };
    };
    module2.exports = _flatCat;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xchain.js
var require_xchain = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xchain.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _flatCat = require_flatCat();
    var map2 = require_map2();
    var _xchain = /* @__PURE__ */ _curry2(function _xchain2(f, xf) {
      return map2(f, _flatCat(xf));
    });
    module2.exports = _xchain;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/chain.js
var require_chain = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/chain.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _makeFlat = require_makeFlat();
    var _xchain = require_xchain();
    var map2 = require_map2();
    var chain = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable(["fantasy-land/chain", "chain"], _xchain, function chain2(fn, monad) {
      if (typeof monad === "function") {
        return function(x) {
          return fn(monad(x))(x);
        };
      }
      return _makeFlat(false)(map2(fn, monad));
    }));
    module2.exports = chain;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/clamp.js
var require_clamp = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/clamp.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var clamp = /* @__PURE__ */ _curry3(function clamp2(min, max, value) {
      if (min > max) {
        throw new Error("min must not be greater than max in clamp(min, max, value)");
      }
      return value < min ? min : value > max ? max : value;
    });
    module2.exports = clamp;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_cloneRegExp.js
var require_cloneRegExp = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_cloneRegExp.js"(exports2, module2) {
    function _cloneRegExp(pattern) {
      return new RegExp(pattern.source, (pattern.global ? "g" : "") + (pattern.ignoreCase ? "i" : "") + (pattern.multiline ? "m" : "") + (pattern.sticky ? "y" : "") + (pattern.unicode ? "u" : ""));
    }
    module2.exports = _cloneRegExp;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/type.js
var require_type = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/type.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var type = /* @__PURE__ */ _curry1(function type2(val) {
      return val === null ? "Null" : val === void 0 ? "Undefined" : Object.prototype.toString.call(val).slice(8, -1);
    });
    module2.exports = type;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_clone.js
var require_clone = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_clone.js"(exports2, module2) {
    var _cloneRegExp = require_cloneRegExp();
    var type = require_type();
    function _clone(value, refFrom, refTo, deep) {
      var copy = function copy2(copiedValue) {
        var len = refFrom.length;
        var idx = 0;
        while (idx < len) {
          if (value === refFrom[idx]) {
            return refTo[idx];
          }
          idx += 1;
        }
        refFrom[idx + 1] = value;
        refTo[idx + 1] = copiedValue;
        for (var key in value) {
          copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];
        }
        return copiedValue;
      };
      switch (type(value)) {
        case "Object":
          return copy({});
        case "Array":
          return copy([]);
        case "Date":
          return new Date(value.valueOf());
        case "RegExp":
          return _cloneRegExp(value);
        default:
          return value;
      }
    }
    module2.exports = _clone;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/clone.js
var require_clone2 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/clone.js"(exports2, module2) {
    var _clone = require_clone();
    var _curry1 = require_curry1();
    var clone = /* @__PURE__ */ _curry1(function clone2(value) {
      return value != null && typeof value.clone === "function" ? value.clone() : _clone(value, [], [], true);
    });
    module2.exports = clone;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/comparator.js
var require_comparator = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/comparator.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var comparator = /* @__PURE__ */ _curry1(function comparator2(pred) {
      return function(a2, b) {
        return pred(a2, b) ? -1 : pred(b, a2) ? 1 : 0;
      };
    });
    module2.exports = comparator;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/not.js
var require_not = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/not.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var not = /* @__PURE__ */ _curry1(function not2(a2) {
      return !a2;
    });
    module2.exports = not;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/complement.js
var require_complement = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/complement.js"(exports2, module2) {
    var lift = require_lift();
    var not = require_not();
    var complement = /* @__PURE__ */ lift(not);
    module2.exports = complement;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_pipe.js
var require_pipe = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_pipe.js"(exports2, module2) {
    function _pipe(f, g) {
      return function() {
        return g.call(this, f.apply(this, arguments));
      };
    }
    module2.exports = _pipe;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_checkForMethod.js
var require_checkForMethod = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_checkForMethod.js"(exports2, module2) {
    var _isArray = require_isArray();
    function _checkForMethod(methodname, fn) {
      return function() {
        var length = arguments.length;
        if (length === 0) {
          return fn();
        }
        var obj = arguments[length - 1];
        return _isArray(obj) || typeof obj[methodname] !== "function" ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));
      };
    }
    module2.exports = _checkForMethod;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/slice.js
var require_slice = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/slice.js"(exports2, module2) {
    var _checkForMethod = require_checkForMethod();
    var _curry3 = require_curry3();
    var slice = /* @__PURE__ */ _curry3(/* @__PURE__ */ _checkForMethod("slice", function slice2(fromIndex, toIndex, list) {
      return Array.prototype.slice.call(list, fromIndex, toIndex);
    }));
    module2.exports = slice;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/tail.js
var require_tail = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/tail.js"(exports2, module2) {
    var _checkForMethod = require_checkForMethod();
    var _curry1 = require_curry1();
    var slice = require_slice();
    var tail = /* @__PURE__ */ _curry1(/* @__PURE__ */ _checkForMethod("tail", /* @__PURE__ */ slice(1, Infinity)));
    module2.exports = tail;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/pipe.js
var require_pipe2 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/pipe.js"(exports2, module2) {
    var _arity = require_arity();
    var _pipe = require_pipe();
    var reduce = require_reduce2();
    var tail = require_tail();
    function pipe2() {
      if (arguments.length === 0) {
        throw new Error("pipe requires at least one argument");
      }
      return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));
    }
    module2.exports = pipe2;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/reverse.js
var require_reverse = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/reverse.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var _isString = require_isString();
    var reverse = /* @__PURE__ */ _curry1(function reverse2(list) {
      return _isString(list) ? list.split("").reverse().join("") : Array.prototype.slice.call(list, 0).reverse();
    });
    module2.exports = reverse;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/compose.js
var require_compose = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/compose.js"(exports2, module2) {
    var pipe2 = require_pipe2();
    var reverse = require_reverse();
    function compose() {
      if (arguments.length === 0) {
        throw new Error("compose requires at least one argument");
      }
      return pipe2.apply(this, reverse(arguments));
    }
    module2.exports = compose;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/composeK.js
var require_composeK = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/composeK.js"(exports2, module2) {
    var chain = require_chain();
    var compose = require_compose();
    var map2 = require_map2();
    function composeK() {
      if (arguments.length === 0) {
        throw new Error("composeK requires at least one argument");
      }
      var init = Array.prototype.slice.call(arguments);
      var last = init.pop();
      return compose(compose.apply(this, map2(chain, init)), last);
    }
    module2.exports = composeK;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_pipeP.js
var require_pipeP = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_pipeP.js"(exports2, module2) {
    function _pipeP(f, g) {
      return function() {
        var ctx = this;
        return f.apply(ctx, arguments).then(function(x) {
          return g.call(ctx, x);
        });
      };
    }
    module2.exports = _pipeP;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/pipeP.js
var require_pipeP2 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/pipeP.js"(exports2, module2) {
    var _arity = require_arity();
    var _pipeP = require_pipeP();
    var reduce = require_reduce2();
    var tail = require_tail();
    function pipeP() {
      if (arguments.length === 0) {
        throw new Error("pipeP requires at least one argument");
      }
      return _arity(arguments[0].length, reduce(_pipeP, arguments[0], tail(arguments)));
    }
    module2.exports = pipeP;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/composeP.js
var require_composeP = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/composeP.js"(exports2, module2) {
    var pipeP = require_pipeP2();
    var reverse = require_reverse();
    function composeP() {
      if (arguments.length === 0) {
        throw new Error("composeP requires at least one argument");
      }
      return pipeP.apply(this, reverse(arguments));
    }
    module2.exports = composeP;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/head.js
var require_head = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/head.js"(exports2, module2) {
    var nth = require_nth();
    var head = /* @__PURE__ */ nth(0);
    module2.exports = head;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_identity.js
var require_identity = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_identity.js"(exports2, module2) {
    function _identity(x) {
      return x;
    }
    module2.exports = _identity;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/identity.js
var require_identity2 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/identity.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var _identity = require_identity();
    var identity2 = /* @__PURE__ */ _curry1(_identity);
    module2.exports = identity2;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/pipeWith.js
var require_pipeWith = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/pipeWith.js"(exports2, module2) {
    var _arity = require_arity();
    var _curry2 = require_curry2();
    var head = require_head();
    var _reduce = require_reduce();
    var tail = require_tail();
    var identity2 = require_identity2();
    var pipeWith = /* @__PURE__ */ _curry2(function pipeWith2(xf, list) {
      if (list.length <= 0) {
        return identity2;
      }
      var headList = head(list);
      var tailList = tail(list);
      return _arity(headList.length, function() {
        return _reduce(function(result, f) {
          return xf.call(this, f, result);
        }, headList.apply(this, arguments), tailList);
      });
    });
    module2.exports = pipeWith;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/composeWith.js
var require_composeWith = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/composeWith.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var pipeWith = require_pipeWith();
    var reverse = require_reverse();
    var composeWith = /* @__PURE__ */ _curry2(function composeWith2(xf, list) {
      return pipeWith.apply(this, [xf, reverse(list)]);
    });
    module2.exports = composeWith;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_arrayFromIterator.js
var require_arrayFromIterator = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_arrayFromIterator.js"(exports2, module2) {
    function _arrayFromIterator(iter) {
      var list = [];
      var next;
      while (!(next = iter.next()).done) {
        list.push(next.value);
      }
      return list;
    }
    module2.exports = _arrayFromIterator;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_includesWith.js
var require_includesWith = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_includesWith.js"(exports2, module2) {
    function _includesWith(pred, x, list) {
      var idx = 0;
      var len = list.length;
      while (idx < len) {
        if (pred(x, list[idx])) {
          return true;
        }
        idx += 1;
      }
      return false;
    }
    module2.exports = _includesWith;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_functionName.js
var require_functionName = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_functionName.js"(exports2, module2) {
    function _functionName(f) {
      var match = String(f).match(/^function (\w*)/);
      return match == null ? "" : match[1];
    }
    module2.exports = _functionName;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_objectIs.js
var require_objectIs = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_objectIs.js"(exports2, module2) {
    function _objectIs(a2, b) {
      if (a2 === b) {
        return a2 !== 0 || 1 / a2 === 1 / b;
      } else {
        return a2 !== a2 && b !== b;
      }
    }
    module2.exports = typeof Object.is === "function" ? Object.is : _objectIs;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_equals.js
var require_equals = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_equals.js"(exports2, module2) {
    var _arrayFromIterator = require_arrayFromIterator();
    var _includesWith = require_includesWith();
    var _functionName = require_functionName();
    var _has = require_has();
    var _objectIs = require_objectIs();
    var keys = require_keys();
    var type = require_type();
    function _uniqContentEquals(aIterator, bIterator, stackA, stackB) {
      var a2 = _arrayFromIterator(aIterator);
      var b = _arrayFromIterator(bIterator);
      function eq(_a, _b) {
        return _equals(_a, _b, stackA.slice(), stackB.slice());
      }
      return !_includesWith(function(b2, aItem) {
        return !_includesWith(eq, aItem, b2);
      }, b, a2);
    }
    function _equals(a2, b, stackA, stackB) {
      if (_objectIs(a2, b)) {
        return true;
      }
      var typeA = type(a2);
      if (typeA !== type(b)) {
        return false;
      }
      if (a2 == null || b == null) {
        return false;
      }
      if (typeof a2["fantasy-land/equals"] === "function" || typeof b["fantasy-land/equals"] === "function") {
        return typeof a2["fantasy-land/equals"] === "function" && a2["fantasy-land/equals"](b) && typeof b["fantasy-land/equals"] === "function" && b["fantasy-land/equals"](a2);
      }
      if (typeof a2.equals === "function" || typeof b.equals === "function") {
        return typeof a2.equals === "function" && a2.equals(b) && typeof b.equals === "function" && b.equals(a2);
      }
      switch (typeA) {
        case "Arguments":
        case "Array":
        case "Object":
          if (typeof a2.constructor === "function" && _functionName(a2.constructor) === "Promise") {
            return a2 === b;
          }
          break;
        case "Boolean":
        case "Number":
        case "String":
          if (!(typeof a2 === typeof b && _objectIs(a2.valueOf(), b.valueOf()))) {
            return false;
          }
          break;
        case "Date":
          if (!_objectIs(a2.valueOf(), b.valueOf())) {
            return false;
          }
          break;
        case "Error":
          return a2.name === b.name && a2.message === b.message;
        case "RegExp":
          if (!(a2.source === b.source && a2.global === b.global && a2.ignoreCase === b.ignoreCase && a2.multiline === b.multiline && a2.sticky === b.sticky && a2.unicode === b.unicode)) {
            return false;
          }
          break;
      }
      var idx = stackA.length - 1;
      while (idx >= 0) {
        if (stackA[idx] === a2) {
          return stackB[idx] === b;
        }
        idx -= 1;
      }
      switch (typeA) {
        case "Map":
          if (a2.size !== b.size) {
            return false;
          }
          return _uniqContentEquals(a2.entries(), b.entries(), stackA.concat([a2]), stackB.concat([b]));
        case "Set":
          if (a2.size !== b.size) {
            return false;
          }
          return _uniqContentEquals(a2.values(), b.values(), stackA.concat([a2]), stackB.concat([b]));
        case "Arguments":
        case "Array":
        case "Object":
        case "Boolean":
        case "Number":
        case "String":
        case "Date":
        case "Error":
        case "RegExp":
        case "Int8Array":
        case "Uint8Array":
        case "Uint8ClampedArray":
        case "Int16Array":
        case "Uint16Array":
        case "Int32Array":
        case "Uint32Array":
        case "Float32Array":
        case "Float64Array":
        case "ArrayBuffer":
          break;
        default:
          return false;
      }
      var keysA = keys(a2);
      if (keysA.length !== keys(b).length) {
        return false;
      }
      var extendedStackA = stackA.concat([a2]);
      var extendedStackB = stackB.concat([b]);
      idx = keysA.length - 1;
      while (idx >= 0) {
        var key = keysA[idx];
        if (!(_has(key, b) && _equals(b[key], a2[key], extendedStackA, extendedStackB))) {
          return false;
        }
        idx -= 1;
      }
      return true;
    }
    module2.exports = _equals;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/equals.js
var require_equals2 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/equals.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _equals = require_equals();
    var equals = /* @__PURE__ */ _curry2(function equals2(a2, b) {
      return _equals(a2, b, [], []);
    });
    module2.exports = equals;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_indexOf.js
var require_indexOf = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_indexOf.js"(exports2, module2) {
    var equals = require_equals2();
    function _indexOf(list, a2, idx) {
      var inf, item;
      if (typeof list.indexOf === "function") {
        switch (typeof a2) {
          case "number":
            if (a2 === 0) {
              inf = 1 / a2;
              while (idx < list.length) {
                item = list[idx];
                if (item === 0 && 1 / item === inf) {
                  return idx;
                }
                idx += 1;
              }
              return -1;
            } else if (a2 !== a2) {
              while (idx < list.length) {
                item = list[idx];
                if (typeof item === "number" && item !== item) {
                  return idx;
                }
                idx += 1;
              }
              return -1;
            }
            return list.indexOf(a2, idx);
          case "string":
          case "boolean":
          case "function":
          case "undefined":
            return list.indexOf(a2, idx);
          case "object":
            if (a2 === null) {
              return list.indexOf(a2, idx);
            }
        }
      }
      while (idx < list.length) {
        if (equals(list[idx], a2)) {
          return idx;
        }
        idx += 1;
      }
      return -1;
    }
    module2.exports = _indexOf;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_includes.js
var require_includes = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_includes.js"(exports2, module2) {
    var _indexOf = require_indexOf();
    function _includes(a2, list) {
      return _indexOf(list, a2, 0) >= 0;
    }
    module2.exports = _includes;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_quote.js
var require_quote = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_quote.js"(exports2, module2) {
    function _quote(s) {
      var escaped = s.replace(/\\/g, "\\\\").replace(/[\b]/g, "\\b").replace(/\f/g, "\\f").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t").replace(/\v/g, "\\v").replace(/\0/g, "\\0");
      return '"' + escaped.replace(/"/g, '\\"') + '"';
    }
    module2.exports = _quote;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_toISOString.js
var require_toISOString = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_toISOString.js"(exports2, module2) {
    var pad = function pad2(n2) {
      return (n2 < 10 ? "0" : "") + n2;
    };
    var _toISOString = typeof Date.prototype.toISOString === "function" ? function _toISOString2(d2) {
      return d2.toISOString();
    } : function _toISOString2(d2) {
      return d2.getUTCFullYear() + "-" + pad(d2.getUTCMonth() + 1) + "-" + pad(d2.getUTCDate()) + "T" + pad(d2.getUTCHours()) + ":" + pad(d2.getUTCMinutes()) + ":" + pad(d2.getUTCSeconds()) + "." + (d2.getUTCMilliseconds() / 1e3).toFixed(3).slice(2, 5) + "Z";
    };
    module2.exports = _toISOString;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_complement.js
var require_complement2 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_complement.js"(exports2, module2) {
    function _complement(f) {
      return function() {
        return !f.apply(this, arguments);
      };
    }
    module2.exports = _complement;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_filter.js
var require_filter = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_filter.js"(exports2, module2) {
    function _filter(fn, list) {
      var idx = 0;
      var len = list.length;
      var result = [];
      while (idx < len) {
        if (fn(list[idx])) {
          result[result.length] = list[idx];
        }
        idx += 1;
      }
      return result;
    }
    module2.exports = _filter;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_isObject.js
var require_isObject = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_isObject.js"(exports2, module2) {
    function _isObject(x) {
      return Object.prototype.toString.call(x) === "[object Object]";
    }
    module2.exports = _isObject;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xfilter.js
var require_xfilter = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xfilter.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _xfBase = require_xfBase();
    var XFilter = /* @__PURE__ */ function() {
      function XFilter2(f, xf) {
        this.xf = xf;
        this.f = f;
      }
      XFilter2.prototype["@@transducer/init"] = _xfBase.init;
      XFilter2.prototype["@@transducer/result"] = _xfBase.result;
      XFilter2.prototype["@@transducer/step"] = function(result, input) {
        return this.f(input) ? this.xf["@@transducer/step"](result, input) : result;
      };
      return XFilter2;
    }();
    var _xfilter = /* @__PURE__ */ _curry2(function _xfilter2(f, xf) {
      return new XFilter(f, xf);
    });
    module2.exports = _xfilter;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/filter.js
var require_filter2 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/filter.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _filter = require_filter();
    var _isObject = require_isObject();
    var _reduce = require_reduce();
    var _xfilter = require_xfilter();
    var keys = require_keys();
    var filter = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable(["filter"], _xfilter, function(pred, filterable) {
      return _isObject(filterable) ? _reduce(function(acc, key) {
        if (pred(filterable[key])) {
          acc[key] = filterable[key];
        }
        return acc;
      }, {}, keys(filterable)) : _filter(pred, filterable);
    }));
    module2.exports = filter;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/reject.js
var require_reject = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/reject.js"(exports2, module2) {
    var _complement = require_complement2();
    var _curry2 = require_curry2();
    var filter = require_filter2();
    var reject = /* @__PURE__ */ _curry2(function reject2(pred, filterable) {
      return filter(_complement(pred), filterable);
    });
    module2.exports = reject;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_toString.js
var require_toString = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_toString.js"(exports2, module2) {
    var _includes = require_includes();
    var _map = require_map();
    var _quote = require_quote();
    var _toISOString = require_toISOString();
    var keys = require_keys();
    var reject = require_reject();
    function _toString(x, seen) {
      var recur = function recur2(y2) {
        var xs = seen.concat([x]);
        return _includes(y2, xs) ? "<Circular>" : _toString(y2, xs);
      };
      var mapPairs = function(obj, keys2) {
        return _map(function(k) {
          return _quote(k) + ": " + recur(obj[k]);
        }, keys2.slice().sort());
      };
      switch (Object.prototype.toString.call(x)) {
        case "[object Arguments]":
          return "(function() { return arguments; }(" + _map(recur, x).join(", ") + "))";
        case "[object Array]":
          return "[" + _map(recur, x).concat(mapPairs(x, reject(function(k) {
            return /^\d+$/.test(k);
          }, keys(x)))).join(", ") + "]";
        case "[object Boolean]":
          return typeof x === "object" ? "new Boolean(" + recur(x.valueOf()) + ")" : x.toString();
        case "[object Date]":
          return "new Date(" + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ")";
        case "[object Null]":
          return "null";
        case "[object Number]":
          return typeof x === "object" ? "new Number(" + recur(x.valueOf()) + ")" : 1 / x === -Infinity ? "-0" : x.toString(10);
        case "[object String]":
          return typeof x === "object" ? "new String(" + recur(x.valueOf()) + ")" : _quote(x);
        case "[object Undefined]":
          return "undefined";
        default:
          if (typeof x.toString === "function") {
            var repr = x.toString();
            if (repr !== "[object Object]") {
              return repr;
            }
          }
          return "{" + mapPairs(x, keys(x)).join(", ") + "}";
      }
    }
    module2.exports = _toString;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/toString.js
var require_toString2 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/toString.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var _toString = require_toString();
    var toString = /* @__PURE__ */ _curry1(function toString2(val) {
      return _toString(val, []);
    });
    module2.exports = toString;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/concat.js
var require_concat2 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/concat.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _isArray = require_isArray();
    var _isFunction = require_isFunction();
    var _isString = require_isString();
    var toString = require_toString2();
    var concat = /* @__PURE__ */ _curry2(function concat2(a2, b) {
      if (_isArray(a2)) {
        if (_isArray(b)) {
          return a2.concat(b);
        }
        throw new TypeError(toString(b) + " is not an array");
      }
      if (_isString(a2)) {
        if (_isString(b)) {
          return a2 + b;
        }
        throw new TypeError(toString(b) + " is not a string");
      }
      if (a2 != null && _isFunction(a2["fantasy-land/concat"])) {
        return a2["fantasy-land/concat"](b);
      }
      if (a2 != null && _isFunction(a2.concat)) {
        return a2.concat(b);
      }
      throw new TypeError(toString(a2) + ' does not have a method named "concat" or "fantasy-land/concat"');
    });
    module2.exports = concat;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/cond.js
var require_cond = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/cond.js"(exports2, module2) {
    var _arity = require_arity();
    var _curry1 = require_curry1();
    var map2 = require_map2();
    var max = require_max();
    var reduce = require_reduce2();
    var cond = /* @__PURE__ */ _curry1(function cond2(pairs) {
      var arity = reduce(max, 0, map2(function(pair) {
        return pair[0].length;
      }, pairs));
      return _arity(arity, function() {
        var idx = 0;
        while (idx < pairs.length) {
          if (pairs[idx][0].apply(this, arguments)) {
            return pairs[idx][1].apply(this, arguments);
          }
          idx += 1;
        }
      });
    });
    module2.exports = cond;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/constructN.js
var require_constructN = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/constructN.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var curry = require_curry();
    var nAry = require_nAry();
    var constructN = /* @__PURE__ */ _curry2(function constructN2(n2, Fn) {
      if (n2 > 10) {
        throw new Error("Constructor with greater than ten arguments");
      }
      if (n2 === 0) {
        return function() {
          return new Fn();
        };
      }
      return curry(nAry(n2, function($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
        switch (arguments.length) {
          case 1:
            return new Fn($0);
          case 2:
            return new Fn($0, $1);
          case 3:
            return new Fn($0, $1, $2);
          case 4:
            return new Fn($0, $1, $2, $3);
          case 5:
            return new Fn($0, $1, $2, $3, $4);
          case 6:
            return new Fn($0, $1, $2, $3, $4, $5);
          case 7:
            return new Fn($0, $1, $2, $3, $4, $5, $6);
          case 8:
            return new Fn($0, $1, $2, $3, $4, $5, $6, $7);
          case 9:
            return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);
          case 10:
            return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);
        }
      }));
    });
    module2.exports = constructN;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/construct.js
var require_construct = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/construct.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var constructN = require_constructN();
    var construct = /* @__PURE__ */ _curry1(function construct2(Fn) {
      return constructN(Fn.length, Fn);
    });
    module2.exports = construct;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/contains.js
var require_contains = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/contains.js"(exports2, module2) {
    var _includes = require_includes();
    var _curry2 = require_curry2();
    var contains = /* @__PURE__ */ _curry2(_includes);
    module2.exports = contains;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/converge.js
var require_converge = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/converge.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _map = require_map();
    var curryN = require_curryN2();
    var max = require_max();
    var pluck = require_pluck();
    var reduce = require_reduce2();
    var converge = /* @__PURE__ */ _curry2(function converge2(after, fns) {
      return curryN(reduce(max, 0, pluck("length", fns)), function() {
        var args = arguments;
        var context = this;
        return after.apply(context, _map(function(fn) {
          return fn.apply(context, args);
        }, fns));
      });
    });
    module2.exports = converge;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xreduceBy.js
var require_xreduceBy = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xreduceBy.js"(exports2, module2) {
    var _curryN = require_curryN();
    var _has = require_has();
    var _xfBase = require_xfBase();
    var XReduceBy = /* @__PURE__ */ function() {
      function XReduceBy2(valueFn, valueAcc, keyFn, xf) {
        this.valueFn = valueFn;
        this.valueAcc = valueAcc;
        this.keyFn = keyFn;
        this.xf = xf;
        this.inputs = {};
      }
      XReduceBy2.prototype["@@transducer/init"] = _xfBase.init;
      XReduceBy2.prototype["@@transducer/result"] = function(result) {
        var key;
        for (key in this.inputs) {
          if (_has(key, this.inputs)) {
            result = this.xf["@@transducer/step"](result, this.inputs[key]);
            if (result["@@transducer/reduced"]) {
              result = result["@@transducer/value"];
              break;
            }
          }
        }
        this.inputs = null;
        return this.xf["@@transducer/result"](result);
      };
      XReduceBy2.prototype["@@transducer/step"] = function(result, input) {
        var key = this.keyFn(input);
        this.inputs[key] = this.inputs[key] || [key, this.valueAcc];
        this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);
        return result;
      };
      return XReduceBy2;
    }();
    var _xreduceBy = /* @__PURE__ */ _curryN(4, [], function _xreduceBy2(valueFn, valueAcc, keyFn, xf) {
      return new XReduceBy(valueFn, valueAcc, keyFn, xf);
    });
    module2.exports = _xreduceBy;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/reduceBy.js
var require_reduceBy = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/reduceBy.js"(exports2, module2) {
    var _clone = require_clone();
    var _curryN = require_curryN();
    var _dispatchable = require_dispatchable();
    var _has = require_has();
    var _reduce = require_reduce();
    var _xreduceBy = require_xreduceBy();
    var reduceBy = /* @__PURE__ */ _curryN(4, [], /* @__PURE__ */ _dispatchable([], _xreduceBy, function reduceBy2(valueFn, valueAcc, keyFn, list) {
      return _reduce(function(acc, elt) {
        var key = keyFn(elt);
        acc[key] = valueFn(_has(key, acc) ? acc[key] : _clone(valueAcc, [], [], false), elt);
        return acc;
      }, {}, list);
    }));
    module2.exports = reduceBy;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/countBy.js
var require_countBy = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/countBy.js"(exports2, module2) {
    var reduceBy = require_reduceBy();
    var countBy = /* @__PURE__ */ reduceBy(function(acc, elem) {
      return acc + 1;
    }, 0);
    module2.exports = countBy;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/dec.js
var require_dec = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/dec.js"(exports2, module2) {
    var add = require_add();
    var dec = /* @__PURE__ */ add(-1);
    module2.exports = dec;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/defaultTo.js
var require_defaultTo = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/defaultTo.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var defaultTo = /* @__PURE__ */ _curry2(function defaultTo2(d2, v) {
      return v == null || v !== v ? d2 : v;
    });
    module2.exports = defaultTo;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/descend.js
var require_descend = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/descend.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var descend = /* @__PURE__ */ _curry3(function descend2(fn, a2, b) {
      var aa = fn(a2);
      var bb = fn(b);
      return aa > bb ? -1 : aa < bb ? 1 : 0;
    });
    module2.exports = descend;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_Set.js
var require_Set = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_Set.js"(exports2, module2) {
    var _includes = require_includes();
    var _Set = /* @__PURE__ */ function() {
      function _Set2() {
        this._nativeSet = typeof Set === "function" ? new Set() : null;
        this._items = {};
      }
      _Set2.prototype.add = function(item) {
        return !hasOrAdd(item, true, this);
      };
      _Set2.prototype.has = function(item) {
        return hasOrAdd(item, false, this);
      };
      return _Set2;
    }();
    function hasOrAdd(item, shouldAdd, set) {
      var type = typeof item;
      var prevSize, newSize;
      switch (type) {
        case "string":
        case "number":
          if (item === 0 && 1 / item === -Infinity) {
            if (set._items["-0"]) {
              return true;
            } else {
              if (shouldAdd) {
                set._items["-0"] = true;
              }
              return false;
            }
          }
          if (set._nativeSet !== null) {
            if (shouldAdd) {
              prevSize = set._nativeSet.size;
              set._nativeSet.add(item);
              newSize = set._nativeSet.size;
              return newSize === prevSize;
            } else {
              return set._nativeSet.has(item);
            }
          } else {
            if (!(type in set._items)) {
              if (shouldAdd) {
                set._items[type] = {};
                set._items[type][item] = true;
              }
              return false;
            } else if (item in set._items[type]) {
              return true;
            } else {
              if (shouldAdd) {
                set._items[type][item] = true;
              }
              return false;
            }
          }
        case "boolean":
          if (type in set._items) {
            var bIdx = item ? 1 : 0;
            if (set._items[type][bIdx]) {
              return true;
            } else {
              if (shouldAdd) {
                set._items[type][bIdx] = true;
              }
              return false;
            }
          } else {
            if (shouldAdd) {
              set._items[type] = item ? [false, true] : [true, false];
            }
            return false;
          }
        case "function":
          if (set._nativeSet !== null) {
            if (shouldAdd) {
              prevSize = set._nativeSet.size;
              set._nativeSet.add(item);
              newSize = set._nativeSet.size;
              return newSize === prevSize;
            } else {
              return set._nativeSet.has(item);
            }
          } else {
            if (!(type in set._items)) {
              if (shouldAdd) {
                set._items[type] = [item];
              }
              return false;
            }
            if (!_includes(item, set._items[type])) {
              if (shouldAdd) {
                set._items[type].push(item);
              }
              return false;
            }
            return true;
          }
        case "undefined":
          if (set._items[type]) {
            return true;
          } else {
            if (shouldAdd) {
              set._items[type] = true;
            }
            return false;
          }
        case "object":
          if (item === null) {
            if (!set._items["null"]) {
              if (shouldAdd) {
                set._items["null"] = true;
              }
              return false;
            }
            return true;
          }
        default:
          type = Object.prototype.toString.call(item);
          if (!(type in set._items)) {
            if (shouldAdd) {
              set._items[type] = [item];
            }
            return false;
          }
          if (!_includes(item, set._items[type])) {
            if (shouldAdd) {
              set._items[type].push(item);
            }
            return false;
          }
          return true;
      }
    }
    module2.exports = _Set;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/difference.js
var require_difference = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/difference.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _Set = require_Set();
    var difference = /* @__PURE__ */ _curry2(function difference2(first, second) {
      var out = [];
      var idx = 0;
      var firstLen = first.length;
      var secondLen = second.length;
      var toFilterOut = new _Set();
      for (var i2 = 0; i2 < secondLen; i2 += 1) {
        toFilterOut.add(second[i2]);
      }
      while (idx < firstLen) {
        if (toFilterOut.add(first[idx])) {
          out[out.length] = first[idx];
        }
        idx += 1;
      }
      return out;
    });
    module2.exports = difference;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/differenceWith.js
var require_differenceWith = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/differenceWith.js"(exports2, module2) {
    var _includesWith = require_includesWith();
    var _curry3 = require_curry3();
    var differenceWith = /* @__PURE__ */ _curry3(function differenceWith2(pred, first, second) {
      var out = [];
      var idx = 0;
      var firstLen = first.length;
      while (idx < firstLen) {
        if (!_includesWith(pred, first[idx], second) && !_includesWith(pred, first[idx], out)) {
          out.push(first[idx]);
        }
        idx += 1;
      }
      return out;
    });
    module2.exports = differenceWith;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/dissoc.js
var require_dissoc = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/dissoc.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var dissoc = /* @__PURE__ */ _curry2(function dissoc2(prop, obj) {
      var result = {};
      for (var p2 in obj) {
        result[p2] = obj[p2];
      }
      delete result[prop];
      return result;
    });
    module2.exports = dissoc;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/remove.js
var require_remove = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/remove.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var remove = /* @__PURE__ */ _curry3(function remove2(start, count, list) {
      var result = Array.prototype.slice.call(list, 0);
      result.splice(start, count);
      return result;
    });
    module2.exports = remove;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/update.js
var require_update = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/update.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var adjust = require_adjust();
    var always = require_always();
    var update = /* @__PURE__ */ _curry3(function update2(idx, x, list) {
      return adjust(idx, always(x), list);
    });
    module2.exports = update;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/dissocPath.js
var require_dissocPath = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/dissocPath.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _isInteger = require_isInteger();
    var _isArray = require_isArray();
    var assoc = require_assoc();
    var dissoc = require_dissoc();
    var remove = require_remove();
    var update = require_update();
    var dissocPath = /* @__PURE__ */ _curry2(function dissocPath2(path2, obj) {
      switch (path2.length) {
        case 0:
          return obj;
        case 1:
          return _isInteger(path2[0]) && _isArray(obj) ? remove(path2[0], 1, obj) : dissoc(path2[0], obj);
        default:
          var head = path2[0];
          var tail = Array.prototype.slice.call(path2, 1);
          if (obj[head] == null) {
            return obj;
          } else if (_isInteger(head) && _isArray(obj)) {
            return update(head, dissocPath2(tail, obj[head]), obj);
          } else {
            return assoc(head, dissocPath2(tail, obj[head]), obj);
          }
      }
    });
    module2.exports = dissocPath;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/divide.js
var require_divide = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/divide.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var divide = /* @__PURE__ */ _curry2(function divide2(a2, b) {
      return a2 / b;
    });
    module2.exports = divide;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xdrop.js
var require_xdrop = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xdrop.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _xfBase = require_xfBase();
    var XDrop = /* @__PURE__ */ function() {
      function XDrop2(n2, xf) {
        this.xf = xf;
        this.n = n2;
      }
      XDrop2.prototype["@@transducer/init"] = _xfBase.init;
      XDrop2.prototype["@@transducer/result"] = _xfBase.result;
      XDrop2.prototype["@@transducer/step"] = function(result, input) {
        if (this.n > 0) {
          this.n -= 1;
          return result;
        }
        return this.xf["@@transducer/step"](result, input);
      };
      return XDrop2;
    }();
    var _xdrop = /* @__PURE__ */ _curry2(function _xdrop2(n2, xf) {
      return new XDrop(n2, xf);
    });
    module2.exports = _xdrop;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/drop.js
var require_drop = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/drop.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xdrop = require_xdrop();
    var slice = require_slice();
    var drop = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable(["drop"], _xdrop, function drop2(n2, xs) {
      return slice(Math.max(0, n2), Infinity, xs);
    }));
    module2.exports = drop;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xtake.js
var require_xtake = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xtake.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _reduced = require_reduced();
    var _xfBase = require_xfBase();
    var XTake = /* @__PURE__ */ function() {
      function XTake2(n2, xf) {
        this.xf = xf;
        this.n = n2;
        this.i = 0;
      }
      XTake2.prototype["@@transducer/init"] = _xfBase.init;
      XTake2.prototype["@@transducer/result"] = _xfBase.result;
      XTake2.prototype["@@transducer/step"] = function(result, input) {
        this.i += 1;
        var ret = this.n === 0 ? result : this.xf["@@transducer/step"](result, input);
        return this.n >= 0 && this.i >= this.n ? _reduced(ret) : ret;
      };
      return XTake2;
    }();
    var _xtake = /* @__PURE__ */ _curry2(function _xtake2(n2, xf) {
      return new XTake(n2, xf);
    });
    module2.exports = _xtake;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/take.js
var require_take = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/take.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xtake = require_xtake();
    var slice = require_slice();
    var take = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable(["take"], _xtake, function take2(n2, xs) {
      return slice(0, n2 < 0 ? Infinity : n2, xs);
    }));
    module2.exports = take;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_dropLast.js
var require_dropLast = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_dropLast.js"(exports2, module2) {
    var take = require_take();
    function dropLast(n2, xs) {
      return take(n2 < xs.length ? xs.length - n2 : 0, xs);
    }
    module2.exports = dropLast;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xdropLast.js
var require_xdropLast = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xdropLast.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _xfBase = require_xfBase();
    var XDropLast = /* @__PURE__ */ function() {
      function XDropLast2(n2, xf) {
        this.xf = xf;
        this.pos = 0;
        this.full = false;
        this.acc = new Array(n2);
      }
      XDropLast2.prototype["@@transducer/init"] = _xfBase.init;
      XDropLast2.prototype["@@transducer/result"] = function(result) {
        this.acc = null;
        return this.xf["@@transducer/result"](result);
      };
      XDropLast2.prototype["@@transducer/step"] = function(result, input) {
        if (this.full) {
          result = this.xf["@@transducer/step"](result, this.acc[this.pos]);
        }
        this.store(input);
        return result;
      };
      XDropLast2.prototype.store = function(input) {
        this.acc[this.pos] = input;
        this.pos += 1;
        if (this.pos === this.acc.length) {
          this.pos = 0;
          this.full = true;
        }
      };
      return XDropLast2;
    }();
    var _xdropLast = /* @__PURE__ */ _curry2(function _xdropLast2(n2, xf) {
      return new XDropLast(n2, xf);
    });
    module2.exports = _xdropLast;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/dropLast.js
var require_dropLast2 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/dropLast.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _dropLast = require_dropLast();
    var _xdropLast = require_xdropLast();
    var dropLast = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable([], _xdropLast, _dropLast));
    module2.exports = dropLast;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_dropLastWhile.js
var require_dropLastWhile = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_dropLastWhile.js"(exports2, module2) {
    var slice = require_slice();
    function dropLastWhile(pred, xs) {
      var idx = xs.length - 1;
      while (idx >= 0 && pred(xs[idx])) {
        idx -= 1;
      }
      return slice(0, idx + 1, xs);
    }
    module2.exports = dropLastWhile;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xdropLastWhile.js
var require_xdropLastWhile = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xdropLastWhile.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _reduce = require_reduce();
    var _xfBase = require_xfBase();
    var XDropLastWhile = /* @__PURE__ */ function() {
      function XDropLastWhile2(fn, xf) {
        this.f = fn;
        this.retained = [];
        this.xf = xf;
      }
      XDropLastWhile2.prototype["@@transducer/init"] = _xfBase.init;
      XDropLastWhile2.prototype["@@transducer/result"] = function(result) {
        this.retained = null;
        return this.xf["@@transducer/result"](result);
      };
      XDropLastWhile2.prototype["@@transducer/step"] = function(result, input) {
        return this.f(input) ? this.retain(result, input) : this.flush(result, input);
      };
      XDropLastWhile2.prototype.flush = function(result, input) {
        result = _reduce(this.xf["@@transducer/step"], result, this.retained);
        this.retained = [];
        return this.xf["@@transducer/step"](result, input);
      };
      XDropLastWhile2.prototype.retain = function(result, input) {
        this.retained.push(input);
        return result;
      };
      return XDropLastWhile2;
    }();
    var _xdropLastWhile = /* @__PURE__ */ _curry2(function _xdropLastWhile2(fn, xf) {
      return new XDropLastWhile(fn, xf);
    });
    module2.exports = _xdropLastWhile;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/dropLastWhile.js
var require_dropLastWhile2 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/dropLastWhile.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _dropLastWhile = require_dropLastWhile();
    var _xdropLastWhile = require_xdropLastWhile();
    var dropLastWhile = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable([], _xdropLastWhile, _dropLastWhile));
    module2.exports = dropLastWhile;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xdropRepeatsWith.js
var require_xdropRepeatsWith = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xdropRepeatsWith.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _xfBase = require_xfBase();
    var XDropRepeatsWith = /* @__PURE__ */ function() {
      function XDropRepeatsWith2(pred, xf) {
        this.xf = xf;
        this.pred = pred;
        this.lastValue = void 0;
        this.seenFirstValue = false;
      }
      XDropRepeatsWith2.prototype["@@transducer/init"] = _xfBase.init;
      XDropRepeatsWith2.prototype["@@transducer/result"] = _xfBase.result;
      XDropRepeatsWith2.prototype["@@transducer/step"] = function(result, input) {
        var sameAsLast = false;
        if (!this.seenFirstValue) {
          this.seenFirstValue = true;
        } else if (this.pred(this.lastValue, input)) {
          sameAsLast = true;
        }
        this.lastValue = input;
        return sameAsLast ? result : this.xf["@@transducer/step"](result, input);
      };
      return XDropRepeatsWith2;
    }();
    var _xdropRepeatsWith = /* @__PURE__ */ _curry2(function _xdropRepeatsWith2(pred, xf) {
      return new XDropRepeatsWith(pred, xf);
    });
    module2.exports = _xdropRepeatsWith;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/last.js
var require_last = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/last.js"(exports2, module2) {
    var nth = require_nth();
    var last = /* @__PURE__ */ nth(-1);
    module2.exports = last;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/dropRepeatsWith.js
var require_dropRepeatsWith = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/dropRepeatsWith.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xdropRepeatsWith = require_xdropRepeatsWith();
    var last = require_last();
    var dropRepeatsWith = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable([], _xdropRepeatsWith, function dropRepeatsWith2(pred, list) {
      var result = [];
      var idx = 1;
      var len = list.length;
      if (len !== 0) {
        result[0] = list[0];
        while (idx < len) {
          if (!pred(last(result), list[idx])) {
            result[result.length] = list[idx];
          }
          idx += 1;
        }
      }
      return result;
    }));
    module2.exports = dropRepeatsWith;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/dropRepeats.js
var require_dropRepeats = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/dropRepeats.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var _dispatchable = require_dispatchable();
    var _xdropRepeatsWith = require_xdropRepeatsWith();
    var dropRepeatsWith = require_dropRepeatsWith();
    var equals = require_equals2();
    var dropRepeats = /* @__PURE__ */ _curry1(/* @__PURE__ */ _dispatchable([], /* @__PURE__ */ _xdropRepeatsWith(equals), /* @__PURE__ */ dropRepeatsWith(equals)));
    module2.exports = dropRepeats;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xdropWhile.js
var require_xdropWhile = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xdropWhile.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _xfBase = require_xfBase();
    var XDropWhile = /* @__PURE__ */ function() {
      function XDropWhile2(f, xf) {
        this.xf = xf;
        this.f = f;
      }
      XDropWhile2.prototype["@@transducer/init"] = _xfBase.init;
      XDropWhile2.prototype["@@transducer/result"] = _xfBase.result;
      XDropWhile2.prototype["@@transducer/step"] = function(result, input) {
        if (this.f) {
          if (this.f(input)) {
            return result;
          }
          this.f = null;
        }
        return this.xf["@@transducer/step"](result, input);
      };
      return XDropWhile2;
    }();
    var _xdropWhile = /* @__PURE__ */ _curry2(function _xdropWhile2(f, xf) {
      return new XDropWhile(f, xf);
    });
    module2.exports = _xdropWhile;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/dropWhile.js
var require_dropWhile = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/dropWhile.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xdropWhile = require_xdropWhile();
    var slice = require_slice();
    var dropWhile = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable(["dropWhile"], _xdropWhile, function dropWhile2(pred, xs) {
      var idx = 0;
      var len = xs.length;
      while (idx < len && pred(xs[idx])) {
        idx += 1;
      }
      return slice(idx, Infinity, xs);
    }));
    module2.exports = dropWhile;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/or.js
var require_or = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/or.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var or = /* @__PURE__ */ _curry2(function or2(a2, b) {
      return a2 || b;
    });
    module2.exports = or;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/either.js
var require_either = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/either.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _isFunction = require_isFunction();
    var lift = require_lift();
    var or = require_or();
    var either = /* @__PURE__ */ _curry2(function either2(f, g) {
      return _isFunction(f) ? function _either() {
        return f.apply(this, arguments) || g.apply(this, arguments);
      } : lift(or)(f, g);
    });
    module2.exports = either;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/empty.js
var require_empty = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/empty.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var _isArguments = require_isArguments();
    var _isArray = require_isArray();
    var _isObject = require_isObject();
    var _isString = require_isString();
    var empty = /* @__PURE__ */ _curry1(function empty2(x) {
      return x != null && typeof x["fantasy-land/empty"] === "function" ? x["fantasy-land/empty"]() : x != null && x.constructor != null && typeof x.constructor["fantasy-land/empty"] === "function" ? x.constructor["fantasy-land/empty"]() : x != null && typeof x.empty === "function" ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === "function" ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? "" : _isObject(x) ? {} : _isArguments(x) ? function() {
        return arguments;
      }() : void 0;
    });
    module2.exports = empty;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/takeLast.js
var require_takeLast = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/takeLast.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var drop = require_drop();
    var takeLast = /* @__PURE__ */ _curry2(function takeLast2(n2, xs) {
      return drop(n2 >= 0 ? xs.length - n2 : 0, xs);
    });
    module2.exports = takeLast;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/endsWith.js
var require_endsWith = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/endsWith.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var equals = require_equals2();
    var takeLast = require_takeLast();
    var endsWith = /* @__PURE__ */ _curry2(function(suffix, list) {
      return equals(takeLast(suffix.length, list), suffix);
    });
    module2.exports = endsWith;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/eqBy.js
var require_eqBy = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/eqBy.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var equals = require_equals2();
    var eqBy = /* @__PURE__ */ _curry3(function eqBy2(f, x, y2) {
      return equals(f(x), f(y2));
    });
    module2.exports = eqBy;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/eqProps.js
var require_eqProps = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/eqProps.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var equals = require_equals2();
    var eqProps = /* @__PURE__ */ _curry3(function eqProps2(prop, obj1, obj2) {
      return equals(obj1[prop], obj2[prop]);
    });
    module2.exports = eqProps;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/evolve.js
var require_evolve = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/evolve.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var evolve = /* @__PURE__ */ _curry2(function evolve2(transformations, object) {
      var result = object instanceof Array ? [] : {};
      var transformation, key, type;
      for (key in object) {
        transformation = transformations[key];
        type = typeof transformation;
        result[key] = type === "function" ? transformation(object[key]) : transformation && type === "object" ? evolve2(transformation, object[key]) : object[key];
      }
      return result;
    });
    module2.exports = evolve;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xfind.js
var require_xfind = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xfind.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _reduced = require_reduced();
    var _xfBase = require_xfBase();
    var XFind = /* @__PURE__ */ function() {
      function XFind2(f, xf) {
        this.xf = xf;
        this.f = f;
        this.found = false;
      }
      XFind2.prototype["@@transducer/init"] = _xfBase.init;
      XFind2.prototype["@@transducer/result"] = function(result) {
        if (!this.found) {
          result = this.xf["@@transducer/step"](result, void 0);
        }
        return this.xf["@@transducer/result"](result);
      };
      XFind2.prototype["@@transducer/step"] = function(result, input) {
        if (this.f(input)) {
          this.found = true;
          result = _reduced(this.xf["@@transducer/step"](result, input));
        }
        return result;
      };
      return XFind2;
    }();
    var _xfind = /* @__PURE__ */ _curry2(function _xfind2(f, xf) {
      return new XFind(f, xf);
    });
    module2.exports = _xfind;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/find.js
var require_find = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/find.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xfind = require_xfind();
    var find2 = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable(["find"], _xfind, function find3(fn, list) {
      var idx = 0;
      var len = list.length;
      while (idx < len) {
        if (fn(list[idx])) {
          return list[idx];
        }
        idx += 1;
      }
    }));
    module2.exports = find2;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xfindIndex.js
var require_xfindIndex = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xfindIndex.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _reduced = require_reduced();
    var _xfBase = require_xfBase();
    var XFindIndex = /* @__PURE__ */ function() {
      function XFindIndex2(f, xf) {
        this.xf = xf;
        this.f = f;
        this.idx = -1;
        this.found = false;
      }
      XFindIndex2.prototype["@@transducer/init"] = _xfBase.init;
      XFindIndex2.prototype["@@transducer/result"] = function(result) {
        if (!this.found) {
          result = this.xf["@@transducer/step"](result, -1);
        }
        return this.xf["@@transducer/result"](result);
      };
      XFindIndex2.prototype["@@transducer/step"] = function(result, input) {
        this.idx += 1;
        if (this.f(input)) {
          this.found = true;
          result = _reduced(this.xf["@@transducer/step"](result, this.idx));
        }
        return result;
      };
      return XFindIndex2;
    }();
    var _xfindIndex = /* @__PURE__ */ _curry2(function _xfindIndex2(f, xf) {
      return new XFindIndex(f, xf);
    });
    module2.exports = _xfindIndex;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/findIndex.js
var require_findIndex = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/findIndex.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xfindIndex = require_xfindIndex();
    var findIndex = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable([], _xfindIndex, function findIndex2(fn, list) {
      var idx = 0;
      var len = list.length;
      while (idx < len) {
        if (fn(list[idx])) {
          return idx;
        }
        idx += 1;
      }
      return -1;
    }));
    module2.exports = findIndex;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xfindLast.js
var require_xfindLast = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xfindLast.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _xfBase = require_xfBase();
    var XFindLast = /* @__PURE__ */ function() {
      function XFindLast2(f, xf) {
        this.xf = xf;
        this.f = f;
      }
      XFindLast2.prototype["@@transducer/init"] = _xfBase.init;
      XFindLast2.prototype["@@transducer/result"] = function(result) {
        return this.xf["@@transducer/result"](this.xf["@@transducer/step"](result, this.last));
      };
      XFindLast2.prototype["@@transducer/step"] = function(result, input) {
        if (this.f(input)) {
          this.last = input;
        }
        return result;
      };
      return XFindLast2;
    }();
    var _xfindLast = /* @__PURE__ */ _curry2(function _xfindLast2(f, xf) {
      return new XFindLast(f, xf);
    });
    module2.exports = _xfindLast;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/findLast.js
var require_findLast = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/findLast.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xfindLast = require_xfindLast();
    var findLast = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable([], _xfindLast, function findLast2(fn, list) {
      var idx = list.length - 1;
      while (idx >= 0) {
        if (fn(list[idx])) {
          return list[idx];
        }
        idx -= 1;
      }
    }));
    module2.exports = findLast;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xfindLastIndex.js
var require_xfindLastIndex = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xfindLastIndex.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _xfBase = require_xfBase();
    var XFindLastIndex = /* @__PURE__ */ function() {
      function XFindLastIndex2(f, xf) {
        this.xf = xf;
        this.f = f;
        this.idx = -1;
        this.lastIdx = -1;
      }
      XFindLastIndex2.prototype["@@transducer/init"] = _xfBase.init;
      XFindLastIndex2.prototype["@@transducer/result"] = function(result) {
        return this.xf["@@transducer/result"](this.xf["@@transducer/step"](result, this.lastIdx));
      };
      XFindLastIndex2.prototype["@@transducer/step"] = function(result, input) {
        this.idx += 1;
        if (this.f(input)) {
          this.lastIdx = this.idx;
        }
        return result;
      };
      return XFindLastIndex2;
    }();
    var _xfindLastIndex = /* @__PURE__ */ _curry2(function _xfindLastIndex2(f, xf) {
      return new XFindLastIndex(f, xf);
    });
    module2.exports = _xfindLastIndex;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/findLastIndex.js
var require_findLastIndex = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/findLastIndex.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xfindLastIndex = require_xfindLastIndex();
    var findLastIndex = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable([], _xfindLastIndex, function findLastIndex2(fn, list) {
      var idx = list.length - 1;
      while (idx >= 0) {
        if (fn(list[idx])) {
          return idx;
        }
        idx -= 1;
      }
      return -1;
    }));
    module2.exports = findLastIndex;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/flatten.js
var require_flatten = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/flatten.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var _makeFlat = require_makeFlat();
    var flatten = /* @__PURE__ */ _curry1(/* @__PURE__ */ _makeFlat(true));
    module2.exports = flatten;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/flip.js
var require_flip = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/flip.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var curryN = require_curryN2();
    var flip = /* @__PURE__ */ _curry1(function flip2(fn) {
      return curryN(fn.length, function(a2, b) {
        var args = Array.prototype.slice.call(arguments, 0);
        args[0] = b;
        args[1] = a2;
        return fn.apply(this, args);
      });
    });
    module2.exports = flip;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/forEach.js
var require_forEach = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/forEach.js"(exports2, module2) {
    var _checkForMethod = require_checkForMethod();
    var _curry2 = require_curry2();
    var forEach = /* @__PURE__ */ _curry2(/* @__PURE__ */ _checkForMethod("forEach", function forEach2(fn, list) {
      var len = list.length;
      var idx = 0;
      while (idx < len) {
        fn(list[idx]);
        idx += 1;
      }
      return list;
    }));
    module2.exports = forEach;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/forEachObjIndexed.js
var require_forEachObjIndexed = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/forEachObjIndexed.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var keys = require_keys();
    var forEachObjIndexed = /* @__PURE__ */ _curry2(function forEachObjIndexed2(fn, obj) {
      var keyList = keys(obj);
      var idx = 0;
      while (idx < keyList.length) {
        var key = keyList[idx];
        fn(obj[key], key, obj);
        idx += 1;
      }
      return obj;
    });
    module2.exports = forEachObjIndexed;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/fromPairs.js
var require_fromPairs = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/fromPairs.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var fromPairs = /* @__PURE__ */ _curry1(function fromPairs2(pairs) {
      var result = {};
      var idx = 0;
      while (idx < pairs.length) {
        result[pairs[idx][0]] = pairs[idx][1];
        idx += 1;
      }
      return result;
    });
    module2.exports = fromPairs;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/groupBy.js
var require_groupBy = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/groupBy.js"(exports2, module2) {
    var _checkForMethod = require_checkForMethod();
    var _curry2 = require_curry2();
    var reduceBy = require_reduceBy();
    var groupBy = /* @__PURE__ */ _curry2(/* @__PURE__ */ _checkForMethod("groupBy", /* @__PURE__ */ reduceBy(function(acc, item) {
      if (acc == null) {
        acc = [];
      }
      acc.push(item);
      return acc;
    }, null)));
    module2.exports = groupBy;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/groupWith.js
var require_groupWith = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/groupWith.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var groupWith = /* @__PURE__ */ _curry2(function(fn, list) {
      var res = [];
      var idx = 0;
      var len = list.length;
      while (idx < len) {
        var nextidx = idx + 1;
        while (nextidx < len && fn(list[nextidx - 1], list[nextidx])) {
          nextidx += 1;
        }
        res.push(list.slice(idx, nextidx));
        idx = nextidx;
      }
      return res;
    });
    module2.exports = groupWith;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/gt.js
var require_gt = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/gt.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var gt2 = /* @__PURE__ */ _curry2(function gt3(a2, b) {
      return a2 > b;
    });
    module2.exports = gt2;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/gte.js
var require_gte = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/gte.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var gte = /* @__PURE__ */ _curry2(function gte2(a2, b) {
      return a2 >= b;
    });
    module2.exports = gte;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/hasPath.js
var require_hasPath = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/hasPath.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _has = require_has();
    var isNil3 = require_isNil();
    var hasPath = /* @__PURE__ */ _curry2(function hasPath2(_path, obj) {
      if (_path.length === 0 || isNil3(obj)) {
        return false;
      }
      var val = obj;
      var idx = 0;
      while (idx < _path.length) {
        if (!isNil3(val) && _has(_path[idx], val)) {
          val = val[_path[idx]];
          idx += 1;
        } else {
          return false;
        }
      }
      return true;
    });
    module2.exports = hasPath;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/has.js
var require_has2 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/has.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var hasPath = require_hasPath();
    var has = /* @__PURE__ */ _curry2(function has2(prop, obj) {
      return hasPath([prop], obj);
    });
    module2.exports = has;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/hasIn.js
var require_hasIn = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/hasIn.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var hasIn = /* @__PURE__ */ _curry2(function hasIn2(prop, obj) {
      return prop in obj;
    });
    module2.exports = hasIn;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/identical.js
var require_identical = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/identical.js"(exports2, module2) {
    var _objectIs = require_objectIs();
    var _curry2 = require_curry2();
    var identical = /* @__PURE__ */ _curry2(_objectIs);
    module2.exports = identical;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/ifElse.js
var require_ifElse = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/ifElse.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var curryN = require_curryN2();
    var ifElse = /* @__PURE__ */ _curry3(function ifElse2(condition, onTrue, onFalse) {
      return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {
        return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);
      });
    });
    module2.exports = ifElse;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/inc.js
var require_inc = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/inc.js"(exports2, module2) {
    var add = require_add();
    var inc = /* @__PURE__ */ add(1);
    module2.exports = inc;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/includes.js
var require_includes2 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/includes.js"(exports2, module2) {
    var _includes = require_includes();
    var _curry2 = require_curry2();
    var includes2 = /* @__PURE__ */ _curry2(_includes);
    module2.exports = includes2;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/indexBy.js
var require_indexBy = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/indexBy.js"(exports2, module2) {
    var reduceBy = require_reduceBy();
    var indexBy = /* @__PURE__ */ reduceBy(function(acc, elem) {
      return elem;
    }, null);
    module2.exports = indexBy;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/indexOf.js
var require_indexOf2 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/indexOf.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _indexOf = require_indexOf();
    var _isArray = require_isArray();
    var indexOf = /* @__PURE__ */ _curry2(function indexOf2(target, xs) {
      return typeof xs.indexOf === "function" && !_isArray(xs) ? xs.indexOf(target) : _indexOf(xs, target, 0);
    });
    module2.exports = indexOf;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/init.js
var require_init = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/init.js"(exports2, module2) {
    var slice = require_slice();
    var init = /* @__PURE__ */ slice(0, -1);
    module2.exports = init;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/innerJoin.js
var require_innerJoin = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/innerJoin.js"(exports2, module2) {
    var _includesWith = require_includesWith();
    var _curry3 = require_curry3();
    var _filter = require_filter();
    var innerJoin = /* @__PURE__ */ _curry3(function innerJoin2(pred, xs, ys) {
      return _filter(function(x) {
        return _includesWith(pred, x, ys);
      }, xs);
    });
    module2.exports = innerJoin;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/insert.js
var require_insert = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/insert.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var insert = /* @__PURE__ */ _curry3(function insert2(idx, elt, list) {
      idx = idx < list.length && idx >= 0 ? idx : list.length;
      var result = Array.prototype.slice.call(list, 0);
      result.splice(idx, 0, elt);
      return result;
    });
    module2.exports = insert;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/insertAll.js
var require_insertAll = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/insertAll.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var insertAll = /* @__PURE__ */ _curry3(function insertAll2(idx, elts, list) {
      idx = idx < list.length && idx >= 0 ? idx : list.length;
      return [].concat(Array.prototype.slice.call(list, 0, idx), elts, Array.prototype.slice.call(list, idx));
    });
    module2.exports = insertAll;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/uniqBy.js
var require_uniqBy = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/uniqBy.js"(exports2, module2) {
    var _Set = require_Set();
    var _curry2 = require_curry2();
    var uniqBy = /* @__PURE__ */ _curry2(function uniqBy2(fn, list) {
      var set = new _Set();
      var result = [];
      var idx = 0;
      var appliedItem, item;
      while (idx < list.length) {
        item = list[idx];
        appliedItem = fn(item);
        if (set.add(appliedItem)) {
          result.push(item);
        }
        idx += 1;
      }
      return result;
    });
    module2.exports = uniqBy;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/uniq.js
var require_uniq = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/uniq.js"(exports2, module2) {
    var identity2 = require_identity2();
    var uniqBy = require_uniqBy();
    var uniq = /* @__PURE__ */ uniqBy(identity2);
    module2.exports = uniq;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/intersection.js
var require_intersection = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/intersection.js"(exports2, module2) {
    var _includes = require_includes();
    var _curry2 = require_curry2();
    var _filter = require_filter();
    var flip = require_flip();
    var uniq = require_uniq();
    var intersection = /* @__PURE__ */ _curry2(function intersection2(list1, list2) {
      var lookupList, filteredList;
      if (list1.length > list2.length) {
        lookupList = list1;
        filteredList = list2;
      } else {
        lookupList = list2;
        filteredList = list1;
      }
      return uniq(_filter(flip(_includes)(lookupList), filteredList));
    });
    module2.exports = intersection;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/intersperse.js
var require_intersperse = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/intersperse.js"(exports2, module2) {
    var _checkForMethod = require_checkForMethod();
    var _curry2 = require_curry2();
    var intersperse = /* @__PURE__ */ _curry2(/* @__PURE__ */ _checkForMethod("intersperse", function intersperse2(separator, list) {
      var out = [];
      var idx = 0;
      var length = list.length;
      while (idx < length) {
        if (idx === length - 1) {
          out.push(list[idx]);
        } else {
          out.push(list[idx], separator);
        }
        idx += 1;
      }
      return out;
    }));
    module2.exports = intersperse;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_objectAssign.js
var require_objectAssign = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_objectAssign.js"(exports2, module2) {
    var _has = require_has();
    function _objectAssign(target) {
      if (target == null) {
        throw new TypeError("Cannot convert undefined or null to object");
      }
      var output = Object(target);
      var idx = 1;
      var length = arguments.length;
      while (idx < length) {
        var source = arguments[idx];
        if (source != null) {
          for (var nextKey in source) {
            if (_has(nextKey, source)) {
              output[nextKey] = source[nextKey];
            }
          }
        }
        idx += 1;
      }
      return output;
    }
    module2.exports = typeof Object.assign === "function" ? Object.assign : _objectAssign;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/objOf.js
var require_objOf = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/objOf.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var objOf = /* @__PURE__ */ _curry2(function objOf2(key, val) {
      var obj = {};
      obj[key] = val;
      return obj;
    });
    module2.exports = objOf;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_stepCat.js
var require_stepCat = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_stepCat.js"(exports2, module2) {
    var _objectAssign = require_objectAssign();
    var _identity = require_identity();
    var _isArrayLike = require_isArrayLike();
    var _isTransformer = require_isTransformer();
    var objOf = require_objOf();
    var _stepCatArray = {
      "@@transducer/init": Array,
      "@@transducer/step": function(xs, x) {
        xs.push(x);
        return xs;
      },
      "@@transducer/result": _identity
    };
    var _stepCatString = {
      "@@transducer/init": String,
      "@@transducer/step": function(a2, b) {
        return a2 + b;
      },
      "@@transducer/result": _identity
    };
    var _stepCatObject = {
      "@@transducer/init": Object,
      "@@transducer/step": function(result, input) {
        return _objectAssign(result, _isArrayLike(input) ? objOf(input[0], input[1]) : input);
      },
      "@@transducer/result": _identity
    };
    function _stepCat(obj) {
      if (_isTransformer(obj)) {
        return obj;
      }
      if (_isArrayLike(obj)) {
        return _stepCatArray;
      }
      if (typeof obj === "string") {
        return _stepCatString;
      }
      if (typeof obj === "object") {
        return _stepCatObject;
      }
      throw new Error("Cannot create transformer for " + obj);
    }
    module2.exports = _stepCat;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/into.js
var require_into = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/into.js"(exports2, module2) {
    var _clone = require_clone();
    var _curry3 = require_curry3();
    var _isTransformer = require_isTransformer();
    var _reduce = require_reduce();
    var _stepCat = require_stepCat();
    var into = /* @__PURE__ */ _curry3(function into2(acc, xf, list) {
      return _isTransformer(acc) ? _reduce(xf(acc), acc["@@transducer/init"](), list) : _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);
    });
    module2.exports = into;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/invert.js
var require_invert = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/invert.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var _has = require_has();
    var keys = require_keys();
    var invert = /* @__PURE__ */ _curry1(function invert2(obj) {
      var props = keys(obj);
      var len = props.length;
      var idx = 0;
      var out = {};
      while (idx < len) {
        var key = props[idx];
        var val = obj[key];
        var list = _has(val, out) ? out[val] : out[val] = [];
        list[list.length] = key;
        idx += 1;
      }
      return out;
    });
    module2.exports = invert;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/invertObj.js
var require_invertObj = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/invertObj.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var keys = require_keys();
    var invertObj = /* @__PURE__ */ _curry1(function invertObj2(obj) {
      var props = keys(obj);
      var len = props.length;
      var idx = 0;
      var out = {};
      while (idx < len) {
        var key = props[idx];
        out[obj[key]] = key;
        idx += 1;
      }
      return out;
    });
    module2.exports = invertObj;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/invoker.js
var require_invoker = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/invoker.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _isFunction = require_isFunction();
    var curryN = require_curryN2();
    var toString = require_toString2();
    var invoker = /* @__PURE__ */ _curry2(function invoker2(arity, method) {
      return curryN(arity + 1, function() {
        var target = arguments[arity];
        if (target != null && _isFunction(target[method])) {
          return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));
        }
        throw new TypeError(toString(target) + ' does not have a method named "' + method + '"');
      });
    });
    module2.exports = invoker;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/is.js
var require_is = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/is.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var is2 = /* @__PURE__ */ _curry2(function is3(Ctor, val) {
      return val != null && val.constructor === Ctor || val instanceof Ctor;
    });
    module2.exports = is2;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/isEmpty.js
var require_isEmpty = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/isEmpty.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var empty = require_empty();
    var equals = require_equals2();
    var isEmpty = /* @__PURE__ */ _curry1(function isEmpty2(x) {
      return x != null && equals(x, empty(x));
    });
    module2.exports = isEmpty;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/join.js
var require_join = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/join.js"(exports2, module2) {
    var invoker = require_invoker();
    var join = /* @__PURE__ */ invoker(1, "join");
    module2.exports = join;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/juxt.js
var require_juxt = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/juxt.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var converge = require_converge();
    var juxt = /* @__PURE__ */ _curry1(function juxt2(fns) {
      return converge(function() {
        return Array.prototype.slice.call(arguments, 0);
      }, fns);
    });
    module2.exports = juxt;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/keysIn.js
var require_keysIn = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/keysIn.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var keysIn = /* @__PURE__ */ _curry1(function keysIn2(obj) {
      var prop;
      var ks = [];
      for (prop in obj) {
        ks[ks.length] = prop;
      }
      return ks;
    });
    module2.exports = keysIn;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/lastIndexOf.js
var require_lastIndexOf = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/lastIndexOf.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _isArray = require_isArray();
    var equals = require_equals2();
    var lastIndexOf = /* @__PURE__ */ _curry2(function lastIndexOf2(target, xs) {
      if (typeof xs.lastIndexOf === "function" && !_isArray(xs)) {
        return xs.lastIndexOf(target);
      } else {
        var idx = xs.length - 1;
        while (idx >= 0) {
          if (equals(xs[idx], target)) {
            return idx;
          }
          idx -= 1;
        }
        return -1;
      }
    });
    module2.exports = lastIndexOf;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_isNumber.js
var require_isNumber = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_isNumber.js"(exports2, module2) {
    function _isNumber(x) {
      return Object.prototype.toString.call(x) === "[object Number]";
    }
    module2.exports = _isNumber;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/length.js
var require_length = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/length.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var _isNumber = require_isNumber();
    var length = /* @__PURE__ */ _curry1(function length2(list) {
      return list != null && _isNumber(list.length) ? list.length : NaN;
    });
    module2.exports = length;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/lens.js
var require_lens = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/lens.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var map2 = require_map2();
    var lens = /* @__PURE__ */ _curry2(function lens2(getter, setter) {
      return function(toFunctorFn) {
        return function(target) {
          return map2(function(focus) {
            return setter(focus, target);
          }, toFunctorFn(getter(target)));
        };
      };
    });
    module2.exports = lens;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/lensIndex.js
var require_lensIndex = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/lensIndex.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var lens = require_lens();
    var nth = require_nth();
    var update = require_update();
    var lensIndex = /* @__PURE__ */ _curry1(function lensIndex2(n2) {
      return lens(nth(n2), update(n2));
    });
    module2.exports = lensIndex;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/lensPath.js
var require_lensPath = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/lensPath.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var assocPath = require_assocPath();
    var lens = require_lens();
    var path2 = require_path();
    var lensPath = /* @__PURE__ */ _curry1(function lensPath2(p2) {
      return lens(path2(p2), assocPath(p2));
    });
    module2.exports = lensPath;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/lensProp.js
var require_lensProp = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/lensProp.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var assoc = require_assoc();
    var lens = require_lens();
    var prop = require_prop();
    var lensProp = /* @__PURE__ */ _curry1(function lensProp2(k) {
      return lens(prop(k), assoc(k));
    });
    module2.exports = lensProp;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/lt.js
var require_lt = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/lt.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var lt2 = /* @__PURE__ */ _curry2(function lt3(a2, b) {
      return a2 < b;
    });
    module2.exports = lt2;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/lte.js
var require_lte = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/lte.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var lte = /* @__PURE__ */ _curry2(function lte2(a2, b) {
      return a2 <= b;
    });
    module2.exports = lte;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mapAccum.js
var require_mapAccum = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mapAccum.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var mapAccum = /* @__PURE__ */ _curry3(function mapAccum2(fn, acc, list) {
      var idx = 0;
      var len = list.length;
      var result = [];
      var tuple = [acc];
      while (idx < len) {
        tuple = fn(tuple[0], list[idx]);
        result[idx] = tuple[1];
        idx += 1;
      }
      return [tuple[0], result];
    });
    module2.exports = mapAccum;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mapAccumRight.js
var require_mapAccumRight = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mapAccumRight.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var mapAccumRight = /* @__PURE__ */ _curry3(function mapAccumRight2(fn, acc, list) {
      var idx = list.length - 1;
      var result = [];
      var tuple = [acc];
      while (idx >= 0) {
        tuple = fn(tuple[0], list[idx]);
        result[idx] = tuple[1];
        idx -= 1;
      }
      return [tuple[0], result];
    });
    module2.exports = mapAccumRight;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mapObjIndexed.js
var require_mapObjIndexed = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mapObjIndexed.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _reduce = require_reduce();
    var keys = require_keys();
    var mapObjIndexed2 = /* @__PURE__ */ _curry2(function mapObjIndexed3(fn, obj) {
      return _reduce(function(acc, key) {
        acc[key] = fn(obj[key], key, obj);
        return acc;
      }, {}, keys(obj));
    });
    module2.exports = mapObjIndexed2;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/match.js
var require_match = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/match.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var match = /* @__PURE__ */ _curry2(function match2(rx, str) {
      return str.match(rx) || [];
    });
    module2.exports = match;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mathMod.js
var require_mathMod = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mathMod.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _isInteger = require_isInteger();
    var mathMod = /* @__PURE__ */ _curry2(function mathMod2(m2, p2) {
      if (!_isInteger(m2)) {
        return NaN;
      }
      if (!_isInteger(p2) || p2 < 1) {
        return NaN;
      }
      return (m2 % p2 + p2) % p2;
    });
    module2.exports = mathMod;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/maxBy.js
var require_maxBy = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/maxBy.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var maxBy = /* @__PURE__ */ _curry3(function maxBy2(f, a2, b) {
      return f(b) > f(a2) ? b : a2;
    });
    module2.exports = maxBy;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/sum.js
var require_sum = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/sum.js"(exports2, module2) {
    var add = require_add();
    var reduce = require_reduce2();
    var sum = /* @__PURE__ */ reduce(add, 0);
    module2.exports = sum;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mean.js
var require_mean = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mean.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var sum = require_sum();
    var mean = /* @__PURE__ */ _curry1(function mean2(list) {
      return sum(list) / list.length;
    });
    module2.exports = mean;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/median.js
var require_median = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/median.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var mean = require_mean();
    var median = /* @__PURE__ */ _curry1(function median2(list) {
      var len = list.length;
      if (len === 0) {
        return NaN;
      }
      var width = 2 - len % 2;
      var idx = (len - width) / 2;
      return mean(Array.prototype.slice.call(list, 0).sort(function(a2, b) {
        return a2 < b ? -1 : a2 > b ? 1 : 0;
      }).slice(idx, idx + width));
    });
    module2.exports = median;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/memoizeWith.js
var require_memoizeWith = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/memoizeWith.js"(exports2, module2) {
    var _arity = require_arity();
    var _curry2 = require_curry2();
    var _has = require_has();
    var memoizeWith = /* @__PURE__ */ _curry2(function memoizeWith2(mFn, fn) {
      var cache = {};
      return _arity(fn.length, function() {
        var key = mFn.apply(this, arguments);
        if (!_has(key, cache)) {
          cache[key] = fn.apply(this, arguments);
        }
        return cache[key];
      });
    });
    module2.exports = memoizeWith;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/merge.js
var require_merge = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/merge.js"(exports2, module2) {
    var _objectAssign = require_objectAssign();
    var _curry2 = require_curry2();
    var merge = /* @__PURE__ */ _curry2(function merge2(l2, r) {
      return _objectAssign({}, l2, r);
    });
    module2.exports = merge;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mergeAll.js
var require_mergeAll = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mergeAll.js"(exports2, module2) {
    var _objectAssign = require_objectAssign();
    var _curry1 = require_curry1();
    var mergeAll = /* @__PURE__ */ _curry1(function mergeAll2(list) {
      return _objectAssign.apply(null, [{}].concat(list));
    });
    module2.exports = mergeAll;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mergeWithKey.js
var require_mergeWithKey = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mergeWithKey.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var _has = require_has();
    var mergeWithKey = /* @__PURE__ */ _curry3(function mergeWithKey2(fn, l2, r) {
      var result = {};
      var k;
      for (k in l2) {
        if (_has(k, l2)) {
          result[k] = _has(k, r) ? fn(k, l2[k], r[k]) : l2[k];
        }
      }
      for (k in r) {
        if (_has(k, r) && !_has(k, result)) {
          result[k] = r[k];
        }
      }
      return result;
    });
    module2.exports = mergeWithKey;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mergeDeepWithKey.js
var require_mergeDeepWithKey = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mergeDeepWithKey.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var _isObject = require_isObject();
    var mergeWithKey = require_mergeWithKey();
    var mergeDeepWithKey = /* @__PURE__ */ _curry3(function mergeDeepWithKey2(fn, lObj, rObj) {
      return mergeWithKey(function(k, lVal, rVal) {
        if (_isObject(lVal) && _isObject(rVal)) {
          return mergeDeepWithKey2(fn, lVal, rVal);
        } else {
          return fn(k, lVal, rVal);
        }
      }, lObj, rObj);
    });
    module2.exports = mergeDeepWithKey;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mergeDeepLeft.js
var require_mergeDeepLeft = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mergeDeepLeft.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var mergeDeepWithKey = require_mergeDeepWithKey();
    var mergeDeepLeft = /* @__PURE__ */ _curry2(function mergeDeepLeft2(lObj, rObj) {
      return mergeDeepWithKey(function(k, lVal, rVal) {
        return lVal;
      }, lObj, rObj);
    });
    module2.exports = mergeDeepLeft;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mergeDeepRight.js
var require_mergeDeepRight = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mergeDeepRight.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var mergeDeepWithKey = require_mergeDeepWithKey();
    var mergeDeepRight = /* @__PURE__ */ _curry2(function mergeDeepRight2(lObj, rObj) {
      return mergeDeepWithKey(function(k, lVal, rVal) {
        return rVal;
      }, lObj, rObj);
    });
    module2.exports = mergeDeepRight;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mergeDeepWith.js
var require_mergeDeepWith = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mergeDeepWith.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var mergeDeepWithKey = require_mergeDeepWithKey();
    var mergeDeepWith = /* @__PURE__ */ _curry3(function mergeDeepWith2(fn, lObj, rObj) {
      return mergeDeepWithKey(function(k, lVal, rVal) {
        return fn(lVal, rVal);
      }, lObj, rObj);
    });
    module2.exports = mergeDeepWith;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mergeLeft.js
var require_mergeLeft = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mergeLeft.js"(exports2, module2) {
    var _objectAssign = require_objectAssign();
    var _curry2 = require_curry2();
    var mergeLeft = /* @__PURE__ */ _curry2(function mergeLeft2(l2, r) {
      return _objectAssign({}, r, l2);
    });
    module2.exports = mergeLeft;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mergeRight.js
var require_mergeRight = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mergeRight.js"(exports2, module2) {
    var _objectAssign = require_objectAssign();
    var _curry2 = require_curry2();
    var mergeRight = /* @__PURE__ */ _curry2(function mergeRight2(l2, r) {
      return _objectAssign({}, l2, r);
    });
    module2.exports = mergeRight;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mergeWith.js
var require_mergeWith = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/mergeWith.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var mergeWithKey = require_mergeWithKey();
    var mergeWith = /* @__PURE__ */ _curry3(function mergeWith2(fn, l2, r) {
      return mergeWithKey(function(_2, _l, _r) {
        return fn(_l, _r);
      }, l2, r);
    });
    module2.exports = mergeWith;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/min.js
var require_min = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/min.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var min = /* @__PURE__ */ _curry2(function min2(a2, b) {
      return b < a2 ? b : a2;
    });
    module2.exports = min;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/minBy.js
var require_minBy = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/minBy.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var minBy = /* @__PURE__ */ _curry3(function minBy2(f, a2, b) {
      return f(b) < f(a2) ? b : a2;
    });
    module2.exports = minBy;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/modulo.js
var require_modulo = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/modulo.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var modulo = /* @__PURE__ */ _curry2(function modulo2(a2, b) {
      return a2 % b;
    });
    module2.exports = modulo;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/move.js
var require_move = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/move.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var move = /* @__PURE__ */ _curry3(function(from, to, list) {
      var length = list.length;
      var result = list.slice();
      var positiveFrom = from < 0 ? length + from : from;
      var positiveTo = to < 0 ? length + to : to;
      var item = result.splice(positiveFrom, 1);
      return positiveFrom < 0 || positiveFrom >= list.length || positiveTo < 0 || positiveTo >= list.length ? list : [].concat(result.slice(0, positiveTo)).concat(item).concat(result.slice(positiveTo, list.length));
    });
    module2.exports = move;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/multiply.js
var require_multiply = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/multiply.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var multiply = /* @__PURE__ */ _curry2(function multiply2(a2, b) {
      return a2 * b;
    });
    module2.exports = multiply;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/negate.js
var require_negate = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/negate.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var negate = /* @__PURE__ */ _curry1(function negate2(n2) {
      return -n2;
    });
    module2.exports = negate;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/none.js
var require_none = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/none.js"(exports2, module2) {
    var _complement = require_complement2();
    var _curry2 = require_curry2();
    var all = require_all();
    var none = /* @__PURE__ */ _curry2(function none2(fn, input) {
      return all(_complement(fn), input);
    });
    module2.exports = none;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/nthArg.js
var require_nthArg = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/nthArg.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var curryN = require_curryN2();
    var nth = require_nth();
    var nthArg = /* @__PURE__ */ _curry1(function nthArg2(n2) {
      var arity = n2 < 0 ? 1 : n2 + 1;
      return curryN(arity, function() {
        return nth(n2, arguments);
      });
    });
    module2.exports = nthArg;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/o.js
var require_o = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/o.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var o2 = /* @__PURE__ */ _curry3(function o3(f, g, x) {
      return f(g(x));
    });
    module2.exports = o2;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_of.js
var require_of = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_of.js"(exports2, module2) {
    function _of(x) {
      return [x];
    }
    module2.exports = _of;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/of.js
var require_of2 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/of.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var _of = require_of();
    var of = /* @__PURE__ */ _curry1(_of);
    module2.exports = of;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/omit.js
var require_omit = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/omit.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var omit = /* @__PURE__ */ _curry2(function omit2(names, obj) {
      var result = {};
      var index = {};
      var idx = 0;
      var len = names.length;
      while (idx < len) {
        index[names[idx]] = 1;
        idx += 1;
      }
      for (var prop in obj) {
        if (!index.hasOwnProperty(prop)) {
          result[prop] = obj[prop];
        }
      }
      return result;
    });
    module2.exports = omit;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/once.js
var require_once = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/once.js"(exports2, module2) {
    var _arity = require_arity();
    var _curry1 = require_curry1();
    var once = /* @__PURE__ */ _curry1(function once2(fn) {
      var called = false;
      var result;
      return _arity(fn.length, function() {
        if (called) {
          return result;
        }
        called = true;
        result = fn.apply(this, arguments);
        return result;
      });
    });
    module2.exports = once;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_assertPromise.js
var require_assertPromise = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_assertPromise.js"(exports2, module2) {
    var _isFunction = require_isFunction();
    var _toString = require_toString();
    function _assertPromise(name, p2) {
      if (p2 == null || !_isFunction(p2.then)) {
        throw new TypeError("`" + name + "` expected a Promise, received " + _toString(p2, []));
      }
    }
    module2.exports = _assertPromise;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/otherwise.js
var require_otherwise = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/otherwise.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _assertPromise = require_assertPromise();
    var otherwise = /* @__PURE__ */ _curry2(function otherwise2(f, p2) {
      _assertPromise("otherwise", p2);
      return p2.then(null, f);
    });
    module2.exports = otherwise;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/over.js
var require_over = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/over.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var Identity = function(x) {
      return {
        value: x,
        map: function(f) {
          return Identity(f(x));
        }
      };
    };
    var over = /* @__PURE__ */ _curry3(function over2(lens, f, x) {
      return lens(function(y2) {
        return Identity(f(y2));
      })(x).value;
    });
    module2.exports = over;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/pair.js
var require_pair = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/pair.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var pair = /* @__PURE__ */ _curry2(function pair2(fst, snd) {
      return [fst, snd];
    });
    module2.exports = pair;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_createPartialApplicator.js
var require_createPartialApplicator = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_createPartialApplicator.js"(exports2, module2) {
    var _arity = require_arity();
    var _curry2 = require_curry2();
    function _createPartialApplicator(concat) {
      return _curry2(function(fn, args) {
        return _arity(Math.max(0, fn.length - args.length), function() {
          return fn.apply(this, concat(args, arguments));
        });
      });
    }
    module2.exports = _createPartialApplicator;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/partial.js
var require_partial = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/partial.js"(exports2, module2) {
    var _concat = require_concat();
    var _createPartialApplicator = require_createPartialApplicator();
    var partial = /* @__PURE__ */ _createPartialApplicator(_concat);
    module2.exports = partial;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/partialRight.js
var require_partialRight = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/partialRight.js"(exports2, module2) {
    var _concat = require_concat();
    var _createPartialApplicator = require_createPartialApplicator();
    var flip = require_flip();
    var partialRight = /* @__PURE__ */ _createPartialApplicator(/* @__PURE__ */ flip(_concat));
    module2.exports = partialRight;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/partition.js
var require_partition = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/partition.js"(exports2, module2) {
    var filter = require_filter2();
    var juxt = require_juxt();
    var reject = require_reject();
    var partition = /* @__PURE__ */ juxt([filter, reject]);
    module2.exports = partition;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/pathEq.js
var require_pathEq = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/pathEq.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var equals = require_equals2();
    var path2 = require_path();
    var pathEq = /* @__PURE__ */ _curry3(function pathEq2(_path, val, obj) {
      return equals(path2(_path, obj), val);
    });
    module2.exports = pathEq;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/pathOr.js
var require_pathOr = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/pathOr.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var defaultTo = require_defaultTo();
    var path2 = require_path();
    var pathOr = /* @__PURE__ */ _curry3(function pathOr2(d2, p2, obj) {
      return defaultTo(d2, path2(p2, obj));
    });
    module2.exports = pathOr;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/pathSatisfies.js
var require_pathSatisfies = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/pathSatisfies.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var path2 = require_path();
    var pathSatisfies = /* @__PURE__ */ _curry3(function pathSatisfies2(pred, propPath, obj) {
      return pred(path2(propPath, obj));
    });
    module2.exports = pathSatisfies;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/pick.js
var require_pick = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/pick.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var pick = /* @__PURE__ */ _curry2(function pick2(names, obj) {
      var result = {};
      var idx = 0;
      while (idx < names.length) {
        if (names[idx] in obj) {
          result[names[idx]] = obj[names[idx]];
        }
        idx += 1;
      }
      return result;
    });
    module2.exports = pick;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/pickAll.js
var require_pickAll = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/pickAll.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var pickAll = /* @__PURE__ */ _curry2(function pickAll2(names, obj) {
      var result = {};
      var idx = 0;
      var len = names.length;
      while (idx < len) {
        var name = names[idx];
        result[name] = obj[name];
        idx += 1;
      }
      return result;
    });
    module2.exports = pickAll;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/pickBy.js
var require_pickBy = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/pickBy.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var pickBy = /* @__PURE__ */ _curry2(function pickBy2(test, obj) {
      var result = {};
      for (var prop in obj) {
        if (test(obj[prop], prop, obj)) {
          result[prop] = obj[prop];
        }
      }
      return result;
    });
    module2.exports = pickBy;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/pipeK.js
var require_pipeK = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/pipeK.js"(exports2, module2) {
    var composeK = require_composeK();
    var reverse = require_reverse();
    function pipeK() {
      if (arguments.length === 0) {
        throw new Error("pipeK requires at least one argument");
      }
      return composeK.apply(this, reverse(arguments));
    }
    module2.exports = pipeK;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/prepend.js
var require_prepend = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/prepend.js"(exports2, module2) {
    var _concat = require_concat();
    var _curry2 = require_curry2();
    var prepend = /* @__PURE__ */ _curry2(function prepend2(el, list) {
      return _concat([el], list);
    });
    module2.exports = prepend;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/product.js
var require_product = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/product.js"(exports2, module2) {
    var multiply = require_multiply();
    var reduce = require_reduce2();
    var product = /* @__PURE__ */ reduce(multiply, 1);
    module2.exports = product;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/useWith.js
var require_useWith = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/useWith.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var curryN = require_curryN2();
    var useWith = /* @__PURE__ */ _curry2(function useWith2(fn, transformers) {
      return curryN(transformers.length, function() {
        var args = [];
        var idx = 0;
        while (idx < transformers.length) {
          args.push(transformers[idx].call(this, arguments[idx]));
          idx += 1;
        }
        return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, transformers.length)));
      });
    });
    module2.exports = useWith;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/project.js
var require_project = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/project.js"(exports2, module2) {
    var _map = require_map();
    var identity2 = require_identity2();
    var pickAll = require_pickAll();
    var useWith = require_useWith();
    var project = /* @__PURE__ */ useWith(_map, [pickAll, identity2]);
    module2.exports = project;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/propEq.js
var require_propEq = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/propEq.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var equals = require_equals2();
    var propEq = /* @__PURE__ */ _curry3(function propEq2(name, val, obj) {
      return equals(val, obj[name]);
    });
    module2.exports = propEq;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/propIs.js
var require_propIs = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/propIs.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var is2 = require_is();
    var propIs = /* @__PURE__ */ _curry3(function propIs2(type, name, obj) {
      return is2(type, obj[name]);
    });
    module2.exports = propIs;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/propOr.js
var require_propOr = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/propOr.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var pathOr = require_pathOr();
    var propOr = /* @__PURE__ */ _curry3(function propOr2(val, p2, obj) {
      return pathOr(val, [p2], obj);
    });
    module2.exports = propOr;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/propSatisfies.js
var require_propSatisfies = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/propSatisfies.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var propSatisfies = /* @__PURE__ */ _curry3(function propSatisfies2(pred, name, obj) {
      return pred(obj[name]);
    });
    module2.exports = propSatisfies;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/props.js
var require_props = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/props.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var path2 = require_path();
    var props = /* @__PURE__ */ _curry2(function props2(ps, obj) {
      return ps.map(function(p2) {
        return path2([p2], obj);
      });
    });
    module2.exports = props;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/range.js
var require_range = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/range.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _isNumber = require_isNumber();
    var range2 = /* @__PURE__ */ _curry2(function range3(from, to) {
      if (!(_isNumber(from) && _isNumber(to))) {
        throw new TypeError("Both arguments to range must be numbers");
      }
      var result = [];
      var n2 = from;
      while (n2 < to) {
        result.push(n2);
        n2 += 1;
      }
      return result;
    });
    module2.exports = range2;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/reduceRight.js
var require_reduceRight = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/reduceRight.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var reduceRight = /* @__PURE__ */ _curry3(function reduceRight2(fn, acc, list) {
      var idx = list.length - 1;
      while (idx >= 0) {
        acc = fn(list[idx], acc);
        idx -= 1;
      }
      return acc;
    });
    module2.exports = reduceRight;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/reduceWhile.js
var require_reduceWhile = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/reduceWhile.js"(exports2, module2) {
    var _curryN = require_curryN();
    var _reduce = require_reduce();
    var _reduced = require_reduced();
    var reduceWhile = /* @__PURE__ */ _curryN(4, [], function _reduceWhile(pred, fn, a2, list) {
      return _reduce(function(acc, x) {
        return pred(acc, x) ? fn(acc, x) : _reduced(acc);
      }, a2, list);
    });
    module2.exports = reduceWhile;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/reduced.js
var require_reduced2 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/reduced.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var _reduced = require_reduced();
    var reduced = /* @__PURE__ */ _curry1(_reduced);
    module2.exports = reduced;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/times.js
var require_times = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/times.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var times = /* @__PURE__ */ _curry2(function times2(fn, n2) {
      var len = Number(n2);
      var idx = 0;
      var list;
      if (len < 0 || isNaN(len)) {
        throw new RangeError("n must be a non-negative number");
      }
      list = new Array(len);
      while (idx < len) {
        list[idx] = fn(idx);
        idx += 1;
      }
      return list;
    });
    module2.exports = times;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/repeat.js
var require_repeat = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/repeat.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var always = require_always();
    var times = require_times();
    var repeat = /* @__PURE__ */ _curry2(function repeat2(value, n2) {
      return times(always(value), n2);
    });
    module2.exports = repeat;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/replace.js
var require_replace = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/replace.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var replace = /* @__PURE__ */ _curry3(function replace2(regex, replacement, str) {
      return str.replace(regex, replacement);
    });
    module2.exports = replace;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/scan.js
var require_scan = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/scan.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var scan = /* @__PURE__ */ _curry3(function scan2(fn, acc, list) {
      var idx = 0;
      var len = list.length;
      var result = [acc];
      while (idx < len) {
        acc = fn(acc, list[idx]);
        result[idx + 1] = acc;
        idx += 1;
      }
      return result;
    });
    module2.exports = scan;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/sequence.js
var require_sequence = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/sequence.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var ap = require_ap();
    var map2 = require_map2();
    var prepend = require_prepend();
    var reduceRight = require_reduceRight();
    var sequence = /* @__PURE__ */ _curry2(function sequence2(of, traversable) {
      return typeof traversable.sequence === "function" ? traversable.sequence(of) : reduceRight(function(x, acc) {
        return ap(map2(prepend, x), acc);
      }, of([]), traversable);
    });
    module2.exports = sequence;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/set.js
var require_set = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/set.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var always = require_always();
    var over = require_over();
    var set = /* @__PURE__ */ _curry3(function set2(lens, v, x) {
      return over(lens, always(v), x);
    });
    module2.exports = set;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/sort.js
var require_sort = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/sort.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var sort = /* @__PURE__ */ _curry2(function sort2(comparator, list) {
      return Array.prototype.slice.call(list, 0).sort(comparator);
    });
    module2.exports = sort;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/sortBy.js
var require_sortBy = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/sortBy.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var sortBy = /* @__PURE__ */ _curry2(function sortBy2(fn, list) {
      return Array.prototype.slice.call(list, 0).sort(function(a2, b) {
        var aa = fn(a2);
        var bb = fn(b);
        return aa < bb ? -1 : aa > bb ? 1 : 0;
      });
    });
    module2.exports = sortBy;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/sortWith.js
var require_sortWith = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/sortWith.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var sortWith = /* @__PURE__ */ _curry2(function sortWith2(fns, list) {
      return Array.prototype.slice.call(list, 0).sort(function(a2, b) {
        var result = 0;
        var i2 = 0;
        while (result === 0 && i2 < fns.length) {
          result = fns[i2](a2, b);
          i2 += 1;
        }
        return result;
      });
    });
    module2.exports = sortWith;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/split.js
var require_split = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/split.js"(exports2, module2) {
    var invoker = require_invoker();
    var split = /* @__PURE__ */ invoker(1, "split");
    module2.exports = split;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/splitAt.js
var require_splitAt = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/splitAt.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var length = require_length();
    var slice = require_slice();
    var splitAt = /* @__PURE__ */ _curry2(function splitAt2(index, array) {
      return [slice(0, index, array), slice(index, length(array), array)];
    });
    module2.exports = splitAt;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/splitEvery.js
var require_splitEvery = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/splitEvery.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var slice = require_slice();
    var splitEvery = /* @__PURE__ */ _curry2(function splitEvery2(n2, list) {
      if (n2 <= 0) {
        throw new Error("First argument to splitEvery must be a positive integer");
      }
      var result = [];
      var idx = 0;
      while (idx < list.length) {
        result.push(slice(idx, idx += n2, list));
      }
      return result;
    });
    module2.exports = splitEvery;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/splitWhen.js
var require_splitWhen = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/splitWhen.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var splitWhen = /* @__PURE__ */ _curry2(function splitWhen2(pred, list) {
      var idx = 0;
      var len = list.length;
      var prefix2 = [];
      while (idx < len && !pred(list[idx])) {
        prefix2.push(list[idx]);
        idx += 1;
      }
      return [prefix2, Array.prototype.slice.call(list, idx)];
    });
    module2.exports = splitWhen;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/startsWith.js
var require_startsWith = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/startsWith.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var equals = require_equals2();
    var take = require_take();
    var startsWith = /* @__PURE__ */ _curry2(function(prefix2, list) {
      return equals(take(prefix2.length, list), prefix2);
    });
    module2.exports = startsWith;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/subtract.js
var require_subtract = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/subtract.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var subtract = /* @__PURE__ */ _curry2(function subtract2(a2, b) {
      return Number(a2) - Number(b);
    });
    module2.exports = subtract;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/symmetricDifference.js
var require_symmetricDifference = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/symmetricDifference.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var concat = require_concat2();
    var difference = require_difference();
    var symmetricDifference = /* @__PURE__ */ _curry2(function symmetricDifference2(list1, list2) {
      return concat(difference(list1, list2), difference(list2, list1));
    });
    module2.exports = symmetricDifference;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/symmetricDifferenceWith.js
var require_symmetricDifferenceWith = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/symmetricDifferenceWith.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var concat = require_concat2();
    var differenceWith = require_differenceWith();
    var symmetricDifferenceWith = /* @__PURE__ */ _curry3(function symmetricDifferenceWith2(pred, list1, list2) {
      return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));
    });
    module2.exports = symmetricDifferenceWith;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/takeLastWhile.js
var require_takeLastWhile = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/takeLastWhile.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var slice = require_slice();
    var takeLastWhile = /* @__PURE__ */ _curry2(function takeLastWhile2(fn, xs) {
      var idx = xs.length - 1;
      while (idx >= 0 && fn(xs[idx])) {
        idx -= 1;
      }
      return slice(idx + 1, Infinity, xs);
    });
    module2.exports = takeLastWhile;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xtakeWhile.js
var require_xtakeWhile = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xtakeWhile.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _reduced = require_reduced();
    var _xfBase = require_xfBase();
    var XTakeWhile = /* @__PURE__ */ function() {
      function XTakeWhile2(f, xf) {
        this.xf = xf;
        this.f = f;
      }
      XTakeWhile2.prototype["@@transducer/init"] = _xfBase.init;
      XTakeWhile2.prototype["@@transducer/result"] = _xfBase.result;
      XTakeWhile2.prototype["@@transducer/step"] = function(result, input) {
        return this.f(input) ? this.xf["@@transducer/step"](result, input) : _reduced(result);
      };
      return XTakeWhile2;
    }();
    var _xtakeWhile = /* @__PURE__ */ _curry2(function _xtakeWhile2(f, xf) {
      return new XTakeWhile(f, xf);
    });
    module2.exports = _xtakeWhile;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/takeWhile.js
var require_takeWhile = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/takeWhile.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xtakeWhile = require_xtakeWhile();
    var slice = require_slice();
    var takeWhile = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable(["takeWhile"], _xtakeWhile, function takeWhile2(fn, xs) {
      var idx = 0;
      var len = xs.length;
      while (idx < len && fn(xs[idx])) {
        idx += 1;
      }
      return slice(0, idx, xs);
    }));
    module2.exports = takeWhile;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xtap.js
var require_xtap = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_xtap.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _xfBase = require_xfBase();
    var XTap = /* @__PURE__ */ function() {
      function XTap2(f, xf) {
        this.xf = xf;
        this.f = f;
      }
      XTap2.prototype["@@transducer/init"] = _xfBase.init;
      XTap2.prototype["@@transducer/result"] = _xfBase.result;
      XTap2.prototype["@@transducer/step"] = function(result, input) {
        this.f(input);
        return this.xf["@@transducer/step"](result, input);
      };
      return XTap2;
    }();
    var _xtap = /* @__PURE__ */ _curry2(function _xtap2(f, xf) {
      return new XTap(f, xf);
    });
    module2.exports = _xtap;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/tap.js
var require_tap = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/tap.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xtap = require_xtap();
    var tap = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable([], _xtap, function tap2(fn, x) {
      fn(x);
      return x;
    }));
    module2.exports = tap;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_isRegExp.js
var require_isRegExp = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/internal/_isRegExp.js"(exports2, module2) {
    function _isRegExp(x) {
      return Object.prototype.toString.call(x) === "[object RegExp]";
    }
    module2.exports = _isRegExp;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/test.js
var require_test = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/test.js"(exports2, module2) {
    var _cloneRegExp = require_cloneRegExp();
    var _curry2 = require_curry2();
    var _isRegExp = require_isRegExp();
    var toString = require_toString2();
    var test = /* @__PURE__ */ _curry2(function test2(pattern, str) {
      if (!_isRegExp(pattern)) {
        throw new TypeError("\u2018test\u2019 requires a value of type RegExp as its first argument; received " + toString(pattern));
      }
      return _cloneRegExp(pattern).test(str);
    });
    module2.exports = test;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/andThen.js
var require_andThen = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/andThen.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _assertPromise = require_assertPromise();
    var andThen = /* @__PURE__ */ _curry2(function andThen2(f, p2) {
      _assertPromise("andThen", p2);
      return p2.then(f);
    });
    module2.exports = andThen;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/toLower.js
var require_toLower = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/toLower.js"(exports2, module2) {
    var invoker = require_invoker();
    var toLower = /* @__PURE__ */ invoker(0, "toLowerCase");
    module2.exports = toLower;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/toPairs.js
var require_toPairs = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/toPairs.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var _has = require_has();
    var toPairs2 = /* @__PURE__ */ _curry1(function toPairs3(obj) {
      var pairs = [];
      for (var prop in obj) {
        if (_has(prop, obj)) {
          pairs[pairs.length] = [prop, obj[prop]];
        }
      }
      return pairs;
    });
    module2.exports = toPairs2;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/toPairsIn.js
var require_toPairsIn = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/toPairsIn.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var toPairsIn = /* @__PURE__ */ _curry1(function toPairsIn2(obj) {
      var pairs = [];
      for (var prop in obj) {
        pairs[pairs.length] = [prop, obj[prop]];
      }
      return pairs;
    });
    module2.exports = toPairsIn;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/toUpper.js
var require_toUpper = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/toUpper.js"(exports2, module2) {
    var invoker = require_invoker();
    var toUpper = /* @__PURE__ */ invoker(0, "toUpperCase");
    module2.exports = toUpper;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/transduce.js
var require_transduce = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/transduce.js"(exports2, module2) {
    var _reduce = require_reduce();
    var _xwrap = require_xwrap();
    var curryN = require_curryN2();
    var transduce = /* @__PURE__ */ curryN(4, function transduce2(xf, fn, acc, list) {
      return _reduce(xf(typeof fn === "function" ? _xwrap(fn) : fn), acc, list);
    });
    module2.exports = transduce;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/transpose.js
var require_transpose = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/transpose.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var transpose = /* @__PURE__ */ _curry1(function transpose2(outerlist) {
      var i2 = 0;
      var result = [];
      while (i2 < outerlist.length) {
        var innerlist = outerlist[i2];
        var j = 0;
        while (j < innerlist.length) {
          if (typeof result[j] === "undefined") {
            result[j] = [];
          }
          result[j].push(innerlist[j]);
          j += 1;
        }
        i2 += 1;
      }
      return result;
    });
    module2.exports = transpose;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/traverse.js
var require_traverse = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/traverse.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var map2 = require_map2();
    var sequence = require_sequence();
    var traverse = /* @__PURE__ */ _curry3(function traverse2(of, f, traversable) {
      return typeof traversable["fantasy-land/traverse"] === "function" ? traversable["fantasy-land/traverse"](f, of) : sequence(of, map2(f, traversable));
    });
    module2.exports = traverse;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/trim.js
var require_trim = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/trim.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var ws = "	\n\v\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
    var zeroWidth = "\u200B";
    var hasProtoTrim = typeof String.prototype.trim === "function";
    var trim = !hasProtoTrim || /* @__PURE__ */ ws.trim() || !/* @__PURE__ */ zeroWidth.trim() ? /* @__PURE__ */ _curry1(function trim2(str) {
      var beginRx = new RegExp("^[" + ws + "][" + ws + "]*");
      var endRx = new RegExp("[" + ws + "][" + ws + "]*$");
      return str.replace(beginRx, "").replace(endRx, "");
    }) : /* @__PURE__ */ _curry1(function trim2(str) {
      return str.trim();
    });
    module2.exports = trim;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/tryCatch.js
var require_tryCatch = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/tryCatch.js"(exports2, module2) {
    var _arity = require_arity();
    var _concat = require_concat();
    var _curry2 = require_curry2();
    var tryCatch = /* @__PURE__ */ _curry2(function _tryCatch(tryer, catcher) {
      return _arity(tryer.length, function() {
        try {
          return tryer.apply(this, arguments);
        } catch (e2) {
          return catcher.apply(this, _concat([e2], arguments));
        }
      });
    });
    module2.exports = tryCatch;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/unapply.js
var require_unapply = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/unapply.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var unapply = /* @__PURE__ */ _curry1(function unapply2(fn) {
      return function() {
        return fn(Array.prototype.slice.call(arguments, 0));
      };
    });
    module2.exports = unapply;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/unary.js
var require_unary = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/unary.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var nAry = require_nAry();
    var unary = /* @__PURE__ */ _curry1(function unary2(fn) {
      return nAry(1, fn);
    });
    module2.exports = unary;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/uncurryN.js
var require_uncurryN = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/uncurryN.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var curryN = require_curryN2();
    var uncurryN = /* @__PURE__ */ _curry2(function uncurryN2(depth, fn) {
      return curryN(depth, function() {
        var currentDepth = 1;
        var value = fn;
        var idx = 0;
        var endIdx;
        while (currentDepth <= depth && typeof value === "function") {
          endIdx = currentDepth === depth ? arguments.length : idx + value.length;
          value = value.apply(this, Array.prototype.slice.call(arguments, idx, endIdx));
          currentDepth += 1;
          idx = endIdx;
        }
        return value;
      });
    });
    module2.exports = uncurryN;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/unfold.js
var require_unfold = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/unfold.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var unfold = /* @__PURE__ */ _curry2(function unfold2(fn, seed) {
      var pair = fn(seed);
      var result = [];
      while (pair && pair.length) {
        result[result.length] = pair[0];
        pair = fn(pair[1]);
      }
      return result;
    });
    module2.exports = unfold;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/union.js
var require_union = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/union.js"(exports2, module2) {
    var _concat = require_concat();
    var _curry2 = require_curry2();
    var compose = require_compose();
    var uniq = require_uniq();
    var union = /* @__PURE__ */ _curry2(/* @__PURE__ */ compose(uniq, _concat));
    module2.exports = union;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/uniqWith.js
var require_uniqWith = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/uniqWith.js"(exports2, module2) {
    var _includesWith = require_includesWith();
    var _curry2 = require_curry2();
    var uniqWith = /* @__PURE__ */ _curry2(function uniqWith2(pred, list) {
      var idx = 0;
      var len = list.length;
      var result = [];
      var item;
      while (idx < len) {
        item = list[idx];
        if (!_includesWith(pred, item, result)) {
          result[result.length] = item;
        }
        idx += 1;
      }
      return result;
    });
    module2.exports = uniqWith;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/unionWith.js
var require_unionWith = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/unionWith.js"(exports2, module2) {
    var _concat = require_concat();
    var _curry3 = require_curry3();
    var uniqWith = require_uniqWith();
    var unionWith = /* @__PURE__ */ _curry3(function unionWith2(pred, list1, list2) {
      return uniqWith(pred, _concat(list1, list2));
    });
    module2.exports = unionWith;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/unless.js
var require_unless = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/unless.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var unless = /* @__PURE__ */ _curry3(function unless2(pred, whenFalseFn, x) {
      return pred(x) ? x : whenFalseFn(x);
    });
    module2.exports = unless;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/unnest.js
var require_unnest = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/unnest.js"(exports2, module2) {
    var _identity = require_identity();
    var chain = require_chain();
    var unnest = /* @__PURE__ */ chain(_identity);
    module2.exports = unnest;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/until.js
var require_until = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/until.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var until = /* @__PURE__ */ _curry3(function until2(pred, fn, init) {
      var val = init;
      while (!pred(val)) {
        val = fn(val);
      }
      return val;
    });
    module2.exports = until;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/valuesIn.js
var require_valuesIn = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/valuesIn.js"(exports2, module2) {
    var _curry1 = require_curry1();
    var valuesIn = /* @__PURE__ */ _curry1(function valuesIn2(obj) {
      var prop;
      var vs = [];
      for (prop in obj) {
        vs[vs.length] = obj[prop];
      }
      return vs;
    });
    module2.exports = valuesIn;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/view.js
var require_view = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/view.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var Const = function(x) {
      return {
        value: x,
        "fantasy-land/map": function() {
          return this;
        }
      };
    };
    var view = /* @__PURE__ */ _curry2(function view2(lens, x) {
      return lens(Const)(x).value;
    });
    module2.exports = view;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/when.js
var require_when = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/when.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var when = /* @__PURE__ */ _curry3(function when2(pred, whenTrueFn, x) {
      return pred(x) ? whenTrueFn(x) : x;
    });
    module2.exports = when;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/where.js
var require_where = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/where.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var _has = require_has();
    var where = /* @__PURE__ */ _curry2(function where2(spec, testObj) {
      for (var prop in spec) {
        if (_has(prop, spec) && !spec[prop](testObj[prop])) {
          return false;
        }
      }
      return true;
    });
    module2.exports = where;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/whereEq.js
var require_whereEq = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/whereEq.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var equals = require_equals2();
    var map2 = require_map2();
    var where = require_where();
    var whereEq = /* @__PURE__ */ _curry2(function whereEq2(spec, testObj) {
      return where(map2(equals, spec), testObj);
    });
    module2.exports = whereEq;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/without.js
var require_without = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/without.js"(exports2, module2) {
    var _includes = require_includes();
    var _curry2 = require_curry2();
    var flip = require_flip();
    var reject = require_reject();
    var without = /* @__PURE__ */ _curry2(function(xs, list) {
      return reject(flip(_includes)(xs), list);
    });
    module2.exports = without;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/xor.js
var require_xor = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/xor.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var xor = /* @__PURE__ */ _curry2(function xor2(a2, b) {
      return Boolean(!a2 ^ !b);
    });
    module2.exports = xor;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/xprod.js
var require_xprod = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/xprod.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var xprod = /* @__PURE__ */ _curry2(function xprod2(a2, b) {
      var idx = 0;
      var ilen = a2.length;
      var j;
      var jlen = b.length;
      var result = [];
      while (idx < ilen) {
        j = 0;
        while (j < jlen) {
          result[result.length] = [a2[idx], b[j]];
          j += 1;
        }
        idx += 1;
      }
      return result;
    });
    module2.exports = xprod;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/zip.js
var require_zip = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/zip.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var zip = /* @__PURE__ */ _curry2(function zip2(a2, b) {
      var rv = [];
      var idx = 0;
      var len = Math.min(a2.length, b.length);
      while (idx < len) {
        rv[idx] = [a2[idx], b[idx]];
        idx += 1;
      }
      return rv;
    });
    module2.exports = zip;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/zipObj.js
var require_zipObj = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/zipObj.js"(exports2, module2) {
    var _curry2 = require_curry2();
    var zipObj = /* @__PURE__ */ _curry2(function zipObj2(keys, values) {
      var idx = 0;
      var len = Math.min(keys.length, values.length);
      var out = {};
      while (idx < len) {
        out[keys[idx]] = values[idx];
        idx += 1;
      }
      return out;
    });
    module2.exports = zipObj;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/zipWith.js
var require_zipWith = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/zipWith.js"(exports2, module2) {
    var _curry3 = require_curry3();
    var zipWith = /* @__PURE__ */ _curry3(function zipWith2(fn, a2, b) {
      var rv = [];
      var idx = 0;
      var len = Math.min(a2.length, b.length);
      while (idx < len) {
        rv[idx] = fn(a2[idx], b[idx]);
        idx += 1;
      }
      return rv;
    });
    module2.exports = zipWith;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/thunkify.js
var require_thunkify = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/thunkify.js"(exports2, module2) {
    var curryN = require_curryN2();
    var _curry1 = require_curry1();
    var thunkify = /* @__PURE__ */ _curry1(function thunkify2(fn) {
      return curryN(fn.length, function createThunk() {
        var fnArgs = arguments;
        return function invokeThunk() {
          return fn.apply(this, fnArgs);
        };
      });
    });
    module2.exports = thunkify;
  }
});

// ../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/index.js
var require_src2 = __commonJS({
  "../../node_modules/.pnpm/ramda@0.27.1/node_modules/ramda/src/index.js"(exports2, module2) {
    module2.exports = {};
    module2.exports.F = require_F();
    module2.exports.T = require_T();
    module2.exports.__ = require__();
    module2.exports.add = require_add();
    module2.exports.addIndex = require_addIndex();
    module2.exports.adjust = require_adjust();
    module2.exports.all = require_all();
    module2.exports.allPass = require_allPass();
    module2.exports.always = require_always();
    module2.exports.and = require_and();
    module2.exports.any = require_any();
    module2.exports.anyPass = require_anyPass();
    module2.exports.ap = require_ap();
    module2.exports.aperture = require_aperture2();
    module2.exports.append = require_append();
    module2.exports.apply = require_apply();
    module2.exports.applySpec = require_applySpec();
    module2.exports.applyTo = require_applyTo();
    module2.exports.ascend = require_ascend();
    module2.exports.assoc = require_assoc();
    module2.exports.assocPath = require_assocPath();
    module2.exports.binary = require_binary();
    module2.exports.bind = require_bind2();
    module2.exports.both = require_both();
    module2.exports.call = require_call();
    module2.exports.chain = require_chain();
    module2.exports.clamp = require_clamp();
    module2.exports.clone = require_clone2();
    module2.exports.comparator = require_comparator();
    module2.exports.complement = require_complement();
    module2.exports.compose = require_compose();
    module2.exports.composeK = require_composeK();
    module2.exports.composeP = require_composeP();
    module2.exports.composeWith = require_composeWith();
    module2.exports.concat = require_concat2();
    module2.exports.cond = require_cond();
    module2.exports.construct = require_construct();
    module2.exports.constructN = require_constructN();
    module2.exports.contains = require_contains();
    module2.exports.converge = require_converge();
    module2.exports.countBy = require_countBy();
    module2.exports.curry = require_curry();
    module2.exports.curryN = require_curryN2();
    module2.exports.dec = require_dec();
    module2.exports.defaultTo = require_defaultTo();
    module2.exports.descend = require_descend();
    module2.exports.difference = require_difference();
    module2.exports.differenceWith = require_differenceWith();
    module2.exports.dissoc = require_dissoc();
    module2.exports.dissocPath = require_dissocPath();
    module2.exports.divide = require_divide();
    module2.exports.drop = require_drop();
    module2.exports.dropLast = require_dropLast2();
    module2.exports.dropLastWhile = require_dropLastWhile2();
    module2.exports.dropRepeats = require_dropRepeats();
    module2.exports.dropRepeatsWith = require_dropRepeatsWith();
    module2.exports.dropWhile = require_dropWhile();
    module2.exports.either = require_either();
    module2.exports.empty = require_empty();
    module2.exports.endsWith = require_endsWith();
    module2.exports.eqBy = require_eqBy();
    module2.exports.eqProps = require_eqProps();
    module2.exports.equals = require_equals2();
    module2.exports.evolve = require_evolve();
    module2.exports.filter = require_filter2();
    module2.exports.find = require_find();
    module2.exports.findIndex = require_findIndex();
    module2.exports.findLast = require_findLast();
    module2.exports.findLastIndex = require_findLastIndex();
    module2.exports.flatten = require_flatten();
    module2.exports.flip = require_flip();
    module2.exports.forEach = require_forEach();
    module2.exports.forEachObjIndexed = require_forEachObjIndexed();
    module2.exports.fromPairs = require_fromPairs();
    module2.exports.groupBy = require_groupBy();
    module2.exports.groupWith = require_groupWith();
    module2.exports.gt = require_gt();
    module2.exports.gte = require_gte();
    module2.exports.has = require_has2();
    module2.exports.hasIn = require_hasIn();
    module2.exports.hasPath = require_hasPath();
    module2.exports.head = require_head();
    module2.exports.identical = require_identical();
    module2.exports.identity = require_identity2();
    module2.exports.ifElse = require_ifElse();
    module2.exports.inc = require_inc();
    module2.exports.includes = require_includes2();
    module2.exports.indexBy = require_indexBy();
    module2.exports.indexOf = require_indexOf2();
    module2.exports.init = require_init();
    module2.exports.innerJoin = require_innerJoin();
    module2.exports.insert = require_insert();
    module2.exports.insertAll = require_insertAll();
    module2.exports.intersection = require_intersection();
    module2.exports.intersperse = require_intersperse();
    module2.exports.into = require_into();
    module2.exports.invert = require_invert();
    module2.exports.invertObj = require_invertObj();
    module2.exports.invoker = require_invoker();
    module2.exports.is = require_is();
    module2.exports.isEmpty = require_isEmpty();
    module2.exports.isNil = require_isNil();
    module2.exports.join = require_join();
    module2.exports.juxt = require_juxt();
    module2.exports.keys = require_keys();
    module2.exports.keysIn = require_keysIn();
    module2.exports.last = require_last();
    module2.exports.lastIndexOf = require_lastIndexOf();
    module2.exports.length = require_length();
    module2.exports.lens = require_lens();
    module2.exports.lensIndex = require_lensIndex();
    module2.exports.lensPath = require_lensPath();
    module2.exports.lensProp = require_lensProp();
    module2.exports.lift = require_lift();
    module2.exports.liftN = require_liftN();
    module2.exports.lt = require_lt();
    module2.exports.lte = require_lte();
    module2.exports.map = require_map2();
    module2.exports.mapAccum = require_mapAccum();
    module2.exports.mapAccumRight = require_mapAccumRight();
    module2.exports.mapObjIndexed = require_mapObjIndexed();
    module2.exports.match = require_match();
    module2.exports.mathMod = require_mathMod();
    module2.exports.max = require_max();
    module2.exports.maxBy = require_maxBy();
    module2.exports.mean = require_mean();
    module2.exports.median = require_median();
    module2.exports.memoizeWith = require_memoizeWith();
    module2.exports.merge = require_merge();
    module2.exports.mergeAll = require_mergeAll();
    module2.exports.mergeDeepLeft = require_mergeDeepLeft();
    module2.exports.mergeDeepRight = require_mergeDeepRight();
    module2.exports.mergeDeepWith = require_mergeDeepWith();
    module2.exports.mergeDeepWithKey = require_mergeDeepWithKey();
    module2.exports.mergeLeft = require_mergeLeft();
    module2.exports.mergeRight = require_mergeRight();
    module2.exports.mergeWith = require_mergeWith();
    module2.exports.mergeWithKey = require_mergeWithKey();
    module2.exports.min = require_min();
    module2.exports.minBy = require_minBy();
    module2.exports.modulo = require_modulo();
    module2.exports.move = require_move();
    module2.exports.multiply = require_multiply();
    module2.exports.nAry = require_nAry();
    module2.exports.negate = require_negate();
    module2.exports.none = require_none();
    module2.exports.not = require_not();
    module2.exports.nth = require_nth();
    module2.exports.nthArg = require_nthArg();
    module2.exports.o = require_o();
    module2.exports.objOf = require_objOf();
    module2.exports.of = require_of2();
    module2.exports.omit = require_omit();
    module2.exports.once = require_once();
    module2.exports.or = require_or();
    module2.exports.otherwise = require_otherwise();
    module2.exports.over = require_over();
    module2.exports.pair = require_pair();
    module2.exports.partial = require_partial();
    module2.exports.partialRight = require_partialRight();
    module2.exports.partition = require_partition();
    module2.exports.path = require_path();
    module2.exports.paths = require_paths();
    module2.exports.pathEq = require_pathEq();
    module2.exports.pathOr = require_pathOr();
    module2.exports.pathSatisfies = require_pathSatisfies();
    module2.exports.pick = require_pick();
    module2.exports.pickAll = require_pickAll();
    module2.exports.pickBy = require_pickBy();
    module2.exports.pipe = require_pipe2();
    module2.exports.pipeK = require_pipeK();
    module2.exports.pipeP = require_pipeP2();
    module2.exports.pipeWith = require_pipeWith();
    module2.exports.pluck = require_pluck();
    module2.exports.prepend = require_prepend();
    module2.exports.product = require_product();
    module2.exports.project = require_project();
    module2.exports.prop = require_prop();
    module2.exports.propEq = require_propEq();
    module2.exports.propIs = require_propIs();
    module2.exports.propOr = require_propOr();
    module2.exports.propSatisfies = require_propSatisfies();
    module2.exports.props = require_props();
    module2.exports.range = require_range();
    module2.exports.reduce = require_reduce2();
    module2.exports.reduceBy = require_reduceBy();
    module2.exports.reduceRight = require_reduceRight();
    module2.exports.reduceWhile = require_reduceWhile();
    module2.exports.reduced = require_reduced2();
    module2.exports.reject = require_reject();
    module2.exports.remove = require_remove();
    module2.exports.repeat = require_repeat();
    module2.exports.replace = require_replace();
    module2.exports.reverse = require_reverse();
    module2.exports.scan = require_scan();
    module2.exports.sequence = require_sequence();
    module2.exports.set = require_set();
    module2.exports.slice = require_slice();
    module2.exports.sort = require_sort();
    module2.exports.sortBy = require_sortBy();
    module2.exports.sortWith = require_sortWith();
    module2.exports.split = require_split();
    module2.exports.splitAt = require_splitAt();
    module2.exports.splitEvery = require_splitEvery();
    module2.exports.splitWhen = require_splitWhen();
    module2.exports.startsWith = require_startsWith();
    module2.exports.subtract = require_subtract();
    module2.exports.sum = require_sum();
    module2.exports.symmetricDifference = require_symmetricDifference();
    module2.exports.symmetricDifferenceWith = require_symmetricDifferenceWith();
    module2.exports.tail = require_tail();
    module2.exports.take = require_take();
    module2.exports.takeLast = require_takeLast();
    module2.exports.takeLastWhile = require_takeLastWhile();
    module2.exports.takeWhile = require_takeWhile();
    module2.exports.tap = require_tap();
    module2.exports.test = require_test();
    module2.exports.andThen = require_andThen();
    module2.exports.times = require_times();
    module2.exports.toLower = require_toLower();
    module2.exports.toPairs = require_toPairs();
    module2.exports.toPairsIn = require_toPairsIn();
    module2.exports.toString = require_toString2();
    module2.exports.toUpper = require_toUpper();
    module2.exports.transduce = require_transduce();
    module2.exports.transpose = require_transpose();
    module2.exports.traverse = require_traverse();
    module2.exports.trim = require_trim();
    module2.exports.tryCatch = require_tryCatch();
    module2.exports.type = require_type();
    module2.exports.unapply = require_unapply();
    module2.exports.unary = require_unary();
    module2.exports.uncurryN = require_uncurryN();
    module2.exports.unfold = require_unfold();
    module2.exports.union = require_union();
    module2.exports.unionWith = require_unionWith();
    module2.exports.uniq = require_uniq();
    module2.exports.uniqBy = require_uniqBy();
    module2.exports.uniqWith = require_uniqWith();
    module2.exports.unless = require_unless();
    module2.exports.unnest = require_unnest();
    module2.exports.until = require_until();
    module2.exports.update = require_update();
    module2.exports.useWith = require_useWith();
    module2.exports.values = require_values();
    module2.exports.valuesIn = require_valuesIn();
    module2.exports.view = require_view();
    module2.exports.when = require_when();
    module2.exports.where = require_where();
    module2.exports.whereEq = require_whereEq();
    module2.exports.without = require_without();
    module2.exports.xor = require_xor();
    module2.exports.xprod = require_xprod();
    module2.exports.zip = require_zip();
    module2.exports.zipObj = require_zipObj();
    module2.exports.zipWith = require_zipWith();
    module2.exports.thunkify = require_thunkify();
  }
});

// ../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/package.json
var require_package2 = __commonJS({
  "../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/package.json"(exports2, module2) {
    module2.exports = {
      name: "elliptic",
      version: "6.5.4",
      description: "EC cryptography",
      main: "lib/elliptic.js",
      files: [
        "lib"
      ],
      scripts: {
        lint: "eslint lib test",
        "lint:fix": "npm run lint -- --fix",
        unit: "istanbul test _mocha --reporter=spec test/index.js",
        test: "npm run lint && npm run unit",
        version: "grunt dist && git add dist/"
      },
      repository: {
        type: "git",
        url: "git@github.com:indutny/elliptic"
      },
      keywords: [
        "EC",
        "Elliptic",
        "curve",
        "Cryptography"
      ],
      author: "Fedor Indutny <fedor@indutny.com>",
      license: "MIT",
      bugs: {
        url: "https://github.com/indutny/elliptic/issues"
      },
      homepage: "https://github.com/indutny/elliptic",
      devDependencies: {
        brfs: "^2.0.2",
        coveralls: "^3.1.0",
        eslint: "^7.6.0",
        grunt: "^1.2.1",
        "grunt-browserify": "^5.3.0",
        "grunt-cli": "^1.3.2",
        "grunt-contrib-connect": "^3.0.0",
        "grunt-contrib-copy": "^1.0.0",
        "grunt-contrib-uglify": "^5.0.0",
        "grunt-mocha-istanbul": "^5.0.2",
        "grunt-saucelabs": "^9.0.1",
        istanbul: "^0.4.5",
        mocha: "^8.0.1"
      },
      dependencies: {
        "bn.js": "^4.11.9",
        brorand: "^1.1.0",
        "hash.js": "^1.0.0",
        "hmac-drbg": "^1.0.1",
        inherits: "^2.0.4",
        "minimalistic-assert": "^1.0.1",
        "minimalistic-crypto-utils": "^1.0.1"
      }
    };
  }
});

// ../../node_modules/.pnpm/bn.js@4.12.0/node_modules/bn.js/lib/bn.js
var require_bn = __commonJS({
  "../../node_modules/.pnpm/bn.js@4.12.0/node_modules/bn.js/lib/bn.js"(exports2, module2) {
    (function(module3, exports3) {
      "use strict";
      function assert(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module3 === "object") {
        module3.exports = BN;
      } else {
        exports3.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = __require("buffer").Buffer;
        }
      } catch (e2) {
      }
      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initArray = function _initArray(number, base, endian) {
        assert(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i2 = number.length - 1, j = 0; i2 >= 0; i2 -= 3) {
            w = number[i2] | number[i2 - 1] << 8 | number[i2 - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i2 = 0, j = 0; i2 < number.length; i2 += 3) {
            w = number[i2] | number[i2 + 1] << 8 | number[i2 + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string, index) {
        var c2 = string.charCodeAt(index);
        if (c2 >= 65 && c2 <= 70) {
          return c2 - 55;
        } else if (c2 >= 97 && c2 <= 102) {
          return c2 - 87;
        } else {
          return c2 - 48 & 15;
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
      BN.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i2 = number.length - 1; i2 >= start; i2 -= 2) {
            w = parseHexByte(number, start, i2) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i2 = parseLength % 2 === 0 ? start + 1 : start; i2 < number.length; i2 += 2) {
            w = parseHexByte(number, start, i2) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i2 = start; i2 < len; i2++) {
          var c2 = str.charCodeAt(i2) - 48;
          r *= mul;
          if (c2 >= 49) {
            r += c2 - 49 + 10;
          } else if (c2 >= 17) {
            r += c2 - 17 + 10;
          } else {
            r += c2;
          }
        }
        return r;
      }
      BN.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i2 = start; i2 < end; i2 += limbLen) {
          word = parseBase(number, i2, i2 + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i2, number.length, base);
          for (i2 = 0; i2 < mod; i2++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          dest.words[i2] = this.words[i2];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };
      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i2 = 0; i2 < this.length; i2++) {
            var w = this.words[i2];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            if (carry !== 0 || i2 !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i2--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c2 = this.clone();
          c2.negative = 0;
          while (!c2.isZero()) {
            var r = c2.modn(groupBase).toString(base);
            c2 = c2.idivn(groupBase);
            if (!c2.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };
      BN.prototype.toBuffer = function toBuffer2(endian, length) {
        assert(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i2;
        var q = this.clone();
        if (!littleEndian) {
          for (i2 = 0; i2 < reqLength - byteLength; i2++) {
            res[i2] = 0;
          }
          for (i2 = 0; !q.isZero(); i2++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i2 - 1] = b;
          }
        } else {
          for (i2 = 0; !q.isZero(); i2++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i2] = b;
          }
          for (; i2 < reqLength; i2++) {
            res[i2] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t2 = w;
          var r = 0;
          if (t2 >= 4096) {
            r += 13;
            t2 >>>= 13;
          }
          if (t2 >= 64) {
            r += 7;
            t2 >>>= 7;
          }
          if (t2 >= 8) {
            r += 4;
            t2 >>>= 4;
          }
          if (t2 >= 2) {
            r += 2;
            t2 >>>= 2;
          }
          return r + t2;
        };
      }
      BN.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t2 = w;
        var r = 0;
        if ((t2 & 8191) === 0) {
          r += 13;
          t2 >>>= 13;
        }
        if ((t2 & 127) === 0) {
          r += 7;
          t2 >>>= 7;
        }
        if ((t2 & 15) === 0) {
          r += 4;
          t2 >>>= 4;
        }
        if ((t2 & 3) === 0) {
          r += 2;
          t2 >>>= 2;
        }
        if ((t2 & 1) === 0) {
          r++;
        }
        return r;
      };
      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var b = this._zeroBits(this.words[i2]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i2 = 0; i2 < num.length; i2++) {
          this.words[i2] = this.words[i2] | num.words[i2];
        }
        return this.strip();
      };
      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i2 = 0; i2 < b.length; i2++) {
          this.words[i2] = this.words[i2] & num.words[i2];
        }
        this.length = b.length;
        return this.strip();
      };
      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a2;
        var b;
        if (this.length > num.length) {
          a2 = this;
          b = num;
        } else {
          a2 = num;
          b = this;
        }
        for (var i2 = 0; i2 < b.length; i2++) {
          this.words[i2] = a2.words[i2] ^ b.words[i2];
        }
        if (this !== a2) {
          for (; i2 < a2.length; i2++) {
            this.words[i2] = a2.words[i2];
          }
        }
        this.length = a2.length;
        return this.strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i2 = 0; i2 < bytesNeeded; i2++) {
          this.words[i2] = ~this.words[i2] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i2] = ~this.words[i2] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a2, b;
        if (this.length > num.length) {
          a2 = this;
          b = num;
        } else {
          a2 = num;
          b = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b.length; i2++) {
          r = (a2.words[i2] | 0) + (b.words[i2] | 0) + carry;
          this.words[i2] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i2 < a2.length; i2++) {
          r = (a2.words[i2] | 0) + carry;
          this.words[i2] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a2.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a2 !== this) {
          for (; i2 < a2.length; i2++) {
            this.words[i2] = a2.words[i2];
          }
        }
        return this;
      };
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a2, b;
        if (cmp > 0) {
          a2 = this;
          b = num;
        } else {
          a2 = num;
          b = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b.length; i2++) {
          r = (a2.words[i2] | 0) - (b.words[i2] | 0) + carry;
          carry = r >> 26;
          this.words[i2] = r & 67108863;
        }
        for (; carry !== 0 && i2 < a2.length; i2++) {
          r = (a2.words[i2] | 0) + carry;
          carry = r >> 26;
          this.words[i2] = r & 67108863;
        }
        if (carry === 0 && i2 < a2.length && a2 !== this) {
          for (; i2 < a2.length; i2++) {
            this.words[i2] = a2.words[i2];
          }
        }
        this.length = Math.max(this.length, i2);
        if (a2 !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a2 = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a2 * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i2 = k - j | 0;
            a2 = self2.words[i2] | 0;
            b = num.words[j] | 0;
            r = a2 * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a2 = self2.words;
        var b = num.words;
        var o2 = out.words;
        var c2 = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a2[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a2[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a22 = a2[2] | 0;
        var al2 = a22 & 8191;
        var ah2 = a22 >>> 13;
        var a3 = a2[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a2[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a2[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a2[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a2[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a2[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a2[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o2[0] = w0;
        o2[1] = w1;
        o2[2] = w2;
        o2[3] = w3;
        o2[4] = w4;
        o2[5] = w5;
        o2[6] = w6;
        o2[7] = w7;
        o2[8] = w8;
        o2[9] = w9;
        o2[10] = w10;
        o2[11] = w11;
        o2[12] = w12;
        o2[13] = w13;
        o2[14] = w14;
        o2[15] = w15;
        o2[16] = w16;
        o2[17] = w17;
        o2[18] = w18;
        if (c2 !== 0) {
          o2[19] = c2;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i2 = k - j;
            var a2 = self2.words[i2] | 0;
            var b = num.words[j] | 0;
            var r = a2 * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y2) {
        this.x = x;
        this.y = y2;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t2 = new Array(N);
        var l2 = BN.prototype._countBits(N) - 1;
        for (var i2 = 0; i2 < N; i2++) {
          t2[i2] = this.revBin(i2, l2, N);
        }
        return t2;
      };
      FFTM.prototype.revBin = function revBin(x, l2, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i2 = 0; i2 < l2; i2++) {
          rb |= (x & 1) << l2 - i2 - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i2 = 0; i2 < N; i2++) {
          rtws[i2] = rws[rbt[i2]];
          itws[i2] = iws[rbt[i2]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l2 = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l2);
          var itwdf = Math.sin(2 * Math.PI / l2);
          for (var p2 = 0; p2 < N; p2 += l2) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re2 = rtws[p2 + j];
              var ie2 = itws[p2 + j];
              var ro = rtws[p2 + j + s];
              var io = itws[p2 + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p2 + j] = re2 + ro;
              itws[p2 + j] = ie2 + io;
              rtws[p2 + j + s] = re2 - ro;
              itws[p2 + j + s] = ie2 - io;
              if (j !== l2) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n2, m2) {
        var N = Math.max(m2, n2) | 1;
        var odd = N & 1;
        var i2 = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i2++;
        }
        return 1 << i2 + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i2 = 0; i2 < N / 2; i2++) {
          var t2 = rws[i2];
          rws[i2] = rws[N - i2 - 1];
          rws[N - i2 - 1] = t2;
          t2 = iws[i2];
          iws[i2] = -iws[N - i2 - 1];
          iws[N - i2 - 1] = -t2;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i2 = 0; i2 < N / 2; i2++) {
          var w = Math.round(ws[2 * i2 + 1] / N) * 8192 + Math.round(ws[2 * i2] / N) + carry;
          ws[i2] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i2 = 0; i2 < len; i2++) {
          carry = carry + (ws[i2] | 0);
          rws[2 * i2] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i2 + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i2 = 2 * len; i2 < N; ++i2) {
          rws[i2] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i2 = 0; i2 < N; i2++) {
          ph[i2] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y2, out) {
        var N = 2 * this.guessLen13b(x.length, y2.length);
        var rbt = this.makeRBT(N);
        var _2 = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y2.words, y2.length, nrws, N);
        this.transform(rws, _2, rwst, iwst, N, rbt);
        this.transform(nrws, _2, nrwst, niwst, N, rbt);
        for (var i2 = 0; i2 < N; i2++) {
          var rx = rwst[i2] * nrwst[i2] - iwst[i2] * niwst[i2];
          iwst[i2] = rwst[i2] * niwst[i2] + iwst[i2] * nrwst[i2];
          rwst[i2] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _2, N, rbt);
        this.conjugate(rmws, _2, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y2.negative;
        out.length = x.length + y2.length;
        return out.strip();
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var w = (this.words[i2] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i2] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN(1);
        var res = this;
        for (var i2 = 0; i2 < w.length; i2++, res = res.sqr()) {
          if (w[i2] !== 0)
            break;
        }
        if (++i2 < w.length) {
          for (var q = res.sqr(); i2 < w.length; i2++, q = q.sqr()) {
            if (w[i2] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i2;
        if (r !== 0) {
          var carry = 0;
          for (i2 = 0; i2 < this.length; i2++) {
            var newCarry = this.words[i2] & carryMask;
            var c2 = (this.words[i2] | 0) - newCarry << r;
            this.words[i2] = c2 | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i2] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i2 = this.length - 1; i2 >= 0; i2--) {
            this.words[i2 + s] = this.words[i2];
          }
          for (i2 = 0; i2 < s; i2++) {
            this.words[i2] = 0;
          }
          this.length += s;
        }
        return this.strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h2;
        if (hint) {
          h2 = (hint - hint % 26) / 26;
        } else {
          h2 = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h2 -= s;
        h2 = Math.max(0, h2);
        if (maskedWords) {
          for (var i2 = 0; i2 < s; i2++) {
            maskedWords.words[i2] = this.words[i2];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i2 = 0; i2 < this.length; i2++) {
            this.words[i2] = this.words[i2 + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i2 = this.length - 1; i2 >= 0 && (carry !== 0 || i2 >= h2); i2--) {
          var word = this.words[i2] | 0;
          this.words[i2] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i2 = 0; i2 < this.length && this.words[i2] >= 67108864; i2++) {
          this.words[i2] -= 67108864;
          if (i2 === this.length - 1) {
            this.words[i2 + 1] = 1;
          } else {
            this.words[i2 + 1]++;
          }
        }
        this.length = Math.max(this.length, i2 + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i2 = 0; i2 < this.length && this.words[i2] < 0; i2++) {
            this.words[i2] += 67108864;
            this.words[i2 + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i2;
        this._expand(len);
        var w;
        var carry = 0;
        for (i2 = 0; i2 < num.length; i2++) {
          w = (this.words[i2 + shift] | 0) + carry;
          var right = (num.words[i2] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i2 + shift] = w & 67108863;
        }
        for (; i2 < this.length - shift; i2++) {
          w = (this.words[i2 + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i2 + shift] = w & 67108863;
        }
        if (carry === 0)
          return this.strip();
        assert(carry === -1);
        carry = 0;
        for (i2 = 0; i2 < this.length; i2++) {
          w = -(this.words[i2] | 0) + carry;
          carry = w >> 26;
          this.words[i2] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a2 = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a2.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m2 = a2.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN(null);
          q.length = m2 + 1;
          q.words = new Array(q.length);
          for (var i2 = 0; i2 < q.length; i2++) {
            q.words[i2] = 0;
          }
        }
        var diff = a2.clone()._ishlnsubmul(b, 1, m2);
        if (diff.negative === 0) {
          a2 = diff;
          if (q) {
            q.words[m2] = 1;
          }
        }
        for (var j = m2 - 1; j >= 0; j--) {
          var qj = (a2.words[b.length + j] | 0) * 67108864 + (a2.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a2._ishlnsubmul(b, qj, j);
          while (a2.negative !== 0) {
            qj--;
            a2.negative = 0;
            a2._ishlnsubmul(b, 1, j);
            if (!a2.isZero()) {
              a2.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a2.strip();
        if (mode !== "div" && shift !== 0) {
          a2.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a2
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p2 = (1 << 26) % num;
        var acc = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          acc = (p2 * acc + (this.words[i2] | 0)) % num;
        }
        return acc;
      };
      BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var w = (this.words[i2] | 0) + carry * 67108864;
          this.words[i2] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p2) {
        assert(p2.negative === 0);
        assert(!p2.isZero());
        var x = this;
        var y2 = p2.clone();
        if (x.negative !== 0) {
          x = x.umod(p2);
        } else {
          x = x.clone();
        }
        var A = new BN(1);
        var B2 = new BN(0);
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while (x.isEven() && y2.isEven()) {
          x.iushrn(1);
          y2.iushrn(1);
          ++g;
        }
        var yp = y2.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i2 = 0, im = 1; (x.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1)
            ;
          if (i2 > 0) {
            x.iushrn(i2);
            while (i2-- > 0) {
              if (A.isOdd() || B2.isOdd()) {
                A.iadd(yp);
                B2.isub(xp);
              }
              A.iushrn(1);
              B2.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y2.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y2.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y2) >= 0) {
            x.isub(y2);
            A.isub(C);
            B2.isub(D);
          } else {
            y2.isub(x);
            C.isub(A);
            D.isub(B2);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y2.iushln(g)
        };
      };
      BN.prototype._invmp = function _invmp(p2) {
        assert(p2.negative === 0);
        assert(!p2.isZero());
        var a2 = this;
        var b = p2.clone();
        if (a2.negative !== 0) {
          a2 = a2.umod(p2);
        } else {
          a2 = a2.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while (a2.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i2 = 0, im = 1; (a2.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1)
            ;
          if (i2 > 0) {
            a2.iushrn(i2);
            while (i2-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a2.cmp(b) >= 0) {
            a2.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a2);
            x2.isub(x1);
          }
        }
        var res;
        if (a2.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p2);
        }
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a2 = this.clone();
        var b = num.clone();
        a2.negative = 0;
        b.negative = 0;
        for (var shift = 0; a2.isEven() && b.isEven(); shift++) {
          a2.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a2.isEven()) {
            a2.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a2.cmp(b);
          if (r < 0) {
            var t2 = a2;
            a2 = b;
            b = t2;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a2.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i2 = s; carry !== 0 && i2 < this.length; i2++) {
          var w = this.words[i2] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i2] = w;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var a2 = this.words[i2] | 0;
          var b = num.words[i2] | 0;
          if (a2 === b)
            continue;
          if (a2 < b) {
            res = -1;
          } else if (a2 > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt2(num) {
        return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt2(num) {
        return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p2) {
        this.name = name;
        this.p = new BN(p2, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i2 = 0; i2 < outLen; i2++) {
          output.words[i2] = input.words[i2];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i2 = 10; i2 < input.length; i2++) {
          var next = input.words[i2] | 0;
          input.words[i2 - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i2 - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var w = num.words[i2] | 0;
          lo += w * 977;
          num.words[i2] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var hi = (num.words[i2] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i2] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN._prime = function prime(name) {
        if (primes[name])
          return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m2) {
        if (typeof m2 === "string") {
          var prime = BN._prime(m2);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m2.gtn(1), "modulus must be greater than 1");
          this.m = m2;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a2) {
        assert(a2.negative === 0, "red works only with positives");
        assert(a2.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a2, b) {
        assert((a2.negative | b.negative) === 0, "red works only with positives");
        assert(a2.red && a2.red === b.red, "red works only with red numbers");
      };
      Red.prototype.imod = function imod(a2) {
        if (this.prime)
          return this.prime.ireduce(a2)._forceRed(this);
        return a2.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a2) {
        if (a2.isZero()) {
          return a2.clone();
        }
        return this.m.sub(a2)._forceRed(this);
      };
      Red.prototype.add = function add(a2, b) {
        this._verify2(a2, b);
        var res = a2.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a2, b) {
        this._verify2(a2, b);
        var res = a2.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a2, b) {
        this._verify2(a2, b);
        var res = a2.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a2, b) {
        this._verify2(a2, b);
        var res = a2.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a2, num) {
        this._verify1(a2);
        return this.imod(a2.ushln(num));
      };
      Red.prototype.imul = function imul(a2, b) {
        this._verify2(a2, b);
        return this.imod(a2.imul(b));
      };
      Red.prototype.mul = function mul(a2, b) {
        this._verify2(a2, b);
        return this.imod(a2.mul(b));
      };
      Red.prototype.isqr = function isqr(a2) {
        return this.imul(a2, a2.clone());
      };
      Red.prototype.sqr = function sqr(a2) {
        return this.mul(a2, a2);
      };
      Red.prototype.sqrt = function sqrt(a2) {
        if (a2.isZero())
          return a2.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a2, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z2 = this.m.bitLength();
        z2 = new BN(2 * z2 * z2).toRed(this);
        while (this.pow(z2, lpow).cmp(nOne) !== 0) {
          z2.redIAdd(nOne);
        }
        var c2 = this.pow(z2, q);
        var r = this.pow(a2, q.addn(1).iushrn(1));
        var t2 = this.pow(a2, q);
        var m2 = s;
        while (t2.cmp(one) !== 0) {
          var tmp = t2;
          for (var i2 = 0; tmp.cmp(one) !== 0; i2++) {
            tmp = tmp.redSqr();
          }
          assert(i2 < m2);
          var b = this.pow(c2, new BN(1).iushln(m2 - i2 - 1));
          r = r.redMul(b);
          c2 = b.redSqr();
          t2 = t2.redMul(c2);
          m2 = i2;
        }
        return r;
      };
      Red.prototype.invm = function invm(a2) {
        var inv = a2._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a2, num) {
        if (num.isZero())
          return new BN(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a2.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a2;
        for (var i2 = 2; i2 < wnd.length; i2++) {
          wnd[i2] = this.mul(wnd[i2 - 1], a2);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i2 = num.length - 1; i2 >= 0; i2--) {
          var word = num.words[i2];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i2 !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m2) {
        Red.call(this, m2);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a2, b) {
        if (a2.isZero() || b.isZero()) {
          a2.words[0] = 0;
          a2.length = 1;
          return a2;
        }
        var t2 = a2.imul(b);
        var c2 = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t2.isub(c2).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a2, b) {
        if (a2.isZero() || b.isZero())
          return new BN(0)._forceRed(this);
        var t2 = a2.mul(b);
        var c2 = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t2.isub(c2).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a2) {
        var res = this.imod(a2._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module2 === "undefined" || module2, exports2);
  }
});

// ../../node_modules/.pnpm/minimalistic-assert@1.0.1/node_modules/minimalistic-assert/index.js
var require_minimalistic_assert = __commonJS({
  "../../node_modules/.pnpm/minimalistic-assert@1.0.1/node_modules/minimalistic-assert/index.js"(exports2, module2) {
    module2.exports = assert;
    function assert(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    assert.equal = function assertEqual(l2, r, msg) {
      if (l2 != r)
        throw new Error(msg || "Assertion failed: " + l2 + " != " + r);
    };
  }
});

// ../../node_modules/.pnpm/minimalistic-crypto-utils@1.0.1/node_modules/minimalistic-crypto-utils/lib/utils.js
var require_utils2 = __commonJS({
  "../../node_modules/.pnpm/minimalistic-crypto-utils@1.0.1/node_modules/minimalistic-crypto-utils/lib/utils.js"(exports2) {
    "use strict";
    var utils = exports2;
    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== "string") {
        for (var i2 = 0; i2 < msg.length; i2++)
          res[i2] = msg[i2] | 0;
        return res;
      }
      if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (var i2 = 0; i2 < msg.length; i2 += 2)
          res.push(parseInt(msg[i2] + msg[i2 + 1], 16));
      } else {
        for (var i2 = 0; i2 < msg.length; i2++) {
          var c2 = msg.charCodeAt(i2);
          var hi = c2 >> 8;
          var lo = c2 & 255;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      }
      return res;
    }
    utils.toArray = toArray;
    function zero2(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    utils.zero2 = zero2;
    function toHex(msg) {
      var res = "";
      for (var i2 = 0; i2 < msg.length; i2++)
        res += zero2(msg[i2].toString(16));
      return res;
    }
    utils.toHex = toHex;
    utils.encode = function encode(arr, enc) {
      if (enc === "hex")
        return toHex(arr);
      else
        return arr;
    };
  }
});

// ../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/utils.js
var require_utils3 = __commonJS({
  "../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/utils.js"(exports2) {
    "use strict";
    var utils = exports2;
    var BN = require_bn();
    var minAssert = require_minimalistic_assert();
    var minUtils = require_utils2();
    utils.assert = minAssert;
    utils.toArray = minUtils.toArray;
    utils.zero2 = minUtils.zero2;
    utils.toHex = minUtils.toHex;
    utils.encode = minUtils.encode;
    function getNAF(num, w, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      naf.fill(0);
      var ws = 1 << w + 1;
      var k = num.clone();
      for (var i2 = 0; i2 < naf.length; i2++) {
        var z2;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
          if (mod > (ws >> 1) - 1)
            z2 = (ws >> 1) - mod;
          else
            z2 = mod;
          k.isubn(z2);
        } else {
          z2 = 0;
        }
        naf[i2] = z2;
        k.iushrn(1);
      }
      return naf;
    }
    utils.getNAF = getNAF;
    function getJSF(k1, k2) {
      var jsf = [
        [],
        []
      ];
      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = k1.andln(7) + d1 & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          m8 = k2.andln(7) + d2 & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }
      return jsf;
    }
    utils.getJSF = getJSF;
    function cachedProperty(obj, name, computer) {
      var key = "_" + name;
      obj.prototype[name] = function cachedProperty2() {
        return this[key] !== void 0 ? this[key] : this[key] = computer.call(this);
      };
    }
    utils.cachedProperty = cachedProperty;
    function parseBytes(bytes) {
      return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
    }
    utils.parseBytes = parseBytes;
    function intFromLE(bytes) {
      return new BN(bytes, "hex", "le");
    }
    utils.intFromLE = intFromLE;
  }
});

// ../../node_modules/.pnpm/brorand@1.1.0/node_modules/brorand/index.js
var require_brorand = __commonJS({
  "../../node_modules/.pnpm/brorand@1.1.0/node_modules/brorand/index.js"(exports2, module2) {
    var r;
    module2.exports = function rand(len) {
      if (!r)
        r = new Rand(null);
      return r.generate(len);
    };
    function Rand(rand) {
      this.rand = rand;
    }
    module2.exports.Rand = Rand;
    Rand.prototype.generate = function generate(len) {
      return this._rand(len);
    };
    Rand.prototype._rand = function _rand(n2) {
      if (this.rand.getBytes)
        return this.rand.getBytes(n2);
      var res = new Uint8Array(n2);
      for (var i2 = 0; i2 < res.length; i2++)
        res[i2] = this.rand.getByte();
      return res;
    };
    if (typeof self === "object") {
      if (self.crypto && self.crypto.getRandomValues) {
        Rand.prototype._rand = function _rand(n2) {
          var arr = new Uint8Array(n2);
          self.crypto.getRandomValues(arr);
          return arr;
        };
      } else if (self.msCrypto && self.msCrypto.getRandomValues) {
        Rand.prototype._rand = function _rand(n2) {
          var arr = new Uint8Array(n2);
          self.msCrypto.getRandomValues(arr);
          return arr;
        };
      } else if (typeof window === "object") {
        Rand.prototype._rand = function() {
          throw new Error("Not implemented yet");
        };
      }
    } else {
      try {
        crypto = __require("crypto");
        if (typeof crypto.randomBytes !== "function")
          throw new Error("Not supported");
        Rand.prototype._rand = function _rand(n2) {
          return crypto.randomBytes(n2);
        };
      } catch (e2) {
      }
    }
    var crypto;
  }
});

// ../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/base.js
var require_base = __commonJS({
  "../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/base.js"(exports2, module2) {
    "use strict";
    var BN = require_bn();
    var utils = require_utils3();
    var getNAF = utils.getNAF;
    var getJSF = utils.getJSF;
    var assert = utils.assert;
    function BaseCurve(type, conf) {
      this.type = type;
      this.p = new BN(conf.p, 16);
      this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
      this.zero = new BN(0).toRed(this.red);
      this.one = new BN(1).toRed(this.red);
      this.two = new BN(2).toRed(this.red);
      this.n = conf.n && new BN(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);
      this._bitLength = this.n ? this.n.bitLength() : 0;
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    module2.exports = BaseCurve;
    BaseCurve.prototype.point = function point() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype.validate = function validate() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p2, k) {
      assert(p2.precomputed);
      var doubles = p2._getDoubles();
      var naf = getNAF(k, 1, this._bitLength);
      var I2 = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
      I2 /= 3;
      var repr = [];
      var j;
      var nafW;
      for (j = 0; j < naf.length; j += doubles.step) {
        nafW = 0;
        for (var l2 = j + doubles.step - 1; l2 >= j; l2--)
          nafW = (nafW << 1) + naf[l2];
        repr.push(nafW);
      }
      var a2 = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i2 = I2; i2 > 0; i2--) {
        for (j = 0; j < repr.length; j++) {
          nafW = repr[j];
          if (nafW === i2)
            b = b.mixedAdd(doubles.points[j]);
          else if (nafW === -i2)
            b = b.mixedAdd(doubles.points[j].neg());
        }
        a2 = a2.add(b);
      }
      return a2.toP();
    };
    BaseCurve.prototype._wnafMul = function _wnafMul(p2, k) {
      var w = 4;
      var nafPoints = p2._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;
      var naf = getNAF(k, w, this._bitLength);
      var acc = this.jpoint(null, null, null);
      for (var i2 = naf.length - 1; i2 >= 0; i2--) {
        for (var l2 = 0; i2 >= 0 && naf[i2] === 0; i2--)
          l2++;
        if (i2 >= 0)
          l2++;
        acc = acc.dblp(l2);
        if (i2 < 0)
          break;
        var z2 = naf[i2];
        assert(z2 !== 0);
        if (p2.type === "affine") {
          if (z2 > 0)
            acc = acc.mixedAdd(wnd[z2 - 1 >> 1]);
          else
            acc = acc.mixedAdd(wnd[-z2 - 1 >> 1].neg());
        } else {
          if (z2 > 0)
            acc = acc.add(wnd[z2 - 1 >> 1]);
          else
            acc = acc.add(wnd[-z2 - 1 >> 1].neg());
        }
      }
      return p2.type === "affine" ? acc.toP() : acc;
    };
    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;
      var max = 0;
      var i2;
      var j;
      var p2;
      for (i2 = 0; i2 < len; i2++) {
        p2 = points[i2];
        var nafPoints = p2._getNAFPoints(defW);
        wndWidth[i2] = nafPoints.wnd;
        wnd[i2] = nafPoints.points;
      }
      for (i2 = len - 1; i2 >= 1; i2 -= 2) {
        var a2 = i2 - 1;
        var b = i2;
        if (wndWidth[a2] !== 1 || wndWidth[b] !== 1) {
          naf[a2] = getNAF(coeffs[a2], wndWidth[a2], this._bitLength);
          naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
          max = Math.max(naf[a2].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }
        var comb = [
          points[a2],
          null,
          null,
          points[b]
        ];
        if (points[a2].y.cmp(points[b].y) === 0) {
          comb[1] = points[a2].add(points[b]);
          comb[2] = points[a2].toJ().mixedAdd(points[b].neg());
        } else if (points[a2].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a2].toJ().mixedAdd(points[b]);
          comb[2] = points[a2].add(points[b].neg());
        } else {
          comb[1] = points[a2].toJ().mixedAdd(points[b]);
          comb[2] = points[a2].toJ().mixedAdd(points[b].neg());
        }
        var index = [
          -3,
          -1,
          -5,
          -7,
          0,
          7,
          5,
          1,
          3
        ];
        var jsf = getJSF(coeffs[a2], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a2] = new Array(max);
        naf[b] = new Array(max);
        for (j = 0; j < max; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;
          naf[a2][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a2] = comb;
        }
      }
      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i2 = max; i2 >= 0; i2--) {
        var k = 0;
        while (i2 >= 0) {
          var zero = true;
          for (j = 0; j < len; j++) {
            tmp[j] = naf[j][i2] | 0;
            if (tmp[j] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k++;
          i2--;
        }
        if (i2 >= 0)
          k++;
        acc = acc.dblp(k);
        if (i2 < 0)
          break;
        for (j = 0; j < len; j++) {
          var z2 = tmp[j];
          p2;
          if (z2 === 0)
            continue;
          else if (z2 > 0)
            p2 = wnd[j][z2 - 1 >> 1];
          else if (z2 < 0)
            p2 = wnd[j][-z2 - 1 >> 1].neg();
          if (p2.type === "affine")
            acc = acc.mixedAdd(p2);
          else
            acc = acc.add(p2);
        }
      }
      for (i2 = 0; i2 < len; i2++)
        wnd[i2] = null;
      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };
    function BasePoint(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve.BasePoint = BasePoint;
    BasePoint.prototype.eq = function eq() {
      throw new Error("Not implemented");
    };
    BasePoint.prototype.validate = function validate() {
      return this.curve.validate(this);
    };
    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils.toArray(bytes, enc);
      var len = this.p.byteLength();
      if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 6)
          assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 7)
          assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
        return res;
      } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
      }
      throw new Error("Unknown point format");
    };
    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };
    BasePoint.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray("be", len);
      if (compact)
        return [this.getY().isEven() ? 2 : 3].concat(x);
      return [4].concat(x, this.getY().toArray("be", len));
    };
    BasePoint.prototype.encode = function encode(enc, compact) {
      return utils.encode(this._encode(compact), enc);
    };
    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed)
        return this;
      var precomputed = {
        doubles: null,
        naf: null,
        beta: null
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;
      return this;
    };
    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed)
        return false;
      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;
      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };
    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
      var doubles = [this];
      var acc = this;
      for (var i2 = 0; i2 < power; i2 += step) {
        for (var j = 0; j < step; j++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step,
        points: doubles
      };
    };
    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;
      var res = [this];
      var max = (1 << wnd) - 1;
      var dbl = max === 1 ? null : this.dbl();
      for (var i2 = 1; i2 < max; i2++)
        res[i2] = res[i2 - 1].add(dbl);
      return {
        wnd,
        points: res
      };
    };
    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };
    BasePoint.prototype.dblp = function dblp(k) {
      var r = this;
      for (var i2 = 0; i2 < k; i2++)
        r = r.dbl();
      return r;
    };
  }
});

// ../../node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "../../node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js"(exports2, module2) {
    if (typeof Object.create === "function") {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// ../../node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits.js
var require_inherits = __commonJS({
  "../../node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits.js"(exports2, module2) {
    try {
      util = __require("util");
      if (typeof util.inherits !== "function")
        throw "";
      module2.exports = util.inherits;
    } catch (e2) {
      module2.exports = require_inherits_browser();
    }
    var util;
  }
});

// ../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/short.js
var require_short = __commonJS({
  "../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/short.js"(exports2, module2) {
    "use strict";
    var utils = require_utils3();
    var BN = require_bn();
    var inherits = require_inherits();
    var Base = require_base();
    var assert = utils.assert;
    function ShortCurve(conf) {
      Base.call(this, "short", conf);
      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();
      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits(ShortCurve, Base);
    module2.exports = ShortCurve;
    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new BN(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new BN(conf.lambda, 16);
      } else {
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new BN(vec.a, 16),
            b: new BN(vec.b, 16)
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }
      return {
        beta,
        lambda,
        basis
      };
    };
    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      var red = num === this.p ? this.red : BN.mont(num);
      var tinv = new BN(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();
      var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [l1, l2];
    };
    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
      var u2 = lambda;
      var v = this.n.clone();
      var x1 = new BN(1);
      var y1 = new BN(0);
      var x2 = new BN(0);
      var y2 = new BN(1);
      var a0;
      var b0;
      var a1;
      var b1;
      var a2;
      var b2;
      var prevR;
      var i2 = 0;
      var r;
      var x;
      while (u2.cmpn(0) !== 0) {
        var q = v.div(u2);
        r = v.sub(q.mul(u2));
        x = x2.sub(q.mul(x1));
        var y3 = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r.neg();
          b1 = x;
        } else if (a1 && ++i2 === 2) {
          break;
        }
        prevR = r;
        v = u2;
        u2 = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y3;
      }
      a2 = r.neg();
      b2 = x;
      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }
      return [
        { a: a1, b: b1 },
        { a: a2, b: b2 }
      ];
    };
    ShortCurve.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];
      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);
      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return { k1, k2 };
    };
    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN(x, 16);
      if (!x.red)
        x = x.toRed(this.red);
      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y3 = y2.redSqrt();
      if (y3.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd = y3.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y3 = y3.redNeg();
      return this.point(x, y3);
    };
    ShortCurve.prototype.validate = function validate(point) {
      if (point.inf)
        return true;
      var x = point.x;
      var y2 = point.y;
      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y2.redSqr().redISub(rhs).cmpn(0) === 0;
    };
    ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i2 = 0; i2 < points.length; i2++) {
        var split = this._endoSplit(coeffs[i2]);
        var p2 = points[i2];
        var beta = p2._getBeta();
        if (split.k1.negative) {
          split.k1.ineg();
          p2 = p2.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }
        npoints[i2 * 2] = p2;
        npoints[i2 * 2 + 1] = beta;
        ncoeffs[i2 * 2] = split.k1;
        ncoeffs[i2 * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i2 * 2, jacobianResult);
      for (var j = 0; j < i2 * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };
    function Point(curve, x, y2, isRed) {
      Base.BasePoint.call(this, curve, "affine");
      if (x === null && y2 === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y2, 16);
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits(Point, Base.BasePoint);
    ShortCurve.prototype.point = function point(x, y2, isRed) {
      return new Point(this, x, y2, isRed);
    };
    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point.fromJSON(this, obj, red);
    };
    Point.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo)
        return;
      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;
      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p2) {
          return curve.point(p2.x.redMul(curve.endo.beta), p2.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul)
          }
        };
      }
      return beta;
    };
    Point.prototype.toJSON = function toJSON() {
      if (!this.precomputed)
        return [this.x, this.y];
      return [this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1)
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1)
        }
      }];
    };
    Point.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === "string")
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;
      function obj2point(obj2) {
        return curve.point(obj2[0], obj2[1], red);
      }
      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [res].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [res].concat(pre.naf.points.map(obj2point))
        }
      };
      return res;
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };
    Point.prototype.add = function add(p2) {
      if (this.inf)
        return p2;
      if (p2.inf)
        return this;
      if (this.eq(p2))
        return this.dbl();
      if (this.neg().eq(p2))
        return this.curve.point(null, null);
      if (this.x.cmp(p2.x) === 0)
        return this.curve.point(null, null);
      var c2 = this.y.redSub(p2.y);
      if (c2.cmpn(0) !== 0)
        c2 = c2.redMul(this.x.redSub(p2.x).redInvm());
      var nx = c2.redSqr().redISub(this.x).redISub(p2.x);
      var ny = c2.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.dbl = function dbl() {
      if (this.inf)
        return this;
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);
      var a2 = this.curve.a;
      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c2 = x2.redAdd(x2).redIAdd(x2).redIAdd(a2).redMul(dyinv);
      var nx = c2.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c2.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.getX = function getX() {
      return this.x.fromRed();
    };
    Point.prototype.getY = function getY() {
      return this.y.fromRed();
    };
    Point.prototype.mul = function mul(k) {
      k = new BN(k, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([this], [k]);
      else
        return this.curve._wnafMul(this, k);
    };
    Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };
    Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };
    Point.prototype.eq = function eq(p2) {
      return this === p2 || this.inf === p2.inf && (this.inf || this.x.cmp(p2.x) === 0 && this.y.cmp(p2.y) === 0);
    };
    Point.prototype.neg = function neg(_precompute) {
      if (this.inf)
        return this;
      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p2) {
          return p2.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate)
          }
        };
      }
      return res;
    };
    Point.prototype.toJ = function toJ() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);
      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };
    function JPoint(curve, x, y2, z2) {
      Base.BasePoint.call(this, curve, "jacobian");
      if (x === null && y2 === null && z2 === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN(0);
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y2, 16);
        this.z = new BN(z2, 16);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;
    }
    inherits(JPoint, Base.BasePoint);
    ShortCurve.prototype.jpoint = function jpoint(x, y2, z2) {
      return new JPoint(this, x, y2, z2);
    };
    JPoint.prototype.toP = function toP() {
      if (this.isInfinity())
        return this.curve.point(null, null);
      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);
      return this.curve.point(ax, ay);
    };
    JPoint.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };
    JPoint.prototype.add = function add(p2) {
      if (this.isInfinity())
        return p2;
      if (p2.isInfinity())
        return this;
      var pz2 = p2.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p2.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p2.z));
      var s2 = p2.y.redMul(z2.redMul(this.z));
      var h2 = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h2.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h22 = h2.redSqr();
      var h3 = h22.redMul(h2);
      var v = u1.redMul(h22);
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p2.z).redMul(h2);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mixedAdd = function mixedAdd(p2) {
      if (this.isInfinity())
        return p2.toJ();
      if (p2.isInfinity())
        return this;
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p2.x.redMul(z2);
      var s1 = this.y;
      var s2 = p2.y.redMul(z2).redMul(this.z);
      var h2 = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h2.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h22 = h2.redSqr();
      var h3 = h22.redMul(h2);
      var v = u1.redMul(h22);
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h2);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.dblp = function dblp(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();
      var i2;
      if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (i2 = 0; i2 < pow; i2++)
          r = r.dbl();
        return r;
      }
      var a2 = this.curve.a;
      var tinv = this.curve.tinv;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jyd = jy.redAdd(jy);
      for (i2 = 0; i2 < pow; i2++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c2 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a2.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c2.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c2.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i2 + 1 < pow)
          jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
      }
      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };
    JPoint.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;
      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };
    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m2 = xx.redAdd(xx).redIAdd(xx);
        var t2 = m2.redSqr().redISub(s).redISub(s);
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        nx = t2;
        ny = m2.redMul(s.redISub(t2)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var a2 = this.x.redSqr();
        var b = this.y.redSqr();
        var c2 = b.redSqr();
        var d2 = this.x.redAdd(b).redSqr().redISub(a2).redISub(c2);
        d2 = d2.redIAdd(d2);
        var e2 = a2.redAdd(a2).redIAdd(a2);
        var f = e2.redSqr();
        var c8 = c2.redIAdd(c2);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        nx = f.redISub(d2).redISub(d2);
        ny = e2.redMul(d2.redISub(nx)).redISub(c8);
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m2 = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        var t2 = m2.redSqr().redISub(s).redISub(s);
        nx = t2;
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m2.redMul(s.redISub(t2)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var delta = this.z.redSqr();
        var gamma = this.y.redSqr();
        var beta = this.x.redMul(gamma);
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._dbl = function _dbl() {
      var a2 = this.curve.a;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();
      var c2 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a2.redMul(jz4));
      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c2.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c2.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var zz = this.z.redSqr();
      var yyyy = yy.redSqr();
      var m2 = xx.redAdd(xx).redIAdd(xx);
      var mm = m2.redSqr();
      var e2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e2 = e2.redIAdd(e2);
      e2 = e2.redAdd(e2).redIAdd(e2);
      e2 = e2.redISub(mm);
      var ee2 = e2.redSqr();
      var t2 = yyyy.redIAdd(yyyy);
      t2 = t2.redIAdd(t2);
      t2 = t2.redIAdd(t2);
      t2 = t2.redIAdd(t2);
      var u2 = m2.redIAdd(e2).redSqr().redISub(mm).redISub(ee2).redISub(t2);
      var yyu4 = yy.redMul(u2);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee2).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      var ny = this.y.redMul(u2.redMul(t2.redISub(u2)).redISub(e2.redMul(ee2)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      var nz = this.z.redAdd(e2).redSqr().redISub(zz).redISub(ee2);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mul = function mul(k, kbase) {
      k = new BN(k, kbase);
      return this.curve._wnafMul(this, k);
    };
    JPoint.prototype.eq = function eq(p2) {
      if (p2.type === "affine")
        return this.eq(p2.toJ());
      if (this === p2)
        return true;
      var z2 = this.z.redSqr();
      var pz2 = p2.z.redSqr();
      if (this.x.redMul(pz2).redISub(p2.x.redMul(z2)).cmpn(0) !== 0)
        return false;
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p2.z);
      return this.y.redMul(pz3).redISub(p2.y.redMul(z3)).cmpn(0) === 0;
    };
    JPoint.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x.clone();
      var t2 = this.curve.redN.redMul(zs);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t2);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    JPoint.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC JPoint Infinity>";
      return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
    };
    JPoint.prototype.isInfinity = function isInfinity() {
      return this.z.cmpn(0) === 0;
    };
  }
});

// ../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/mont.js
var require_mont = __commonJS({
  "../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/mont.js"(exports2, module2) {
    "use strict";
    var BN = require_bn();
    var inherits = require_inherits();
    var Base = require_base();
    var utils = require_utils3();
    function MontCurve(conf) {
      Base.call(this, "mont", conf);
      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.i4 = new BN(4).toRed(this.red).redInvm();
      this.two = new BN(2).toRed(this.red);
      this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    inherits(MontCurve, Base);
    module2.exports = MontCurve;
    MontCurve.prototype.validate = function validate(point) {
      var x = point.normalize().x;
      var x2 = x.redSqr();
      var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
      var y2 = rhs.redSqrt();
      return y2.redSqr().cmp(rhs) === 0;
    };
    function Point(curve, x, z2) {
      Base.BasePoint.call(this, curve, "projective");
      if (x === null && z2 === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
      } else {
        this.x = new BN(x, 16);
        this.z = new BN(z2, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
      }
    }
    inherits(Point, Base.BasePoint);
    MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      return this.point(utils.toArray(bytes, enc), 1);
    };
    MontCurve.prototype.point = function point(x, z2) {
      return new Point(this, x, z2);
    };
    MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };
    Point.prototype.precompute = function precompute() {
    };
    Point.prototype._encode = function _encode() {
      return this.getX().toArray("be", this.curve.p.byteLength());
    };
    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1] || curve.one);
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.z.cmpn(0) === 0;
    };
    Point.prototype.dbl = function dbl() {
      var a2 = this.x.redAdd(this.z);
      var aa = a2.redSqr();
      var b = this.x.redSub(this.z);
      var bb = b.redSqr();
      var c2 = aa.redSub(bb);
      var nx = aa.redMul(bb);
      var nz = c2.redMul(bb.redAdd(this.curve.a24.redMul(c2)));
      return this.curve.point(nx, nz);
    };
    Point.prototype.add = function add() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point.prototype.diffAdd = function diffAdd(p2, diff) {
      var a2 = this.x.redAdd(this.z);
      var b = this.x.redSub(this.z);
      var c2 = p2.x.redAdd(p2.z);
      var d2 = p2.x.redSub(p2.z);
      var da = d2.redMul(a2);
      var cb = c2.redMul(b);
      var nx = diff.z.redMul(da.redAdd(cb).redSqr());
      var nz = diff.x.redMul(da.redISub(cb).redSqr());
      return this.curve.point(nx, nz);
    };
    Point.prototype.mul = function mul(k) {
      var t2 = k.clone();
      var a2 = this;
      var b = this.curve.point(null, null);
      var c2 = this;
      for (var bits = []; t2.cmpn(0) !== 0; t2.iushrn(1))
        bits.push(t2.andln(1));
      for (var i2 = bits.length - 1; i2 >= 0; i2--) {
        if (bits[i2] === 0) {
          a2 = a2.diffAdd(b, c2);
          b = b.dbl();
        } else {
          b = a2.diffAdd(b, c2);
          a2 = a2.dbl();
        }
      }
      return b;
    };
    Point.prototype.mulAdd = function mulAdd() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point.prototype.jumlAdd = function jumlAdd() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point.prototype.eq = function eq(other) {
      return this.getX().cmp(other.getX()) === 0;
    };
    Point.prototype.normalize = function normalize() {
      this.x = this.x.redMul(this.z.redInvm());
      this.z = this.curve.one;
      return this;
    };
    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };
  }
});

// ../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/edwards.js
var require_edwards = __commonJS({
  "../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/edwards.js"(exports2, module2) {
    "use strict";
    var utils = require_utils3();
    var BN = require_bn();
    var inherits = require_inherits();
    var Base = require_base();
    var assert = utils.assert;
    function EdwardsCurve(conf) {
      this.twisted = (conf.a | 0) !== 1;
      this.mOneA = this.twisted && (conf.a | 0) === -1;
      this.extended = this.mOneA;
      Base.call(this, "edwards", conf);
      this.a = new BN(conf.a, 16).umod(this.red.m);
      this.a = this.a.toRed(this.red);
      this.c = new BN(conf.c, 16).toRed(this.red);
      this.c2 = this.c.redSqr();
      this.d = new BN(conf.d, 16).toRed(this.red);
      this.dd = this.d.redAdd(this.d);
      assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
      this.oneC = (conf.c | 0) === 1;
    }
    inherits(EdwardsCurve, Base);
    module2.exports = EdwardsCurve;
    EdwardsCurve.prototype._mulA = function _mulA(num) {
      if (this.mOneA)
        return num.redNeg();
      else
        return this.a.redMul(num);
    };
    EdwardsCurve.prototype._mulC = function _mulC(num) {
      if (this.oneC)
        return num;
      else
        return this.c.redMul(num);
    };
    EdwardsCurve.prototype.jpoint = function jpoint(x, y2, z2, t2) {
      return this.point(x, y2, z2, t2);
    };
    EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN(x, 16);
      if (!x.red)
        x = x.toRed(this.red);
      var x2 = x.redSqr();
      var rhs = this.c2.redSub(this.a.redMul(x2));
      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
      var y2 = rhs.redMul(lhs.redInvm());
      var y3 = y2.redSqrt();
      if (y3.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd = y3.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y3 = y3.redNeg();
      return this.point(x, y3);
    };
    EdwardsCurve.prototype.pointFromY = function pointFromY(y2, odd) {
      y2 = new BN(y2, 16);
      if (!y2.red)
        y2 = y2.toRed(this.red);
      var y22 = y2.redSqr();
      var lhs = y22.redSub(this.c2);
      var rhs = y22.redMul(this.d).redMul(this.c2).redSub(this.a);
      var x2 = lhs.redMul(rhs.redInvm());
      if (x2.cmp(this.zero) === 0) {
        if (odd)
          throw new Error("invalid point");
        else
          return this.point(this.zero, y2);
      }
      var x = x2.redSqrt();
      if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      if (x.fromRed().isOdd() !== odd)
        x = x.redNeg();
      return this.point(x, y2);
    };
    EdwardsCurve.prototype.validate = function validate(point) {
      if (point.isInfinity())
        return true;
      point.normalize();
      var x2 = point.x.redSqr();
      var y2 = point.y.redSqr();
      var lhs = x2.redMul(this.a).redAdd(y2);
      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
      return lhs.cmp(rhs) === 0;
    };
    function Point(curve, x, y2, z2, t2) {
      Base.BasePoint.call(this, curve, "projective");
      if (x === null && y2 === null && z2 === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y2, 16);
        this.z = z2 ? new BN(z2, 16) : this.curve.one;
        this.t = t2 && new BN(t2, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red)
          this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        if (this.curve.extended && !this.t) {
          this.t = this.x.redMul(this.y);
          if (!this.zOne)
            this.t = this.t.redMul(this.z.redInvm());
        }
      }
    }
    inherits(Point, Base.BasePoint);
    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };
    EdwardsCurve.prototype.point = function point(x, y2, z2, t2) {
      return new Point(this, x, y2, z2, t2);
    };
    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1], obj[2]);
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
    };
    Point.prototype._extDbl = function _extDbl() {
      var a2 = this.x.redSqr();
      var b = this.y.redSqr();
      var c2 = this.z.redSqr();
      c2 = c2.redIAdd(c2);
      var d2 = this.curve._mulA(a2);
      var e2 = this.x.redAdd(this.y).redSqr().redISub(a2).redISub(b);
      var g = d2.redAdd(b);
      var f = g.redSub(c2);
      var h2 = d2.redSub(b);
      var nx = e2.redMul(f);
      var ny = g.redMul(h2);
      var nt2 = e2.redMul(h2);
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt2);
    };
    Point.prototype._projDbl = function _projDbl() {
      var b = this.x.redAdd(this.y).redSqr();
      var c2 = this.x.redSqr();
      var d2 = this.y.redSqr();
      var nx;
      var ny;
      var nz;
      var e2;
      var h2;
      var j;
      if (this.curve.twisted) {
        e2 = this.curve._mulA(c2);
        var f = e2.redAdd(d2);
        if (this.zOne) {
          nx = b.redSub(c2).redSub(d2).redMul(f.redSub(this.curve.two));
          ny = f.redMul(e2.redSub(d2));
          nz = f.redSqr().redSub(f).redSub(f);
        } else {
          h2 = this.z.redSqr();
          j = f.redSub(h2).redISub(h2);
          nx = b.redSub(c2).redISub(d2).redMul(j);
          ny = f.redMul(e2.redSub(d2));
          nz = f.redMul(j);
        }
      } else {
        e2 = c2.redAdd(d2);
        h2 = this.curve._mulC(this.z).redSqr();
        j = e2.redSub(h2).redSub(h2);
        nx = this.curve._mulC(b.redISub(e2)).redMul(j);
        ny = this.curve._mulC(e2).redMul(c2.redISub(d2));
        nz = e2.redMul(j);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;
      if (this.curve.extended)
        return this._extDbl();
      else
        return this._projDbl();
    };
    Point.prototype._extAdd = function _extAdd(p2) {
      var a2 = this.y.redSub(this.x).redMul(p2.y.redSub(p2.x));
      var b = this.y.redAdd(this.x).redMul(p2.y.redAdd(p2.x));
      var c2 = this.t.redMul(this.curve.dd).redMul(p2.t);
      var d2 = this.z.redMul(p2.z.redAdd(p2.z));
      var e2 = b.redSub(a2);
      var f = d2.redSub(c2);
      var g = d2.redAdd(c2);
      var h2 = b.redAdd(a2);
      var nx = e2.redMul(f);
      var ny = g.redMul(h2);
      var nt2 = e2.redMul(h2);
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt2);
    };
    Point.prototype._projAdd = function _projAdd(p2) {
      var a2 = this.z.redMul(p2.z);
      var b = a2.redSqr();
      var c2 = this.x.redMul(p2.x);
      var d2 = this.y.redMul(p2.y);
      var e2 = this.curve.d.redMul(c2).redMul(d2);
      var f = b.redSub(e2);
      var g = b.redAdd(e2);
      var tmp = this.x.redAdd(this.y).redMul(p2.x.redAdd(p2.y)).redISub(c2).redISub(d2);
      var nx = a2.redMul(f).redMul(tmp);
      var ny;
      var nz;
      if (this.curve.twisted) {
        ny = a2.redMul(g).redMul(d2.redSub(this.curve._mulA(c2)));
        nz = f.redMul(g);
      } else {
        ny = a2.redMul(g).redMul(d2.redSub(c2));
        nz = this.curve._mulC(f).redMul(g);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point.prototype.add = function add(p2) {
      if (this.isInfinity())
        return p2;
      if (p2.isInfinity())
        return this;
      if (this.curve.extended)
        return this._extAdd(p2);
      else
        return this._projAdd(p2);
    };
    Point.prototype.mul = function mul(k) {
      if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else
        return this.curve._wnafMul(this, k);
    };
    Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      return this.curve._wnafMulAdd(1, [this, p2], [k1, k2], 2, false);
    };
    Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      return this.curve._wnafMulAdd(1, [this, p2], [k1, k2], 2, true);
    };
    Point.prototype.normalize = function normalize() {
      if (this.zOne)
        return this;
      var zi = this.z.redInvm();
      this.x = this.x.redMul(zi);
      this.y = this.y.redMul(zi);
      if (this.t)
        this.t = this.t.redMul(zi);
      this.z = this.curve.one;
      this.zOne = true;
      return this;
    };
    Point.prototype.neg = function neg() {
      return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
    };
    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };
    Point.prototype.getY = function getY() {
      this.normalize();
      return this.y.fromRed();
    };
    Point.prototype.eq = function eq(other) {
      return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
    };
    Point.prototype.eqXToP = function eqXToP(x) {
      var rx = x.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x.clone();
      var t2 = this.curve.redN.redMul(this.z);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t2);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    Point.prototype.toP = Point.prototype.normalize;
    Point.prototype.mixedAdd = Point.prototype.add;
  }
});

// ../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/index.js
var require_curve = __commonJS({
  "../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/index.js"(exports2) {
    "use strict";
    var curve = exports2;
    curve.base = require_base();
    curve.short = require_short();
    curve.mont = require_mont();
    curve.edwards = require_edwards();
  }
});

// ../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/utils.js
var require_utils4 = __commonJS({
  "../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/utils.js"(exports2) {
    "use strict";
    var assert = require_minimalistic_assert();
    var inherits = require_inherits();
    exports2.inherits = inherits;
    function isSurrogatePair(msg, i2) {
      if ((msg.charCodeAt(i2) & 64512) !== 55296) {
        return false;
      }
      if (i2 < 0 || i2 + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i2 + 1) & 64512) === 56320;
    }
    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg === "string") {
        if (!enc) {
          var p2 = 0;
          for (var i2 = 0; i2 < msg.length; i2++) {
            var c2 = msg.charCodeAt(i2);
            if (c2 < 128) {
              res[p2++] = c2;
            } else if (c2 < 2048) {
              res[p2++] = c2 >> 6 | 192;
              res[p2++] = c2 & 63 | 128;
            } else if (isSurrogatePair(msg, i2)) {
              c2 = 65536 + ((c2 & 1023) << 10) + (msg.charCodeAt(++i2) & 1023);
              res[p2++] = c2 >> 18 | 240;
              res[p2++] = c2 >> 12 & 63 | 128;
              res[p2++] = c2 >> 6 & 63 | 128;
              res[p2++] = c2 & 63 | 128;
            } else {
              res[p2++] = c2 >> 12 | 224;
              res[p2++] = c2 >> 6 & 63 | 128;
              res[p2++] = c2 & 63 | 128;
            }
          }
        } else if (enc === "hex") {
          msg = msg.replace(/[^a-z0-9]+/ig, "");
          if (msg.length % 2 !== 0)
            msg = "0" + msg;
          for (i2 = 0; i2 < msg.length; i2 += 2)
            res.push(parseInt(msg[i2] + msg[i2 + 1], 16));
        }
      } else {
        for (i2 = 0; i2 < msg.length; i2++)
          res[i2] = msg[i2] | 0;
      }
      return res;
    }
    exports2.toArray = toArray;
    function toHex(msg) {
      var res = "";
      for (var i2 = 0; i2 < msg.length; i2++)
        res += zero2(msg[i2].toString(16));
      return res;
    }
    exports2.toHex = toHex;
    function htonl(w) {
      var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
      return res >>> 0;
    }
    exports2.htonl = htonl;
    function toHex32(msg, endian) {
      var res = "";
      for (var i2 = 0; i2 < msg.length; i2++) {
        var w = msg[i2];
        if (endian === "little")
          w = htonl(w);
        res += zero8(w.toString(16));
      }
      return res;
    }
    exports2.toHex32 = toHex32;
    function zero2(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    exports2.zero2 = zero2;
    function zero8(word) {
      if (word.length === 7)
        return "0" + word;
      else if (word.length === 6)
        return "00" + word;
      else if (word.length === 5)
        return "000" + word;
      else if (word.length === 4)
        return "0000" + word;
      else if (word.length === 3)
        return "00000" + word;
      else if (word.length === 2)
        return "000000" + word;
      else if (word.length === 1)
        return "0000000" + word;
      else
        return word;
    }
    exports2.zero8 = zero8;
    function join32(msg, start, end, endian) {
      var len = end - start;
      assert(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i2 = 0, k = start; i2 < res.length; i2++, k += 4) {
        var w;
        if (endian === "big")
          w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
        else
          w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i2] = w >>> 0;
      }
      return res;
    }
    exports2.join32 = join32;
    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i2 = 0, k = 0; i2 < msg.length; i2++, k += 4) {
        var m2 = msg[i2];
        if (endian === "big") {
          res[k] = m2 >>> 24;
          res[k + 1] = m2 >>> 16 & 255;
          res[k + 2] = m2 >>> 8 & 255;
          res[k + 3] = m2 & 255;
        } else {
          res[k + 3] = m2 >>> 24;
          res[k + 2] = m2 >>> 16 & 255;
          res[k + 1] = m2 >>> 8 & 255;
          res[k] = m2 & 255;
        }
      }
      return res;
    }
    exports2.split32 = split32;
    function rotr32(w, b) {
      return w >>> b | w << 32 - b;
    }
    exports2.rotr32 = rotr32;
    function rotl32(w, b) {
      return w << b | w >>> 32 - b;
    }
    exports2.rotl32 = rotl32;
    function sum32(a2, b) {
      return a2 + b >>> 0;
    }
    exports2.sum32 = sum32;
    function sum32_3(a2, b, c2) {
      return a2 + b + c2 >>> 0;
    }
    exports2.sum32_3 = sum32_3;
    function sum32_4(a2, b, c2, d2) {
      return a2 + b + c2 + d2 >>> 0;
    }
    exports2.sum32_4 = sum32_4;
    function sum32_5(a2, b, c2, d2, e2) {
      return a2 + b + c2 + d2 + e2 >>> 0;
    }
    exports2.sum32_5 = sum32_5;
    function sum64(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }
    exports2.sum64 = sum64;
    function sum64_hi(ah, al, bh, bl) {
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }
    exports2.sum64_hi = sum64_hi;
    function sum64_lo(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    }
    exports2.sum64_lo = sum64_lo;
    function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }
    exports2.sum64_4_hi = sum64_4_hi;
    function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    }
    exports2.sum64_4_lo = sum64_4_lo;
    function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = lo + el >>> 0;
      carry += lo < el ? 1 : 0;
      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }
    exports2.sum64_5_hi = sum64_5_hi;
    function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;
      return lo >>> 0;
    }
    exports2.sum64_5_lo = sum64_5_lo;
    function rotr64_hi(ah, al, num) {
      var r = al << 32 - num | ah >>> num;
      return r >>> 0;
    }
    exports2.rotr64_hi = rotr64_hi;
    function rotr64_lo(ah, al, num) {
      var r = ah << 32 - num | al >>> num;
      return r >>> 0;
    }
    exports2.rotr64_lo = rotr64_lo;
    function shr64_hi(ah, al, num) {
      return ah >>> num;
    }
    exports2.shr64_hi = shr64_hi;
    function shr64_lo(ah, al, num) {
      var r = ah << 32 - num | al >>> num;
      return r >>> 0;
    }
    exports2.shr64_lo = shr64_lo;
  }
});

// ../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/common.js
var require_common2 = __commonJS({
  "../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/common.js"(exports2) {
    "use strict";
    var utils = require_utils4();
    var assert = require_minimalistic_assert();
    function BlockHash() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = "big";
      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    exports2.BlockHash = BlockHash;
    BlockHash.prototype.update = function update(msg, enc) {
      msg = utils.toArray(msg, enc);
      if (!this.pending)
        this.pending = msg;
      else
        this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;
      if (this.pending.length >= this._delta8) {
        msg = this.pending;
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0)
          this.pending = null;
        msg = utils.join32(msg, 0, msg.length - r, this.endian);
        for (var i2 = 0; i2 < msg.length; i2 += this._delta32)
          this._update(msg, i2, i2 + this._delta32);
      }
      return this;
    };
    BlockHash.prototype.digest = function digest(enc) {
      this.update(this._pad());
      assert(this.pending === null);
      return this._digest(enc);
    };
    BlockHash.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - (len + this.padLength) % bytes;
      var res = new Array(k + this.padLength);
      res[0] = 128;
      for (var i2 = 1; i2 < k; i2++)
        res[i2] = 0;
      len <<= 3;
      if (this.endian === "big") {
        for (var t2 = 8; t2 < this.padLength; t2++)
          res[i2++] = 0;
        res[i2++] = 0;
        res[i2++] = 0;
        res[i2++] = 0;
        res[i2++] = 0;
        res[i2++] = len >>> 24 & 255;
        res[i2++] = len >>> 16 & 255;
        res[i2++] = len >>> 8 & 255;
        res[i2++] = len & 255;
      } else {
        res[i2++] = len & 255;
        res[i2++] = len >>> 8 & 255;
        res[i2++] = len >>> 16 & 255;
        res[i2++] = len >>> 24 & 255;
        res[i2++] = 0;
        res[i2++] = 0;
        res[i2++] = 0;
        res[i2++] = 0;
        for (t2 = 8; t2 < this.padLength; t2++)
          res[i2++] = 0;
      }
      return res;
    };
  }
});

// ../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/common.js
var require_common3 = __commonJS({
  "../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/common.js"(exports2) {
    "use strict";
    var utils = require_utils4();
    var rotr32 = utils.rotr32;
    function ft_1(s, x, y2, z2) {
      if (s === 0)
        return ch32(x, y2, z2);
      if (s === 1 || s === 3)
        return p32(x, y2, z2);
      if (s === 2)
        return maj32(x, y2, z2);
    }
    exports2.ft_1 = ft_1;
    function ch32(x, y2, z2) {
      return x & y2 ^ ~x & z2;
    }
    exports2.ch32 = ch32;
    function maj32(x, y2, z2) {
      return x & y2 ^ x & z2 ^ y2 & z2;
    }
    exports2.maj32 = maj32;
    function p32(x, y2, z2) {
      return x ^ y2 ^ z2;
    }
    exports2.p32 = p32;
    function s0_256(x) {
      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
    }
    exports2.s0_256 = s0_256;
    function s1_256(x) {
      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
    }
    exports2.s1_256 = s1_256;
    function g0_256(x) {
      return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
    }
    exports2.g0_256 = g0_256;
    function g1_256(x) {
      return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
    }
    exports2.g1_256 = g1_256;
  }
});

// ../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/1.js
var require__2 = __commonJS({
  "../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/1.js"(exports2, module2) {
    "use strict";
    var utils = require_utils4();
    var common = require_common2();
    var shaCommon = require_common3();
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_5 = utils.sum32_5;
    var ft_1 = shaCommon.ft_1;
    var BlockHash = common.BlockHash;
    var sha1_K = [
      1518500249,
      1859775393,
      2400959708,
      3395469782
    ];
    function SHA1() {
      if (!(this instanceof SHA1))
        return new SHA1();
      BlockHash.call(this);
      this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
      ];
      this.W = new Array(80);
    }
    utils.inherits(SHA1, BlockHash);
    module2.exports = SHA1;
    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;
    SHA1.prototype._update = function _update(msg, start) {
      var W2 = this.W;
      for (var i2 = 0; i2 < 16; i2++)
        W2[i2] = msg[start + i2];
      for (; i2 < W2.length; i2++)
        W2[i2] = rotl32(W2[i2 - 3] ^ W2[i2 - 8] ^ W2[i2 - 14] ^ W2[i2 - 16], 1);
      var a2 = this.h[0];
      var b = this.h[1];
      var c2 = this.h[2];
      var d2 = this.h[3];
      var e2 = this.h[4];
      for (i2 = 0; i2 < W2.length; i2++) {
        var s = ~~(i2 / 20);
        var t2 = sum32_5(rotl32(a2, 5), ft_1(s, b, c2, d2), e2, W2[i2], sha1_K[s]);
        e2 = d2;
        d2 = c2;
        c2 = rotl32(b, 30);
        b = a2;
        a2 = t2;
      }
      this.h[0] = sum32(this.h[0], a2);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c2);
      this.h[3] = sum32(this.h[3], d2);
      this.h[4] = sum32(this.h[4], e2);
    };
    SHA1.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
  }
});

// ../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/256.js
var require__3 = __commonJS({
  "../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/256.js"(exports2, module2) {
    "use strict";
    var utils = require_utils4();
    var common = require_common2();
    var shaCommon = require_common3();
    var assert = require_minimalistic_assert();
    var sum32 = utils.sum32;
    var sum32_4 = utils.sum32_4;
    var sum32_5 = utils.sum32_5;
    var ch32 = shaCommon.ch32;
    var maj32 = shaCommon.maj32;
    var s0_256 = shaCommon.s0_256;
    var s1_256 = shaCommon.s1_256;
    var g0_256 = shaCommon.g0_256;
    var g1_256 = shaCommon.g1_256;
    var BlockHash = common.BlockHash;
    var sha256_K = [
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ];
    function SHA256() {
      if (!(this instanceof SHA256))
        return new SHA256();
      BlockHash.call(this);
      this.h = [
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
      ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils.inherits(SHA256, BlockHash);
    module2.exports = SHA256;
    SHA256.blockSize = 512;
    SHA256.outSize = 256;
    SHA256.hmacStrength = 192;
    SHA256.padLength = 64;
    SHA256.prototype._update = function _update(msg, start) {
      var W2 = this.W;
      for (var i2 = 0; i2 < 16; i2++)
        W2[i2] = msg[start + i2];
      for (; i2 < W2.length; i2++)
        W2[i2] = sum32_4(g1_256(W2[i2 - 2]), W2[i2 - 7], g0_256(W2[i2 - 15]), W2[i2 - 16]);
      var a2 = this.h[0];
      var b = this.h[1];
      var c2 = this.h[2];
      var d2 = this.h[3];
      var e2 = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h2 = this.h[7];
      assert(this.k.length === W2.length);
      for (i2 = 0; i2 < W2.length; i2++) {
        var T1 = sum32_5(h2, s1_256(e2), ch32(e2, f, g), this.k[i2], W2[i2]);
        var T2 = sum32(s0_256(a2), maj32(a2, b, c2));
        h2 = g;
        g = f;
        f = e2;
        e2 = sum32(d2, T1);
        d2 = c2;
        c2 = b;
        b = a2;
        a2 = sum32(T1, T2);
      }
      this.h[0] = sum32(this.h[0], a2);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c2);
      this.h[3] = sum32(this.h[3], d2);
      this.h[4] = sum32(this.h[4], e2);
      this.h[5] = sum32(this.h[5], f);
      this.h[6] = sum32(this.h[6], g);
      this.h[7] = sum32(this.h[7], h2);
    };
    SHA256.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
  }
});

// ../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/224.js
var require__4 = __commonJS({
  "../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/224.js"(exports2, module2) {
    "use strict";
    var utils = require_utils4();
    var SHA256 = require__3();
    function SHA224() {
      if (!(this instanceof SHA224))
        return new SHA224();
      SHA256.call(this);
      this.h = [
        3238371032,
        914150663,
        812702999,
        4144912697,
        4290775857,
        1750603025,
        1694076839,
        3204075428
      ];
    }
    utils.inherits(SHA224, SHA256);
    module2.exports = SHA224;
    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;
    SHA224.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h.slice(0, 7), "big");
      else
        return utils.split32(this.h.slice(0, 7), "big");
    };
  }
});

// ../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/512.js
var require__5 = __commonJS({
  "../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/512.js"(exports2, module2) {
    "use strict";
    var utils = require_utils4();
    var common = require_common2();
    var assert = require_minimalistic_assert();
    var rotr64_hi = utils.rotr64_hi;
    var rotr64_lo = utils.rotr64_lo;
    var shr64_hi = utils.shr64_hi;
    var shr64_lo = utils.shr64_lo;
    var sum64 = utils.sum64;
    var sum64_hi = utils.sum64_hi;
    var sum64_lo = utils.sum64_lo;
    var sum64_4_hi = utils.sum64_4_hi;
    var sum64_4_lo = utils.sum64_4_lo;
    var sum64_5_hi = utils.sum64_5_hi;
    var sum64_5_lo = utils.sum64_5_lo;
    var BlockHash = common.BlockHash;
    var sha512_K = [
      1116352408,
      3609767458,
      1899447441,
      602891725,
      3049323471,
      3964484399,
      3921009573,
      2173295548,
      961987163,
      4081628472,
      1508970993,
      3053834265,
      2453635748,
      2937671579,
      2870763221,
      3664609560,
      3624381080,
      2734883394,
      310598401,
      1164996542,
      607225278,
      1323610764,
      1426881987,
      3590304994,
      1925078388,
      4068182383,
      2162078206,
      991336113,
      2614888103,
      633803317,
      3248222580,
      3479774868,
      3835390401,
      2666613458,
      4022224774,
      944711139,
      264347078,
      2341262773,
      604807628,
      2007800933,
      770255983,
      1495990901,
      1249150122,
      1856431235,
      1555081692,
      3175218132,
      1996064986,
      2198950837,
      2554220882,
      3999719339,
      2821834349,
      766784016,
      2952996808,
      2566594879,
      3210313671,
      3203337956,
      3336571891,
      1034457026,
      3584528711,
      2466948901,
      113926993,
      3758326383,
      338241895,
      168717936,
      666307205,
      1188179964,
      773529912,
      1546045734,
      1294757372,
      1522805485,
      1396182291,
      2643833823,
      1695183700,
      2343527390,
      1986661051,
      1014477480,
      2177026350,
      1206759142,
      2456956037,
      344077627,
      2730485921,
      1290863460,
      2820302411,
      3158454273,
      3259730800,
      3505952657,
      3345764771,
      106217008,
      3516065817,
      3606008344,
      3600352804,
      1432725776,
      4094571909,
      1467031594,
      275423344,
      851169720,
      430227734,
      3100823752,
      506948616,
      1363258195,
      659060556,
      3750685593,
      883997877,
      3785050280,
      958139571,
      3318307427,
      1322822218,
      3812723403,
      1537002063,
      2003034995,
      1747873779,
      3602036899,
      1955562222,
      1575990012,
      2024104815,
      1125592928,
      2227730452,
      2716904306,
      2361852424,
      442776044,
      2428436474,
      593698344,
      2756734187,
      3733110249,
      3204031479,
      2999351573,
      3329325298,
      3815920427,
      3391569614,
      3928383900,
      3515267271,
      566280711,
      3940187606,
      3454069534,
      4118630271,
      4000239992,
      116418474,
      1914138554,
      174292421,
      2731055270,
      289380356,
      3203993006,
      460393269,
      320620315,
      685471733,
      587496836,
      852142971,
      1086792851,
      1017036298,
      365543100,
      1126000580,
      2618297676,
      1288033470,
      3409855158,
      1501505948,
      4234509866,
      1607167915,
      987167468,
      1816402316,
      1246189591
    ];
    function SHA512() {
      if (!(this instanceof SHA512))
        return new SHA512();
      BlockHash.call(this);
      this.h = [
        1779033703,
        4089235720,
        3144134277,
        2227873595,
        1013904242,
        4271175723,
        2773480762,
        1595750129,
        1359893119,
        2917565137,
        2600822924,
        725511199,
        528734635,
        4215389547,
        1541459225,
        327033209
      ];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils.inherits(SHA512, BlockHash);
    module2.exports = SHA512;
    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;
    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W2 = this.W;
      for (var i2 = 0; i2 < 32; i2++)
        W2[i2] = msg[start + i2];
      for (; i2 < W2.length; i2 += 2) {
        var c0_hi = g1_512_hi(W2[i2 - 4], W2[i2 - 3]);
        var c0_lo = g1_512_lo(W2[i2 - 4], W2[i2 - 3]);
        var c1_hi = W2[i2 - 14];
        var c1_lo = W2[i2 - 13];
        var c2_hi = g0_512_hi(W2[i2 - 30], W2[i2 - 29]);
        var c2_lo = g0_512_lo(W2[i2 - 30], W2[i2 - 29]);
        var c3_hi = W2[i2 - 32];
        var c3_lo = W2[i2 - 31];
        W2[i2] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W2[i2 + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
      }
    };
    SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);
      var W2 = this.W;
      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];
      assert(this.k.length === W2.length);
      for (var i2 = 0; i2 < W2.length; i2 += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i2];
        var c3_lo = this.k[i2 + 1];
        var c4_hi = W2[i2];
        var c4_lo = W2[i2 + 1];
        var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }
      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };
    SHA512.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
    function ch64_hi(xh, xl, yh, yl, zh) {
      var r = xh & yh ^ ~xh & zh;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r = xl & yl ^ ~xl & zl;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function maj64_hi(xh, xl, yh, yl, zh) {
      var r = xh & yh ^ xh & zh ^ yh & zh;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r = xl & yl ^ xl & zl ^ yl & zl;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);
      var c2_hi = rotr64_hi(xl, xh, 7);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);
      var c2_lo = rotr64_lo(xl, xh, 7);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);
      var c2_hi = shr64_hi(xh, xl, 6);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);
      var c2_lo = shr64_lo(xh, xl, 6);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 4294967296;
      return r;
    }
  }
});

// ../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/384.js
var require__6 = __commonJS({
  "../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/384.js"(exports2, module2) {
    "use strict";
    var utils = require_utils4();
    var SHA512 = require__5();
    function SHA384() {
      if (!(this instanceof SHA384))
        return new SHA384();
      SHA512.call(this);
      this.h = [
        3418070365,
        3238371032,
        1654270250,
        914150663,
        2438529370,
        812702999,
        355462360,
        4144912697,
        1731405415,
        4290775857,
        2394180231,
        1750603025,
        3675008525,
        1694076839,
        1203062813,
        3204075428
      ];
    }
    utils.inherits(SHA384, SHA512);
    module2.exports = SHA384;
    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;
    SHA384.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h.slice(0, 12), "big");
      else
        return utils.split32(this.h.slice(0, 12), "big");
    };
  }
});

// ../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha.js
var require_sha = __commonJS({
  "../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha.js"(exports2) {
    "use strict";
    exports2.sha1 = require__2();
    exports2.sha224 = require__4();
    exports2.sha256 = require__3();
    exports2.sha384 = require__6();
    exports2.sha512 = require__5();
  }
});

// ../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/ripemd.js
var require_ripemd = __commonJS({
  "../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/ripemd.js"(exports2) {
    "use strict";
    var utils = require_utils4();
    var common = require_common2();
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_3 = utils.sum32_3;
    var sum32_4 = utils.sum32_4;
    var BlockHash = common.BlockHash;
    function RIPEMD160() {
      if (!(this instanceof RIPEMD160))
        return new RIPEMD160();
      BlockHash.call(this);
      this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
      this.endian = "little";
    }
    utils.inherits(RIPEMD160, BlockHash);
    exports2.ripemd160 = RIPEMD160;
    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;
    RIPEMD160.prototype._update = function update(msg, start) {
      var A = this.h[0];
      var B2 = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E2 = this.h[4];
      var Ah = A;
      var Bh = B2;
      var Ch = C;
      var Dh = D;
      var Eh = E2;
      for (var j = 0; j < 80; j++) {
        var T2 = sum32(rotl32(sum32_4(A, f(j, B2, C, D), msg[r[j] + start], K2(j)), s[j]), E2);
        A = E2;
        E2 = D;
        D = rotl32(C, 10);
        C = B2;
        B2 = T2;
        T2 = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T2;
      }
      T2 = sum32_3(this.h[1], C, Dh);
      this.h[1] = sum32_3(this.h[2], D, Eh);
      this.h[2] = sum32_3(this.h[3], E2, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B2, Ch);
      this.h[0] = T2;
    };
    RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "little");
      else
        return utils.split32(this.h, "little");
    };
    function f(j, x, y2, z2) {
      if (j <= 15)
        return x ^ y2 ^ z2;
      else if (j <= 31)
        return x & y2 | ~x & z2;
      else if (j <= 47)
        return (x | ~y2) ^ z2;
      else if (j <= 63)
        return x & z2 | y2 & ~z2;
      else
        return x ^ (y2 | ~z2);
    }
    function K2(j) {
      if (j <= 15)
        return 0;
      else if (j <= 31)
        return 1518500249;
      else if (j <= 47)
        return 1859775393;
      else if (j <= 63)
        return 2400959708;
      else
        return 2840853838;
    }
    function Kh(j) {
      if (j <= 15)
        return 1352829926;
      else if (j <= 31)
        return 1548603684;
      else if (j <= 47)
        return 1836072691;
      else if (j <= 63)
        return 2053994217;
      else
        return 0;
    }
    var r = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      7,
      4,
      13,
      1,
      10,
      6,
      15,
      3,
      12,
      0,
      9,
      5,
      2,
      14,
      11,
      8,
      3,
      10,
      14,
      4,
      9,
      15,
      8,
      1,
      2,
      7,
      0,
      6,
      13,
      11,
      5,
      12,
      1,
      9,
      11,
      10,
      0,
      8,
      12,
      4,
      13,
      3,
      7,
      15,
      14,
      5,
      6,
      2,
      4,
      0,
      5,
      9,
      7,
      12,
      2,
      10,
      14,
      1,
      3,
      8,
      11,
      6,
      15,
      13
    ];
    var rh = [
      5,
      14,
      7,
      0,
      9,
      2,
      11,
      4,
      13,
      6,
      15,
      8,
      1,
      10,
      3,
      12,
      6,
      11,
      3,
      7,
      0,
      13,
      5,
      10,
      14,
      15,
      8,
      12,
      4,
      9,
      1,
      2,
      15,
      5,
      1,
      3,
      7,
      14,
      6,
      9,
      11,
      8,
      12,
      2,
      10,
      0,
      4,
      13,
      8,
      6,
      4,
      1,
      3,
      11,
      15,
      0,
      5,
      12,
      2,
      13,
      9,
      7,
      10,
      14,
      12,
      15,
      10,
      4,
      1,
      5,
      8,
      7,
      6,
      2,
      13,
      14,
      0,
      3,
      9,
      11
    ];
    var s = [
      11,
      14,
      15,
      12,
      5,
      8,
      7,
      9,
      11,
      13,
      14,
      15,
      6,
      7,
      9,
      8,
      7,
      6,
      8,
      13,
      11,
      9,
      7,
      15,
      7,
      12,
      15,
      9,
      11,
      7,
      13,
      12,
      11,
      13,
      6,
      7,
      14,
      9,
      13,
      15,
      14,
      8,
      13,
      6,
      5,
      12,
      7,
      5,
      11,
      12,
      14,
      15,
      14,
      15,
      9,
      8,
      9,
      14,
      5,
      6,
      8,
      6,
      5,
      12,
      9,
      15,
      5,
      11,
      6,
      8,
      13,
      12,
      5,
      12,
      13,
      14,
      11,
      8,
      5,
      6
    ];
    var sh = [
      8,
      9,
      9,
      11,
      13,
      15,
      15,
      5,
      7,
      7,
      8,
      11,
      14,
      14,
      12,
      6,
      9,
      13,
      15,
      7,
      12,
      8,
      9,
      11,
      7,
      7,
      12,
      7,
      6,
      15,
      13,
      11,
      9,
      7,
      15,
      11,
      8,
      6,
      6,
      14,
      12,
      13,
      5,
      14,
      13,
      13,
      7,
      5,
      15,
      5,
      8,
      11,
      14,
      14,
      6,
      14,
      6,
      9,
      12,
      9,
      12,
      5,
      15,
      8,
      8,
      5,
      12,
      9,
      12,
      5,
      14,
      6,
      8,
      13,
      6,
      5,
      15,
      13,
      11,
      11
    ];
  }
});

// ../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/hmac.js
var require_hmac = __commonJS({
  "../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/hmac.js"(exports2, module2) {
    "use strict";
    var utils = require_utils4();
    var assert = require_minimalistic_assert();
    function Hmac(hash, key, enc) {
      if (!(this instanceof Hmac))
        return new Hmac(hash, key, enc);
      this.Hash = hash;
      this.blockSize = hash.blockSize / 8;
      this.outSize = hash.outSize / 8;
      this.inner = null;
      this.outer = null;
      this._init(utils.toArray(key, enc));
    }
    module2.exports = Hmac;
    Hmac.prototype._init = function init(key) {
      if (key.length > this.blockSize)
        key = new this.Hash().update(key).digest();
      assert(key.length <= this.blockSize);
      for (var i2 = key.length; i2 < this.blockSize; i2++)
        key.push(0);
      for (i2 = 0; i2 < key.length; i2++)
        key[i2] ^= 54;
      this.inner = new this.Hash().update(key);
      for (i2 = 0; i2 < key.length; i2++)
        key[i2] ^= 106;
      this.outer = new this.Hash().update(key);
    };
    Hmac.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };
    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };
  }
});

// ../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash.js
var require_hash = __commonJS({
  "../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash.js"(exports2) {
    var hash = exports2;
    hash.utils = require_utils4();
    hash.common = require_common2();
    hash.sha = require_sha();
    hash.ripemd = require_ripemd();
    hash.hmac = require_hmac();
    hash.sha1 = hash.sha.sha1;
    hash.sha256 = hash.sha.sha256;
    hash.sha224 = hash.sha.sha224;
    hash.sha384 = hash.sha.sha384;
    hash.sha512 = hash.sha.sha512;
    hash.ripemd160 = hash.ripemd.ripemd160;
  }
});

// ../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js
var require_secp256k1 = __commonJS({
  "../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js"(exports2, module2) {
    module2.exports = {
      doubles: {
        step: 4,
        points: [
          [
            "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
            "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
          ],
          [
            "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
            "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
          ],
          [
            "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
            "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
          ],
          [
            "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
            "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
          ],
          [
            "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
            "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
          ],
          [
            "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
            "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
          ],
          [
            "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
            "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
          ],
          [
            "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
            "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
          ],
          [
            "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
            "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
          ],
          [
            "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
            "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
          ],
          [
            "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
            "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
          ],
          [
            "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
            "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
          ],
          [
            "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
            "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
          ],
          [
            "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
            "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
          ],
          [
            "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
            "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
          ],
          [
            "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
            "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
          ],
          [
            "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
            "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
          ],
          [
            "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
            "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
          ],
          [
            "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
            "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
          ],
          [
            "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
            "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
          ],
          [
            "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
            "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
          ],
          [
            "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
            "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
          ],
          [
            "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
            "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
          ],
          [
            "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
            "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
          ],
          [
            "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
            "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
          ],
          [
            "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
            "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
          ],
          [
            "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
            "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
          ],
          [
            "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
            "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
          ],
          [
            "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
            "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
          ],
          [
            "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
            "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
          ],
          [
            "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
            "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
          ],
          [
            "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
            "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
          ],
          [
            "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
            "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
          ],
          [
            "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
            "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
          ],
          [
            "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
            "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
          ],
          [
            "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
            "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
          ],
          [
            "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
            "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
          ],
          [
            "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
            "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
          ],
          [
            "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
            "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
          ],
          [
            "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
            "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
          ],
          [
            "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
            "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
          ],
          [
            "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
            "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
          ],
          [
            "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
            "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
          ],
          [
            "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
            "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
          ],
          [
            "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
            "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
          ],
          [
            "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
            "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
          ],
          [
            "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
            "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
          ],
          [
            "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
            "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
          ],
          [
            "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
            "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
          ],
          [
            "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
            "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
          ],
          [
            "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
            "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
          ],
          [
            "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
            "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
          ],
          [
            "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
            "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
          ],
          [
            "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
            "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
          ],
          [
            "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
            "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
          ],
          [
            "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
            "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
          ],
          [
            "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
            "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
          ],
          [
            "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
            "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
          ],
          [
            "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
            "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
          ],
          [
            "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
            "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
          ],
          [
            "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
            "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
          ],
          [
            "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
            "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
          ],
          [
            "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
            "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
          ],
          [
            "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
            "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
          ],
          [
            "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
            "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
          ]
        ]
      },
      naf: {
        wnd: 7,
        points: [
          [
            "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
            "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
          ],
          [
            "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
            "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
          ],
          [
            "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
            "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
          ],
          [
            "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
            "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
          ],
          [
            "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
            "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
          ],
          [
            "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
            "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
          ],
          [
            "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
            "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
          ],
          [
            "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
            "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
          ],
          [
            "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
            "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
          ],
          [
            "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
            "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
          ],
          [
            "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
            "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
          ],
          [
            "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
            "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
          ],
          [
            "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
            "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
          ],
          [
            "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
            "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
          ],
          [
            "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
            "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
          ],
          [
            "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
            "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
          ],
          [
            "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
            "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
          ],
          [
            "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
            "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
          ],
          [
            "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
            "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
          ],
          [
            "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
            "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
          ],
          [
            "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
            "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
          ],
          [
            "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
            "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
          ],
          [
            "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
            "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
          ],
          [
            "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
            "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
          ],
          [
            "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
            "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
          ],
          [
            "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
            "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
          ],
          [
            "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
            "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
          ],
          [
            "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
            "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
          ],
          [
            "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
            "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
          ],
          [
            "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
            "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
          ],
          [
            "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
            "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
          ],
          [
            "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
            "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
          ],
          [
            "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
            "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
          ],
          [
            "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
            "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
          ],
          [
            "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
            "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
          ],
          [
            "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
            "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
          ],
          [
            "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
            "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
          ],
          [
            "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
            "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
          ],
          [
            "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
            "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
          ],
          [
            "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
            "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
          ],
          [
            "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
            "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
          ],
          [
            "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
            "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
          ],
          [
            "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
            "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
          ],
          [
            "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
            "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
          ],
          [
            "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
            "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
          ],
          [
            "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
            "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
          ],
          [
            "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
            "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
          ],
          [
            "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
            "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
          ],
          [
            "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
            "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
          ],
          [
            "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
            "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
          ],
          [
            "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
            "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
          ],
          [
            "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
            "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
          ],
          [
            "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
            "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
          ],
          [
            "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
            "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
          ],
          [
            "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
            "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
          ],
          [
            "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
            "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
          ],
          [
            "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
            "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
          ],
          [
            "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
            "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
          ],
          [
            "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
            "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
          ],
          [
            "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
            "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
          ],
          [
            "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
            "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
          ],
          [
            "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
            "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
          ],
          [
            "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
            "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
          ],
          [
            "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
            "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
          ],
          [
            "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
            "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
          ],
          [
            "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
            "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
          ],
          [
            "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
            "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
          ],
          [
            "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
            "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
          ],
          [
            "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
            "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
          ],
          [
            "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
            "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
          ],
          [
            "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
            "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
          ],
          [
            "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
            "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
          ],
          [
            "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
            "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
          ],
          [
            "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
            "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
          ],
          [
            "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
            "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
          ],
          [
            "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
            "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
          ],
          [
            "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
            "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
          ],
          [
            "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
            "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
          ],
          [
            "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
            "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
          ],
          [
            "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
            "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
          ],
          [
            "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
            "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
          ],
          [
            "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
            "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
          ],
          [
            "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
            "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
          ],
          [
            "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
            "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
          ],
          [
            "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
            "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
          ],
          [
            "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
            "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
          ],
          [
            "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
            "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
          ],
          [
            "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
            "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
          ],
          [
            "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
            "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
          ],
          [
            "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
            "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
          ],
          [
            "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
            "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
          ],
          [
            "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
            "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
          ],
          [
            "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
            "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
          ],
          [
            "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
            "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
          ],
          [
            "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
            "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
          ],
          [
            "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
            "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
          ],
          [
            "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
            "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
          ],
          [
            "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
            "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
          ],
          [
            "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
            "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
          ],
          [
            "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
            "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
          ],
          [
            "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
            "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
          ],
          [
            "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
            "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
          ],
          [
            "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
            "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
          ],
          [
            "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
            "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
          ],
          [
            "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
            "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
          ],
          [
            "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
            "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
          ],
          [
            "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
            "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
          ],
          [
            "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
            "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
          ],
          [
            "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
            "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
          ],
          [
            "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
            "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
          ],
          [
            "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
            "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
          ],
          [
            "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
            "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
          ],
          [
            "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
            "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
          ],
          [
            "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
            "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
          ],
          [
            "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
            "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
          ],
          [
            "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
            "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
          ],
          [
            "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
            "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
          ],
          [
            "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
            "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
          ],
          [
            "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
            "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
          ],
          [
            "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
            "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
          ],
          [
            "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
            "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
          ],
          [
            "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
            "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
          ],
          [
            "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
            "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
          ],
          [
            "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
            "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
          ],
          [
            "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
            "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
          ],
          [
            "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
            "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
          ],
          [
            "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
            "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
          ]
        ]
      }
    };
  }
});

// ../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curves.js
var require_curves = __commonJS({
  "../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curves.js"(exports2) {
    "use strict";
    var curves = exports2;
    var hash = require_hash();
    var curve = require_curve();
    var utils = require_utils3();
    var assert = utils.assert;
    function PresetCurve(options) {
      if (options.type === "short")
        this.curve = new curve.short(options);
      else if (options.type === "edwards")
        this.curve = new curve.edwards(options);
      else
        this.curve = new curve.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;
      assert(this.g.validate(), "Invalid curve");
      assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    curves.PresetCurve = PresetCurve;
    function defineCurve(name, options) {
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve2 = new PresetCurve(options);
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            value: curve2
          });
          return curve2;
        }
      });
    }
    defineCurve("p192", {
      type: "short",
      prime: "p192",
      p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
      b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
      n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
      hash: hash.sha256,
      gRed: false,
      g: [
        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
      ]
    });
    defineCurve("p224", {
      type: "short",
      prime: "p224",
      p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
      b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
      n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
      hash: hash.sha256,
      gRed: false,
      g: [
        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
      ]
    });
    defineCurve("p256", {
      type: "short",
      prime: null,
      p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
      a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
      b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
      n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
      hash: hash.sha256,
      gRed: false,
      g: [
        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
      ]
    });
    defineCurve("p384", {
      type: "short",
      prime: null,
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
      a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
      b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
      n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
      hash: hash.sha384,
      gRed: false,
      g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
      ]
    });
    defineCurve("p521", {
      type: "short",
      prime: null,
      p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
      a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
      b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
      n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
      hash: hash.sha512,
      gRed: false,
      g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
      ]
    });
    defineCurve("curve25519", {
      type: "mont",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "76d06",
      b: "1",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash.sha256,
      gRed: false,
      g: [
        "9"
      ]
    });
    defineCurve("ed25519", {
      type: "edwards",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "-1",
      c: "1",
      d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash.sha256,
      gRed: false,
      g: [
        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
        "6666666666666666666666666666666666666666666666666666666666666658"
      ]
    });
    var pre;
    try {
      pre = require_secp256k1();
    } catch (e2) {
      pre = void 0;
    }
    defineCurve("secp256k1", {
      type: "short",
      prime: "k256",
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
      a: "0",
      b: "7",
      n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
      h: "1",
      hash: hash.sha256,
      beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
      lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
      basis: [
        {
          a: "3086d221a7d46bcde86c90e49284eb15",
          b: "-e4437ed6010e88286f547fa90abfe4c3"
        },
        {
          a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
          b: "3086d221a7d46bcde86c90e49284eb15"
        }
      ],
      gRed: false,
      g: [
        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
        pre
      ]
    });
  }
});

// ../../node_modules/.pnpm/hmac-drbg@1.0.1/node_modules/hmac-drbg/lib/hmac-drbg.js
var require_hmac_drbg = __commonJS({
  "../../node_modules/.pnpm/hmac-drbg@1.0.1/node_modules/hmac-drbg/lib/hmac-drbg.js"(exports2, module2) {
    "use strict";
    var hash = require_hash();
    var utils = require_utils2();
    var assert = require_minimalistic_assert();
    function HmacDRBG(options) {
      if (!(this instanceof HmacDRBG))
        return new HmacDRBG(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;
      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;
      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;
      var entropy = utils.toArray(options.entropy, options.entropyEnc || "hex");
      var nonce = utils.toArray(options.nonce, options.nonceEnc || "hex");
      var pers = utils.toArray(options.pers, options.persEnc || "hex");
      assert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
      this._init(entropy, nonce, pers);
    }
    module2.exports = HmacDRBG;
    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);
      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i2 = 0; i2 < this.V.length; i2++) {
        this.K[i2] = 0;
        this.V[i2] = 1;
      }
      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 281474976710656;
    };
    HmacDRBG.prototype._hmac = function hmac() {
      return new hash.hmac(this.hash, this.K);
    };
    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac().update(this.V).update([0]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;
      this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
      this.V = this._hmac().update(this.V).digest();
    };
    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
      if (typeof entropyEnc !== "string") {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
      }
      entropy = utils.toArray(entropy, entropyEnc);
      add = utils.toArray(add, addEnc);
      assert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
      this._update(entropy.concat(add || []));
      this._reseed = 1;
    };
    HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error("Reseed is required");
      if (typeof enc !== "string") {
        addEnc = add;
        add = enc;
        enc = null;
      }
      if (add) {
        add = utils.toArray(add, addEnc || "hex");
        this._update(add);
      }
      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }
      var res = temp.slice(0, len);
      this._update(add);
      this._reseed++;
      return utils.encode(res, enc);
    };
  }
});

// ../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/ec/key.js
var require_key = __commonJS({
  "../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/ec/key.js"(exports2, module2) {
    "use strict";
    var BN = require_bn();
    var utils = require_utils3();
    var assert = utils.assert;
    function KeyPair(ec5, options) {
      this.ec = ec5;
      this.priv = null;
      this.pub = null;
      if (options.priv)
        this._importPrivate(options.priv, options.privEnc);
      if (options.pub)
        this._importPublic(options.pub, options.pubEnc);
    }
    module2.exports = KeyPair;
    KeyPair.fromPublic = function fromPublic(ec5, pub, enc) {
      if (pub instanceof KeyPair)
        return pub;
      return new KeyPair(ec5, {
        pub,
        pubEnc: enc
      });
    };
    KeyPair.fromPrivate = function fromPrivate(ec5, priv, enc) {
      if (priv instanceof KeyPair)
        return priv;
      return new KeyPair(ec5, {
        priv,
        privEnc: enc
      });
    };
    KeyPair.prototype.validate = function validate() {
      var pub = this.getPublic();
      if (pub.isInfinity())
        return { result: false, reason: "Invalid public key" };
      if (!pub.validate())
        return { result: false, reason: "Public key is not a point" };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: "Public key * N != O" };
      return { result: true, reason: null };
    };
    KeyPair.prototype.getPublic = function getPublic(compact, enc) {
      if (typeof compact === "string") {
        enc = compact;
        compact = null;
      }
      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);
      if (!enc)
        return this.pub;
      return this.pub.encode(enc, compact);
    };
    KeyPair.prototype.getPrivate = function getPrivate(enc) {
      if (enc === "hex")
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };
    KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
      this.priv = new BN(key, enc || 16);
      this.priv = this.priv.umod(this.ec.curve.n);
    };
    KeyPair.prototype._importPublic = function _importPublic(key, enc) {
      if (key.x || key.y) {
        if (this.ec.curve.type === "mont") {
          assert(key.x, "Need x coordinate");
        } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
          assert(key.x && key.y, "Need both x and y coordinate");
        }
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key, enc);
    };
    KeyPair.prototype.derive = function derive(pub) {
      if (!pub.validate()) {
        assert(pub.validate(), "public point not validated");
      }
      return pub.mul(this.priv).getX();
    };
    KeyPair.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };
    KeyPair.prototype.verify = function verify(msg, signature) {
      return this.ec.verify(msg, signature, this);
    };
    KeyPair.prototype.inspect = function inspect() {
      return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
    };
  }
});

// ../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/ec/signature.js
var require_signature = __commonJS({
  "../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/ec/signature.js"(exports2, module2) {
    "use strict";
    var BN = require_bn();
    var utils = require_utils3();
    var assert = utils.assert;
    function Signature(options, enc) {
      if (options instanceof Signature)
        return options;
      if (this._importDER(options, enc))
        return;
      assert(options.r && options.s, "Signature without r or s");
      this.r = new BN(options.r, 16);
      this.s = new BN(options.s, 16);
      if (options.recoveryParam === void 0)
        this.recoveryParam = null;
      else
        this.recoveryParam = options.recoveryParam;
    }
    module2.exports = Signature;
    function Position() {
      this.place = 0;
    }
    function getLength(buf, p2) {
      var initial = buf[p2.place++];
      if (!(initial & 128)) {
        return initial;
      }
      var octetLen = initial & 15;
      if (octetLen === 0 || octetLen > 4) {
        return false;
      }
      var val = 0;
      for (var i2 = 0, off = p2.place; i2 < octetLen; i2++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
      }
      if (val <= 127) {
        return false;
      }
      p2.place = off;
      return val;
    }
    function rmPadding(buf) {
      var i2 = 0;
      var len = buf.length - 1;
      while (!buf[i2] && !(buf[i2 + 1] & 128) && i2 < len) {
        i2++;
      }
      if (i2 === 0) {
        return buf;
      }
      return buf.slice(i2);
    }
    Signature.prototype._importDER = function _importDER(data, enc) {
      data = utils.toArray(data, enc);
      var p2 = new Position();
      if (data[p2.place++] !== 48) {
        return false;
      }
      var len = getLength(data, p2);
      if (len === false) {
        return false;
      }
      if (len + p2.place !== data.length) {
        return false;
      }
      if (data[p2.place++] !== 2) {
        return false;
      }
      var rlen = getLength(data, p2);
      if (rlen === false) {
        return false;
      }
      var r = data.slice(p2.place, rlen + p2.place);
      p2.place += rlen;
      if (data[p2.place++] !== 2) {
        return false;
      }
      var slen = getLength(data, p2);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p2.place) {
        return false;
      }
      var s = data.slice(p2.place, slen + p2.place);
      if (r[0] === 0) {
        if (r[1] & 128) {
          r = r.slice(1);
        } else {
          return false;
        }
      }
      if (s[0] === 0) {
        if (s[1] & 128) {
          s = s.slice(1);
        } else {
          return false;
        }
      }
      this.r = new BN(r);
      this.s = new BN(s);
      this.recoveryParam = null;
      return true;
    };
    function constructLength(arr, len) {
      if (len < 128) {
        arr.push(len);
        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 128);
      while (--octets) {
        arr.push(len >>> (octets << 3) & 255);
      }
      arr.push(len);
    }
    Signature.prototype.toDER = function toDER(enc) {
      var r = this.r.toArray();
      var s = this.s.toArray();
      if (r[0] & 128)
        r = [0].concat(r);
      if (s[0] & 128)
        s = [0].concat(s);
      r = rmPadding(r);
      s = rmPadding(s);
      while (!s[0] && !(s[1] & 128)) {
        s = s.slice(1);
      }
      var arr = [2];
      constructLength(arr, r.length);
      arr = arr.concat(r);
      arr.push(2);
      constructLength(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [48];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils.encode(res, enc);
    };
  }
});

// ../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/ec/index.js
var require_ec = __commonJS({
  "../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/ec/index.js"(exports2, module2) {
    "use strict";
    var BN = require_bn();
    var HmacDRBG = require_hmac_drbg();
    var utils = require_utils3();
    var curves = require_curves();
    var rand = require_brorand();
    var assert = utils.assert;
    var KeyPair = require_key();
    var Signature = require_signature();
    function EC(options) {
      if (!(this instanceof EC))
        return new EC(options);
      if (typeof options === "string") {
        assert(Object.prototype.hasOwnProperty.call(curves, options), "Unknown curve " + options);
        options = curves[options];
      }
      if (options instanceof curves.PresetCurve)
        options = { curve: options };
      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);
      this.hash = options.hash || options.curve.hash;
    }
    module2.exports = EC;
    EC.prototype.keyPair = function keyPair(options) {
      return new KeyPair(this, options);
    };
    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return KeyPair.fromPrivate(this, priv, enc);
    };
    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return KeyPair.fromPublic(this, pub, enc);
    };
    EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options)
        options = {};
      var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
      });
      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new BN(2));
      for (; ; ) {
        var priv = new BN(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };
    EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };
    EC.prototype.sign = function sign(msg, key, enc, options) {
      if (typeof enc === "object") {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};
      key = this.keyFromPrivate(key, enc);
      msg = this._truncateToN(new BN(msg, 16));
      var bytes = this.n.byteLength();
      var bkey = key.getPrivate().toArray("be", bytes);
      var nonce = msg.toArray("be", bytes);
      var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
      });
      var ns1 = this.n.sub(new BN(1));
      for (var iter = 0; ; iter++) {
        var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
          continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity())
          continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0)
          continue;
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0)
          continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }
        return new Signature({ r, s, recoveryParam });
      }
    };
    EC.prototype.verify = function verify(msg, signature, key, enc) {
      msg = this._truncateToN(new BN(msg, 16));
      key = this.keyFromPublic(key, enc);
      signature = new Signature(signature, "hex");
      var r = signature.r;
      var s = signature.s;
      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
        return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
        return false;
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r).umod(this.n);
      var p2;
      if (!this.curve._maxwellTrick) {
        p2 = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p2.isInfinity())
          return false;
        return p2.getX().umod(this.n).cmp(r) === 0;
      }
      p2 = this.g.jmulAdd(u1, key.getPublic(), u2);
      if (p2.isInfinity())
        return false;
      return p2.eqXToP(r);
    };
    EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
      assert((3 & j) === j, "The recovery param is more than two bits");
      signature = new Signature(signature, enc);
      var n2 = this.n;
      var e2 = new BN(msg);
      var r = signature.r;
      var s = signature.s;
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error("Unable to find sencond key candinate");
      if (isSecondKey)
        r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
      else
        r = this.curve.pointFromX(r, isYOdd);
      var rInv = signature.r.invm(n2);
      var s1 = n2.sub(e2).mul(rInv).umod(n2);
      var s2 = s.mul(rInv).umod(n2);
      return this.g.mulAdd(s1, r, s2);
    };
    EC.prototype.getKeyRecoveryParam = function(e2, signature, Q2, enc) {
      signature = new Signature(signature, enc);
      if (signature.recoveryParam !== null)
        return signature.recoveryParam;
      for (var i2 = 0; i2 < 4; i2++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e2, signature, i2);
        } catch (e3) {
          continue;
        }
        if (Qprime.eq(Q2))
          return i2;
      }
      throw new Error("Unable to find valid recovery factor");
    };
  }
});

// ../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/eddsa/key.js
var require_key2 = __commonJS({
  "../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/eddsa/key.js"(exports2, module2) {
    "use strict";
    var utils = require_utils3();
    var assert = utils.assert;
    var parseBytes = utils.parseBytes;
    var cachedProperty = utils.cachedProperty;
    function KeyPair(eddsa, params) {
      this.eddsa = eddsa;
      this._secret = parseBytes(params.secret);
      if (eddsa.isPoint(params.pub))
        this._pub = params.pub;
      else
        this._pubBytes = parseBytes(params.pub);
    }
    KeyPair.fromPublic = function fromPublic(eddsa, pub) {
      if (pub instanceof KeyPair)
        return pub;
      return new KeyPair(eddsa, { pub });
    };
    KeyPair.fromSecret = function fromSecret(eddsa, secret) {
      if (secret instanceof KeyPair)
        return secret;
      return new KeyPair(eddsa, { secret });
    };
    KeyPair.prototype.secret = function secret() {
      return this._secret;
    };
    cachedProperty(KeyPair, "pubBytes", function pubBytes() {
      return this.eddsa.encodePoint(this.pub());
    });
    cachedProperty(KeyPair, "pub", function pub() {
      if (this._pubBytes)
        return this.eddsa.decodePoint(this._pubBytes);
      return this.eddsa.g.mul(this.priv());
    });
    cachedProperty(KeyPair, "privBytes", function privBytes() {
      var eddsa = this.eddsa;
      var hash = this.hash();
      var lastIx = eddsa.encodingLength - 1;
      var a2 = hash.slice(0, eddsa.encodingLength);
      a2[0] &= 248;
      a2[lastIx] &= 127;
      a2[lastIx] |= 64;
      return a2;
    });
    cachedProperty(KeyPair, "priv", function priv() {
      return this.eddsa.decodeInt(this.privBytes());
    });
    cachedProperty(KeyPair, "hash", function hash() {
      return this.eddsa.hash().update(this.secret()).digest();
    });
    cachedProperty(KeyPair, "messagePrefix", function messagePrefix() {
      return this.hash().slice(this.eddsa.encodingLength);
    });
    KeyPair.prototype.sign = function sign(message) {
      assert(this._secret, "KeyPair can only verify");
      return this.eddsa.sign(message, this);
    };
    KeyPair.prototype.verify = function verify(message, sig) {
      return this.eddsa.verify(message, sig, this);
    };
    KeyPair.prototype.getSecret = function getSecret(enc) {
      assert(this._secret, "KeyPair is public only");
      return utils.encode(this.secret(), enc);
    };
    KeyPair.prototype.getPublic = function getPublic(enc) {
      return utils.encode(this.pubBytes(), enc);
    };
    module2.exports = KeyPair;
  }
});

// ../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/eddsa/signature.js
var require_signature2 = __commonJS({
  "../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/eddsa/signature.js"(exports2, module2) {
    "use strict";
    var BN = require_bn();
    var utils = require_utils3();
    var assert = utils.assert;
    var cachedProperty = utils.cachedProperty;
    var parseBytes = utils.parseBytes;
    function Signature(eddsa, sig) {
      this.eddsa = eddsa;
      if (typeof sig !== "object")
        sig = parseBytes(sig);
      if (Array.isArray(sig)) {
        sig = {
          R: sig.slice(0, eddsa.encodingLength),
          S: sig.slice(eddsa.encodingLength)
        };
      }
      assert(sig.R && sig.S, "Signature without R or S");
      if (eddsa.isPoint(sig.R))
        this._R = sig.R;
      if (sig.S instanceof BN)
        this._S = sig.S;
      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
    }
    cachedProperty(Signature, "S", function S() {
      return this.eddsa.decodeInt(this.Sencoded());
    });
    cachedProperty(Signature, "R", function R5() {
      return this.eddsa.decodePoint(this.Rencoded());
    });
    cachedProperty(Signature, "Rencoded", function Rencoded() {
      return this.eddsa.encodePoint(this.R());
    });
    cachedProperty(Signature, "Sencoded", function Sencoded() {
      return this.eddsa.encodeInt(this.S());
    });
    Signature.prototype.toBytes = function toBytes() {
      return this.Rencoded().concat(this.Sencoded());
    };
    Signature.prototype.toHex = function toHex() {
      return utils.encode(this.toBytes(), "hex").toUpperCase();
    };
    module2.exports = Signature;
  }
});

// ../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/eddsa/index.js
var require_eddsa = __commonJS({
  "../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/eddsa/index.js"(exports2, module2) {
    "use strict";
    var hash = require_hash();
    var curves = require_curves();
    var utils = require_utils3();
    var assert = utils.assert;
    var parseBytes = utils.parseBytes;
    var KeyPair = require_key2();
    var Signature = require_signature2();
    function EDDSA(curve) {
      assert(curve === "ed25519", "only tested with ed25519 so far");
      if (!(this instanceof EDDSA))
        return new EDDSA(curve);
      curve = curves[curve].curve;
      this.curve = curve;
      this.g = curve.g;
      this.g.precompute(curve.n.bitLength() + 1);
      this.pointClass = curve.point().constructor;
      this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
      this.hash = hash.sha512;
    }
    module2.exports = EDDSA;
    EDDSA.prototype.sign = function sign(message, secret) {
      message = parseBytes(message);
      var key = this.keyFromSecret(secret);
      var r = this.hashInt(key.messagePrefix(), message);
      var R5 = this.g.mul(r);
      var Rencoded = this.encodePoint(R5);
      var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
      var S = r.add(s_).umod(this.curve.n);
      return this.makeSignature({ R: R5, S, Rencoded });
    };
    EDDSA.prototype.verify = function verify(message, sig, pub) {
      message = parseBytes(message);
      sig = this.makeSignature(sig);
      var key = this.keyFromPublic(pub);
      var h2 = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
      var SG = this.g.mul(sig.S());
      var RplusAh = sig.R().add(key.pub().mul(h2));
      return RplusAh.eq(SG);
    };
    EDDSA.prototype.hashInt = function hashInt() {
      var hash2 = this.hash();
      for (var i2 = 0; i2 < arguments.length; i2++)
        hash2.update(arguments[i2]);
      return utils.intFromLE(hash2.digest()).umod(this.curve.n);
    };
    EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
      return KeyPair.fromPublic(this, pub);
    };
    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
      return KeyPair.fromSecret(this, secret);
    };
    EDDSA.prototype.makeSignature = function makeSignature(sig) {
      if (sig instanceof Signature)
        return sig;
      return new Signature(this, sig);
    };
    EDDSA.prototype.encodePoint = function encodePoint(point) {
      var enc = point.getY().toArray("le", this.encodingLength);
      enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
      return enc;
    };
    EDDSA.prototype.decodePoint = function decodePoint(bytes) {
      bytes = utils.parseBytes(bytes);
      var lastIx = bytes.length - 1;
      var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~128);
      var xIsOdd = (bytes[lastIx] & 128) !== 0;
      var y2 = utils.intFromLE(normed);
      return this.curve.pointFromY(y2, xIsOdd);
    };
    EDDSA.prototype.encodeInt = function encodeInt(num) {
      return num.toArray("le", this.encodingLength);
    };
    EDDSA.prototype.decodeInt = function decodeInt(bytes) {
      return utils.intFromLE(bytes);
    };
    EDDSA.prototype.isPoint = function isPoint(val) {
      return val instanceof this.pointClass;
    };
  }
});

// ../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic.js
var require_elliptic = __commonJS({
  "../../node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic.js"(exports2) {
    "use strict";
    var elliptic = exports2;
    elliptic.version = require_package2().version;
    elliptic.utils = require_utils3();
    elliptic.rand = require_brorand();
    elliptic.curve = require_curve();
    elliptic.curves = require_curves();
    elliptic.ec = require_ec();
    elliptic.eddsa = require_eddsa();
  }
});

// ../../node_modules/.pnpm/safe-buffer@5.2.1/node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS({
  "../../node_modules/.pnpm/safe-buffer@5.2.1/node_modules/safe-buffer/index.js"(exports2, module2) {
    var buffer = __require("buffer");
    var Buffer2 = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
      module2.exports = buffer;
    } else {
      copyProps(buffer, exports2);
      exports2.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer2(arg, encodingOrOffset, length);
    }
    SafeBuffer.prototype = Object.create(Buffer2.prototype);
    copyProps(Buffer2, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer2(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer2(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer2(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer.SlowBuffer(size);
    };
  }
});

// ../../node_modules/.pnpm/base-x@3.0.8/node_modules/base-x/src/index.js
var require_src3 = __commonJS({
  "../../node_modules/.pnpm/base-x@3.0.8/node_modules/base-x/src/index.js"(exports2, module2) {
    "use strict";
    var _Buffer = require_safe_buffer().Buffer;
    function base(ALPHABET) {
      if (ALPHABET.length >= 255) {
        throw new TypeError("Alphabet too long");
      }
      var BASE_MAP = new Uint8Array(256);
      for (var j = 0; j < BASE_MAP.length; j++) {
        BASE_MAP[j] = 255;
      }
      for (var i2 = 0; i2 < ALPHABET.length; i2++) {
        var x = ALPHABET.charAt(i2);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) {
          throw new TypeError(x + " is ambiguous");
        }
        BASE_MAP[xc] = i2;
      }
      var BASE = ALPHABET.length;
      var LEADER = ALPHABET.charAt(0);
      var FACTOR = Math.log(BASE) / Math.log(256);
      var iFACTOR = Math.log(256) / Math.log(BASE);
      function encode(source) {
        if (Array.isArray(source) || source instanceof Uint8Array) {
          source = _Buffer.from(source);
        }
        if (!_Buffer.isBuffer(source)) {
          throw new TypeError("Expected Buffer");
        }
        if (source.length === 0) {
          return "";
        }
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while (pbegin !== pend && source[pbegin] === 0) {
          pbegin++;
          zeroes++;
        }
        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size);
        while (pbegin !== pend) {
          var carry = source[pbegin];
          var i3 = 0;
          for (var it1 = size - 1; (carry !== 0 || i3 < length) && it1 !== -1; it1--, i3++) {
            carry += 256 * b58[it1] >>> 0;
            b58[it1] = carry % BASE >>> 0;
            carry = carry / BASE >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i3;
          pbegin++;
        }
        var it2 = size - length;
        while (it2 !== size && b58[it2] === 0) {
          it2++;
        }
        var str = LEADER.repeat(zeroes);
        for (; it2 < size; ++it2) {
          str += ALPHABET.charAt(b58[it2]);
        }
        return str;
      }
      function decodeUnsafe(source) {
        if (typeof source !== "string") {
          throw new TypeError("Expected String");
        }
        if (source.length === 0) {
          return _Buffer.alloc(0);
        }
        var psz = 0;
        if (source[psz] === " ") {
          return;
        }
        var zeroes = 0;
        var length = 0;
        while (source[psz] === LEADER) {
          zeroes++;
          psz++;
        }
        var size = (source.length - psz) * FACTOR + 1 >>> 0;
        var b256 = new Uint8Array(size);
        while (source[psz]) {
          var carry = BASE_MAP[source.charCodeAt(psz)];
          if (carry === 255) {
            return;
          }
          var i3 = 0;
          for (var it3 = size - 1; (carry !== 0 || i3 < length) && it3 !== -1; it3--, i3++) {
            carry += BASE * b256[it3] >>> 0;
            b256[it3] = carry % 256 >>> 0;
            carry = carry / 256 >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i3;
          psz++;
        }
        if (source[psz] === " ") {
          return;
        }
        var it4 = size - length;
        while (it4 !== size && b256[it4] === 0) {
          it4++;
        }
        var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
        vch.fill(0, 0, zeroes);
        var j2 = zeroes;
        while (it4 !== size) {
          vch[j2++] = b256[it4++];
        }
        return vch;
      }
      function decode(string) {
        var buffer = decodeUnsafe(string);
        if (buffer) {
          return buffer;
        }
        throw new Error("Non-base" + BASE + " character");
      }
      return {
        encode,
        decodeUnsafe,
        decode
      };
    }
    module2.exports = base;
  }
});

// ../../node_modules/.pnpm/bs58@4.0.1/node_modules/bs58/index.js
var require_bs58 = __commonJS({
  "../../node_modules/.pnpm/bs58@4.0.1/node_modules/bs58/index.js"(exports2, module2) {
    var basex = require_src3();
    var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    module2.exports = basex(ALPHABET);
  }
});

// ../../node_modules/.pnpm/bn.js@5.2.0/node_modules/bn.js/lib/bn.js
var require_bn2 = __commonJS({
  "../../node_modules/.pnpm/bn.js@5.2.0/node_modules/bn.js/lib/bn.js"(exports2, module2) {
    (function(module3, exports3) {
      "use strict";
      function assert(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module3 === "object") {
        module3.exports = BN;
      } else {
        exports3.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = __require("buffer").Buffer;
        }
      } catch (e2) {
      }
      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initArray = function _initArray(number, base, endian) {
        assert(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i2 = number.length - 1, j = 0; i2 >= 0; i2 -= 3) {
            w = number[i2] | number[i2 - 1] << 8 | number[i2 - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i2 = 0, j = 0; i2 < number.length; i2 += 3) {
            w = number[i2] | number[i2 + 1] << 8 | number[i2 + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index) {
        var c2 = string.charCodeAt(index);
        if (c2 >= 48 && c2 <= 57) {
          return c2 - 48;
        } else if (c2 >= 65 && c2 <= 70) {
          return c2 - 55;
        } else if (c2 >= 97 && c2 <= 102) {
          return c2 - 87;
        } else {
          assert(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
      BN.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i2 = number.length - 1; i2 >= start; i2 -= 2) {
            w = parseHexByte(number, start, i2) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i2 = parseLength % 2 === 0 ? start + 1 : start; i2 < number.length; i2 += 2) {
            w = parseHexByte(number, start, i2) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i2 = start; i2 < len; i2++) {
          var c2 = str.charCodeAt(i2) - 48;
          r *= mul;
          if (c2 >= 49) {
            b = c2 - 49 + 10;
          } else if (c2 >= 17) {
            b = c2 - 17 + 10;
          } else {
            b = c2;
          }
          assert(c2 >= 0 && b < mul, "Invalid character");
          r += b;
        }
        return r;
      }
      BN.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i2 = start; i2 < end; i2 += limbLen) {
          word = parseBase(number, i2, i2 + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i2, number.length, base);
          for (i2 = 0; i2 < mod; i2++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          dest.words[i2] = this.words[i2];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };
      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
        } catch (e2) {
          BN.prototype.inspect = inspect;
        }
      } else {
        BN.prototype.inspect = inspect;
      }
      function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i2 = 0; i2 < this.length; i2++) {
            var w = this.words[i2];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            if (carry !== 0 || i2 !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i2--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c2 = this.clone();
          c2.negative = 0;
          while (!c2.isZero()) {
            var r = c2.modrn(groupBase).toString(base);
            c2 = c2.idivn(groupBase);
            if (!c2.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
      };
      if (Buffer2) {
        BN.prototype.toBuffer = function toBuffer2(endian, length) {
          return this.toArrayLike(Buffer2, endian, length);
        };
      }
      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i2 = 0, shift = 0; i2 < this.length; i2++) {
          var word = this.words[i2] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i2 = 0, shift = 0; i2 < this.length; i2++) {
          var word = this.words[i2] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t2 = w;
          var r = 0;
          if (t2 >= 4096) {
            r += 13;
            t2 >>>= 13;
          }
          if (t2 >= 64) {
            r += 7;
            t2 >>>= 7;
          }
          if (t2 >= 8) {
            r += 4;
            t2 >>>= 4;
          }
          if (t2 >= 2) {
            r += 2;
            t2 >>>= 2;
          }
          return r + t2;
        };
      }
      BN.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t2 = w;
        var r = 0;
        if ((t2 & 8191) === 0) {
          r += 13;
          t2 >>>= 13;
        }
        if ((t2 & 127) === 0) {
          r += 7;
          t2 >>>= 7;
        }
        if ((t2 & 15) === 0) {
          r += 4;
          t2 >>>= 4;
        }
        if ((t2 & 3) === 0) {
          r += 2;
          t2 >>>= 2;
        }
        if ((t2 & 1) === 0) {
          r++;
        }
        return r;
      };
      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var b = this._zeroBits(this.words[i2]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i2 = 0; i2 < num.length; i2++) {
          this.words[i2] = this.words[i2] | num.words[i2];
        }
        return this._strip();
      };
      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i2 = 0; i2 < b.length; i2++) {
          this.words[i2] = this.words[i2] & num.words[i2];
        }
        this.length = b.length;
        return this._strip();
      };
      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a2;
        var b;
        if (this.length > num.length) {
          a2 = this;
          b = num;
        } else {
          a2 = num;
          b = this;
        }
        for (var i2 = 0; i2 < b.length; i2++) {
          this.words[i2] = a2.words[i2] ^ b.words[i2];
        }
        if (this !== a2) {
          for (; i2 < a2.length; i2++) {
            this.words[i2] = a2.words[i2];
          }
        }
        this.length = a2.length;
        return this._strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i2 = 0; i2 < bytesNeeded; i2++) {
          this.words[i2] = ~this.words[i2] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i2] = ~this.words[i2] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a2, b;
        if (this.length > num.length) {
          a2 = this;
          b = num;
        } else {
          a2 = num;
          b = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b.length; i2++) {
          r = (a2.words[i2] | 0) + (b.words[i2] | 0) + carry;
          this.words[i2] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i2 < a2.length; i2++) {
          r = (a2.words[i2] | 0) + carry;
          this.words[i2] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a2.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a2 !== this) {
          for (; i2 < a2.length; i2++) {
            this.words[i2] = a2.words[i2];
          }
        }
        return this;
      };
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a2, b;
        if (cmp > 0) {
          a2 = this;
          b = num;
        } else {
          a2 = num;
          b = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b.length; i2++) {
          r = (a2.words[i2] | 0) - (b.words[i2] | 0) + carry;
          carry = r >> 26;
          this.words[i2] = r & 67108863;
        }
        for (; carry !== 0 && i2 < a2.length; i2++) {
          r = (a2.words[i2] | 0) + carry;
          carry = r >> 26;
          this.words[i2] = r & 67108863;
        }
        if (carry === 0 && i2 < a2.length && a2 !== this) {
          for (; i2 < a2.length; i2++) {
            this.words[i2] = a2.words[i2];
          }
        }
        this.length = Math.max(this.length, i2);
        if (a2 !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a2 = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a2 * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i2 = k - j | 0;
            a2 = self2.words[i2] | 0;
            b = num.words[j] | 0;
            r = a2 * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a2 = self2.words;
        var b = num.words;
        var o2 = out.words;
        var c2 = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a2[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a2[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a22 = a2[2] | 0;
        var al2 = a22 & 8191;
        var ah2 = a22 >>> 13;
        var a3 = a2[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a2[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a2[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a2[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a2[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a2[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a2[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o2[0] = w0;
        o2[1] = w1;
        o2[2] = w2;
        o2[3] = w3;
        o2[4] = w4;
        o2[5] = w5;
        o2[6] = w6;
        o2[7] = w7;
        o2[8] = w8;
        o2[9] = w9;
        o2[10] = w10;
        o2[11] = w11;
        o2[12] = w12;
        o2[13] = w13;
        o2[14] = w14;
        o2[15] = w15;
        o2[16] = w16;
        o2[17] = w17;
        o2[18] = w18;
        if (c2 !== 0) {
          o2[19] = c2;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i2 = k - j;
            var a2 = self2.words[i2] | 0;
            var b = num.words[j] | 0;
            var r = a2 * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y2) {
        this.x = x;
        this.y = y2;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t2 = new Array(N);
        var l2 = BN.prototype._countBits(N) - 1;
        for (var i2 = 0; i2 < N; i2++) {
          t2[i2] = this.revBin(i2, l2, N);
        }
        return t2;
      };
      FFTM.prototype.revBin = function revBin(x, l2, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i2 = 0; i2 < l2; i2++) {
          rb |= (x & 1) << l2 - i2 - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i2 = 0; i2 < N; i2++) {
          rtws[i2] = rws[rbt[i2]];
          itws[i2] = iws[rbt[i2]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l2 = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l2);
          var itwdf = Math.sin(2 * Math.PI / l2);
          for (var p2 = 0; p2 < N; p2 += l2) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re2 = rtws[p2 + j];
              var ie2 = itws[p2 + j];
              var ro = rtws[p2 + j + s];
              var io = itws[p2 + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p2 + j] = re2 + ro;
              itws[p2 + j] = ie2 + io;
              rtws[p2 + j + s] = re2 - ro;
              itws[p2 + j + s] = ie2 - io;
              if (j !== l2) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n2, m2) {
        var N = Math.max(m2, n2) | 1;
        var odd = N & 1;
        var i2 = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i2++;
        }
        return 1 << i2 + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i2 = 0; i2 < N / 2; i2++) {
          var t2 = rws[i2];
          rws[i2] = rws[N - i2 - 1];
          rws[N - i2 - 1] = t2;
          t2 = iws[i2];
          iws[i2] = -iws[N - i2 - 1];
          iws[N - i2 - 1] = -t2;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i2 = 0; i2 < N / 2; i2++) {
          var w = Math.round(ws[2 * i2 + 1] / N) * 8192 + Math.round(ws[2 * i2] / N) + carry;
          ws[i2] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i2 = 0; i2 < len; i2++) {
          carry = carry + (ws[i2] | 0);
          rws[2 * i2] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i2 + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i2 = 2 * len; i2 < N; ++i2) {
          rws[i2] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i2 = 0; i2 < N; i2++) {
          ph[i2] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y2, out) {
        var N = 2 * this.guessLen13b(x.length, y2.length);
        var rbt = this.makeRBT(N);
        var _2 = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y2.words, y2.length, nrws, N);
        this.transform(rws, _2, rwst, iwst, N, rbt);
        this.transform(nrws, _2, nrwst, niwst, N, rbt);
        for (var i2 = 0; i2 < N; i2++) {
          var rx = rwst[i2] * nrwst[i2] - iwst[i2] * niwst[i2];
          iwst[i2] = rwst[i2] * niwst[i2] + iwst[i2] * nrwst[i2];
          rwst[i2] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _2, N, rbt);
        this.conjugate(rmws, _2, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y2.negative;
        out.length = x.length + y2.length;
        return out._strip();
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var w = (this.words[i2] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i2] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN(1);
        var res = this;
        for (var i2 = 0; i2 < w.length; i2++, res = res.sqr()) {
          if (w[i2] !== 0)
            break;
        }
        if (++i2 < w.length) {
          for (var q = res.sqr(); i2 < w.length; i2++, q = q.sqr()) {
            if (w[i2] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i2;
        if (r !== 0) {
          var carry = 0;
          for (i2 = 0; i2 < this.length; i2++) {
            var newCarry = this.words[i2] & carryMask;
            var c2 = (this.words[i2] | 0) - newCarry << r;
            this.words[i2] = c2 | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i2] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i2 = this.length - 1; i2 >= 0; i2--) {
            this.words[i2 + s] = this.words[i2];
          }
          for (i2 = 0; i2 < s; i2++) {
            this.words[i2] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h2;
        if (hint) {
          h2 = (hint - hint % 26) / 26;
        } else {
          h2 = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h2 -= s;
        h2 = Math.max(0, h2);
        if (maskedWords) {
          for (var i2 = 0; i2 < s; i2++) {
            maskedWords.words[i2] = this.words[i2];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i2 = 0; i2 < this.length; i2++) {
            this.words[i2] = this.words[i2 + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i2 = this.length - 1; i2 >= 0 && (carry !== 0 || i2 >= h2); i2--) {
          var word = this.words[i2] | 0;
          this.words[i2] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i2 = 0; i2 < this.length && this.words[i2] >= 67108864; i2++) {
          this.words[i2] -= 67108864;
          if (i2 === this.length - 1) {
            this.words[i2 + 1] = 1;
          } else {
            this.words[i2 + 1]++;
          }
        }
        this.length = Math.max(this.length, i2 + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i2 = 0; i2 < this.length && this.words[i2] < 0; i2++) {
            this.words[i2] += 67108864;
            this.words[i2 + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i2;
        this._expand(len);
        var w;
        var carry = 0;
        for (i2 = 0; i2 < num.length; i2++) {
          w = (this.words[i2 + shift] | 0) + carry;
          var right = (num.words[i2] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i2 + shift] = w & 67108863;
        }
        for (; i2 < this.length - shift; i2++) {
          w = (this.words[i2 + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i2 + shift] = w & 67108863;
        }
        if (carry === 0)
          return this._strip();
        assert(carry === -1);
        carry = 0;
        for (i2 = 0; i2 < this.length; i2++) {
          w = -(this.words[i2] | 0) + carry;
          carry = w >> 26;
          this.words[i2] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a2 = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a2.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m2 = a2.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN(null);
          q.length = m2 + 1;
          q.words = new Array(q.length);
          for (var i2 = 0; i2 < q.length; i2++) {
            q.words[i2] = 0;
          }
        }
        var diff = a2.clone()._ishlnsubmul(b, 1, m2);
        if (diff.negative === 0) {
          a2 = diff;
          if (q) {
            q.words[m2] = 1;
          }
        }
        for (var j = m2 - 1; j >= 0; j--) {
          var qj = (a2.words[b.length + j] | 0) * 67108864 + (a2.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a2._ishlnsubmul(b, qj, j);
          while (a2.negative !== 0) {
            qj--;
            a2.negative = 0;
            a2._ishlnsubmul(b, 1, j);
            if (!a2.isZero()) {
              a2.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a2._strip();
        if (mode !== "div" && shift !== 0) {
          a2.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a2
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert(num <= 67108863);
        var p2 = (1 << 26) % num;
        var acc = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          acc = (p2 * acc + (this.words[i2] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert(num <= 67108863);
        var carry = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var w = (this.words[i2] | 0) + carry * 67108864;
          this.words[i2] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p2) {
        assert(p2.negative === 0);
        assert(!p2.isZero());
        var x = this;
        var y2 = p2.clone();
        if (x.negative !== 0) {
          x = x.umod(p2);
        } else {
          x = x.clone();
        }
        var A = new BN(1);
        var B2 = new BN(0);
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while (x.isEven() && y2.isEven()) {
          x.iushrn(1);
          y2.iushrn(1);
          ++g;
        }
        var yp = y2.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i2 = 0, im = 1; (x.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1)
            ;
          if (i2 > 0) {
            x.iushrn(i2);
            while (i2-- > 0) {
              if (A.isOdd() || B2.isOdd()) {
                A.iadd(yp);
                B2.isub(xp);
              }
              A.iushrn(1);
              B2.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y2.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y2.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y2) >= 0) {
            x.isub(y2);
            A.isub(C);
            B2.isub(D);
          } else {
            y2.isub(x);
            C.isub(A);
            D.isub(B2);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y2.iushln(g)
        };
      };
      BN.prototype._invmp = function _invmp(p2) {
        assert(p2.negative === 0);
        assert(!p2.isZero());
        var a2 = this;
        var b = p2.clone();
        if (a2.negative !== 0) {
          a2 = a2.umod(p2);
        } else {
          a2 = a2.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while (a2.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i2 = 0, im = 1; (a2.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1)
            ;
          if (i2 > 0) {
            a2.iushrn(i2);
            while (i2-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a2.cmp(b) >= 0) {
            a2.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a2);
            x2.isub(x1);
          }
        }
        var res;
        if (a2.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p2);
        }
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a2 = this.clone();
        var b = num.clone();
        a2.negative = 0;
        b.negative = 0;
        for (var shift = 0; a2.isEven() && b.isEven(); shift++) {
          a2.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a2.isEven()) {
            a2.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a2.cmp(b);
          if (r < 0) {
            var t2 = a2;
            a2 = b;
            b = t2;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a2.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i2 = s; carry !== 0 && i2 < this.length; i2++) {
          var w = this.words[i2] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i2] = w;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var a2 = this.words[i2] | 0;
          var b = num.words[i2] | 0;
          if (a2 === b)
            continue;
          if (a2 < b) {
            res = -1;
          } else if (a2 > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt2(num) {
        return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt2(num) {
        return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p2) {
        this.name = name;
        this.p = new BN(p2, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i2 = 0; i2 < outLen; i2++) {
          output.words[i2] = input.words[i2];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i2 = 10; i2 < input.length; i2++) {
          var next = input.words[i2] | 0;
          input.words[i2 - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i2 - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var w = num.words[i2] | 0;
          lo += w * 977;
          num.words[i2] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var hi = (num.words[i2] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i2] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN._prime = function prime(name) {
        if (primes[name])
          return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m2) {
        if (typeof m2 === "string") {
          var prime = BN._prime(m2);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m2.gtn(1), "modulus must be greater than 1");
          this.m = m2;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a2) {
        assert(a2.negative === 0, "red works only with positives");
        assert(a2.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a2, b) {
        assert((a2.negative | b.negative) === 0, "red works only with positives");
        assert(a2.red && a2.red === b.red, "red works only with red numbers");
      };
      Red.prototype.imod = function imod(a2) {
        if (this.prime)
          return this.prime.ireduce(a2)._forceRed(this);
        move(a2, a2.umod(this.m)._forceRed(this));
        return a2;
      };
      Red.prototype.neg = function neg(a2) {
        if (a2.isZero()) {
          return a2.clone();
        }
        return this.m.sub(a2)._forceRed(this);
      };
      Red.prototype.add = function add(a2, b) {
        this._verify2(a2, b);
        var res = a2.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a2, b) {
        this._verify2(a2, b);
        var res = a2.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a2, b) {
        this._verify2(a2, b);
        var res = a2.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a2, b) {
        this._verify2(a2, b);
        var res = a2.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a2, num) {
        this._verify1(a2);
        return this.imod(a2.ushln(num));
      };
      Red.prototype.imul = function imul(a2, b) {
        this._verify2(a2, b);
        return this.imod(a2.imul(b));
      };
      Red.prototype.mul = function mul(a2, b) {
        this._verify2(a2, b);
        return this.imod(a2.mul(b));
      };
      Red.prototype.isqr = function isqr(a2) {
        return this.imul(a2, a2.clone());
      };
      Red.prototype.sqr = function sqr(a2) {
        return this.mul(a2, a2);
      };
      Red.prototype.sqrt = function sqrt(a2) {
        if (a2.isZero())
          return a2.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a2, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z2 = this.m.bitLength();
        z2 = new BN(2 * z2 * z2).toRed(this);
        while (this.pow(z2, lpow).cmp(nOne) !== 0) {
          z2.redIAdd(nOne);
        }
        var c2 = this.pow(z2, q);
        var r = this.pow(a2, q.addn(1).iushrn(1));
        var t2 = this.pow(a2, q);
        var m2 = s;
        while (t2.cmp(one) !== 0) {
          var tmp = t2;
          for (var i2 = 0; tmp.cmp(one) !== 0; i2++) {
            tmp = tmp.redSqr();
          }
          assert(i2 < m2);
          var b = this.pow(c2, new BN(1).iushln(m2 - i2 - 1));
          r = r.redMul(b);
          c2 = b.redSqr();
          t2 = t2.redMul(c2);
          m2 = i2;
        }
        return r;
      };
      Red.prototype.invm = function invm(a2) {
        var inv = a2._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a2, num) {
        if (num.isZero())
          return new BN(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a2.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a2;
        for (var i2 = 2; i2 < wnd.length; i2++) {
          wnd[i2] = this.mul(wnd[i2 - 1], a2);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i2 = num.length - 1; i2 >= 0; i2--) {
          var word = num.words[i2];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i2 !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m2) {
        Red.call(this, m2);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a2, b) {
        if (a2.isZero() || b.isZero()) {
          a2.words[0] = 0;
          a2.length = 1;
          return a2;
        }
        var t2 = a2.imul(b);
        var c2 = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t2.isub(c2).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a2, b) {
        if (a2.isZero() || b.isZero())
          return new BN(0)._forceRed(this);
        var t2 = a2.mul(b);
        var c2 = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t2.isub(c2).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a2) {
        var res = this.imod(a2._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module2 === "undefined" || module2, exports2);
  }
});

// ../../node_modules/.pnpm/ethereumjs-util@7.1.0/node_modules/ethereumjs-util/dist/constants.js
var require_constants = __commonJS({
  "../../node_modules/.pnpm/ethereumjs-util@7.1.0/node_modules/ethereumjs-util/dist/constants.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.KECCAK256_RLP = exports2.KECCAK256_RLP_S = exports2.KECCAK256_RLP_ARRAY = exports2.KECCAK256_RLP_ARRAY_S = exports2.KECCAK256_NULL = exports2.KECCAK256_NULL_S = exports2.TWO_POW256 = exports2.MAX_INTEGER = void 0;
    var Buffer2 = __require("buffer").Buffer;
    var bn_js_1 = __importDefault(require_bn2());
    exports2.MAX_INTEGER = new bn_js_1.default("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16);
    exports2.TWO_POW256 = new bn_js_1.default("10000000000000000000000000000000000000000000000000000000000000000", 16);
    exports2.KECCAK256_NULL_S = "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
    exports2.KECCAK256_NULL = Buffer2.from(exports2.KECCAK256_NULL_S, "hex");
    exports2.KECCAK256_RLP_ARRAY_S = "1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347";
    exports2.KECCAK256_RLP_ARRAY = Buffer2.from(exports2.KECCAK256_RLP_ARRAY_S, "hex");
    exports2.KECCAK256_RLP_S = "56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421";
    exports2.KECCAK256_RLP = Buffer2.from(exports2.KECCAK256_RLP_S, "hex");
  }
});

// ../../node_modules/.pnpm/rlp@2.2.6/node_modules/rlp/dist/index.js
var require_dist = __commonJS({
  "../../node_modules/.pnpm/rlp@2.2.6/node_modules/rlp/dist/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getLength = exports2.decode = exports2.encode = void 0;
    var BN = require_bn();
    function encode(input) {
      if (Array.isArray(input)) {
        var output = [];
        for (var i2 = 0; i2 < input.length; i2++) {
          output.push(encode(input[i2]));
        }
        var buf = Buffer.concat(output);
        return Buffer.concat([encodeLength(buf.length, 192), buf]);
      } else {
        var inputBuf = toBuffer2(input);
        return inputBuf.length === 1 && inputBuf[0] < 128 ? inputBuf : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);
      }
    }
    exports2.encode = encode;
    function safeParseInt(v, base) {
      if (v.slice(0, 2) === "00") {
        throw new Error("invalid RLP: extra zeros");
      }
      return parseInt(v, base);
    }
    function encodeLength(len, offset) {
      if (len < 56) {
        return Buffer.from([len + offset]);
      } else {
        var hexLength = intToHex(len);
        var lLength = hexLength.length / 2;
        var firstByte = intToHex(offset + 55 + lLength);
        return Buffer.from(firstByte + hexLength, "hex");
      }
    }
    function decode(input, stream) {
      if (stream === void 0) {
        stream = false;
      }
      if (!input || input.length === 0) {
        return Buffer.from([]);
      }
      var inputBuffer = toBuffer2(input);
      var decoded = _decode(inputBuffer);
      if (stream) {
        return decoded;
      }
      if (decoded.remainder.length !== 0) {
        throw new Error("invalid remainder");
      }
      return decoded.data;
    }
    exports2.decode = decode;
    function getLength(input) {
      if (!input || input.length === 0) {
        return Buffer.from([]);
      }
      var inputBuffer = toBuffer2(input);
      var firstByte = inputBuffer[0];
      if (firstByte <= 127) {
        return inputBuffer.length;
      } else if (firstByte <= 183) {
        return firstByte - 127;
      } else if (firstByte <= 191) {
        return firstByte - 182;
      } else if (firstByte <= 247) {
        return firstByte - 191;
      } else {
        var llength = firstByte - 246;
        var length = safeParseInt(inputBuffer.slice(1, llength).toString("hex"), 16);
        return llength + length;
      }
    }
    exports2.getLength = getLength;
    function _decode(input) {
      var length, llength, data, innerRemainder, d2;
      var decoded = [];
      var firstByte = input[0];
      if (firstByte <= 127) {
        return {
          data: input.slice(0, 1),
          remainder: input.slice(1)
        };
      } else if (firstByte <= 183) {
        length = firstByte - 127;
        if (firstByte === 128) {
          data = Buffer.from([]);
        } else {
          data = input.slice(1, length);
        }
        if (length === 2 && data[0] < 128) {
          throw new Error("invalid rlp encoding: byte must be less 0x80");
        }
        return {
          data,
          remainder: input.slice(length)
        };
      } else if (firstByte <= 191) {
        llength = firstByte - 182;
        if (input.length - 1 < llength) {
          throw new Error("invalid RLP: not enough bytes for string length");
        }
        length = safeParseInt(input.slice(1, llength).toString("hex"), 16);
        if (length <= 55) {
          throw new Error("invalid RLP: expected string length to be greater than 55");
        }
        data = input.slice(llength, length + llength);
        if (data.length < length) {
          throw new Error("invalid RLP: not enough bytes for string");
        }
        return {
          data,
          remainder: input.slice(length + llength)
        };
      } else if (firstByte <= 247) {
        length = firstByte - 191;
        innerRemainder = input.slice(1, length);
        while (innerRemainder.length) {
          d2 = _decode(innerRemainder);
          decoded.push(d2.data);
          innerRemainder = d2.remainder;
        }
        return {
          data: decoded,
          remainder: input.slice(length)
        };
      } else {
        llength = firstByte - 246;
        length = safeParseInt(input.slice(1, llength).toString("hex"), 16);
        var totalLength = llength + length;
        if (totalLength > input.length) {
          throw new Error("invalid rlp: total length is larger than the data");
        }
        innerRemainder = input.slice(llength, totalLength);
        if (innerRemainder.length === 0) {
          throw new Error("invalid rlp, List has a invalid length");
        }
        while (innerRemainder.length) {
          d2 = _decode(innerRemainder);
          decoded.push(d2.data);
          innerRemainder = d2.remainder;
        }
        return {
          data: decoded,
          remainder: input.slice(totalLength)
        };
      }
    }
    function isHexPrefixed(str) {
      return str.slice(0, 2) === "0x";
    }
    function stripHexPrefix(str) {
      if (typeof str !== "string") {
        return str;
      }
      return isHexPrefixed(str) ? str.slice(2) : str;
    }
    function intToHex(integer) {
      if (integer < 0) {
        throw new Error("Invalid integer as argument, must be unsigned!");
      }
      var hex = integer.toString(16);
      return hex.length % 2 ? "0" + hex : hex;
    }
    function padToEven(a2) {
      return a2.length % 2 ? "0" + a2 : a2;
    }
    function intToBuffer(integer) {
      var hex = intToHex(integer);
      return Buffer.from(hex, "hex");
    }
    function toBuffer2(v) {
      if (!Buffer.isBuffer(v)) {
        if (typeof v === "string") {
          if (isHexPrefixed(v)) {
            return Buffer.from(padToEven(stripHexPrefix(v)), "hex");
          } else {
            return Buffer.from(v);
          }
        } else if (typeof v === "number" || typeof v === "bigint") {
          if (!v) {
            return Buffer.from([]);
          } else {
            return intToBuffer(v);
          }
        } else if (v === null || v === void 0) {
          return Buffer.from([]);
        } else if (v instanceof Uint8Array) {
          return Buffer.from(v);
        } else if (BN.isBN(v)) {
          return Buffer.from(v.toArray());
        } else {
          throw new Error("invalid type");
        }
      }
      return v;
    }
  }
});

// ../../node_modules/.pnpm/node-gyp-build@4.2.3/node_modules/node-gyp-build/index.js
var require_node_gyp_build = __commonJS({
  "../../node_modules/.pnpm/node-gyp-build@4.2.3/node_modules/node-gyp-build/index.js"(exports2, module2) {
    var fs = __require("fs");
    var path2 = __require("path");
    var os = __require("os");
    var runtimeRequire = typeof __webpack_require__ === "function" ? __non_webpack_require__ : __require;
    var vars = process.config && process.config.variables || {};
    var prebuildsOnly = !!process.env.PREBUILDS_ONLY;
    var abi = process.versions.modules;
    var runtime = isElectron() ? "electron" : "node";
    var arch = os.arch();
    var platform = os.platform();
    var libc = process.env.LIBC || (isAlpine(platform) ? "musl" : "glibc");
    var armv = process.env.ARM_VERSION || (arch === "arm64" ? "8" : vars.arm_version) || "";
    var uv = (process.versions.uv || "").split(".")[0];
    module2.exports = load;
    function load(dir) {
      return runtimeRequire(load.path(dir));
    }
    load.path = function(dir) {
      dir = path2.resolve(dir || ".");
      try {
        var name = runtimeRequire(path2.join(dir, "package.json")).name.toUpperCase().replace(/-/g, "_");
        if (process.env[name + "_PREBUILD"])
          dir = process.env[name + "_PREBUILD"];
      } catch (err) {
      }
      if (!prebuildsOnly) {
        var release = getFirst(path2.join(dir, "build/Release"), matchBuild);
        if (release)
          return release;
        var debug = getFirst(path2.join(dir, "build/Debug"), matchBuild);
        if (debug)
          return debug;
      }
      var prebuild = resolve(dir);
      if (prebuild)
        return prebuild;
      var nearby = resolve(path2.dirname(process.execPath));
      if (nearby)
        return nearby;
      var target = [
        "platform=" + platform,
        "arch=" + arch,
        "runtime=" + runtime,
        "abi=" + abi,
        "uv=" + uv,
        armv ? "armv=" + armv : "",
        "libc=" + libc,
        "node=" + process.versions.node,
        process.versions && process.versions.electron ? "electron=" + process.versions.electron : "",
        typeof __webpack_require__ === "function" ? "webpack=true" : ""
      ].filter(Boolean).join(" ");
      throw new Error("No native build was found for " + target + "\n    loaded from: " + dir + "\n");
      function resolve(dir2) {
        var prebuilds = path2.join(dir2, "prebuilds", platform + "-" + arch);
        var parsed = readdirSync(prebuilds).map(parseTags);
        var candidates = parsed.filter(matchTags(runtime, abi));
        var winner = candidates.sort(compareTags(runtime))[0];
        if (winner)
          return path2.join(prebuilds, winner.file);
      }
    };
    function readdirSync(dir) {
      try {
        return fs.readdirSync(dir);
      } catch (err) {
        return [];
      }
    }
    function getFirst(dir, filter) {
      var files = readdirSync(dir).filter(filter);
      return files[0] && path2.join(dir, files[0]);
    }
    function matchBuild(name) {
      return /\.node$/.test(name);
    }
    function parseTags(file) {
      var arr = file.split(".");
      var extension = arr.pop();
      var tags = { file, specificity: 0 };
      if (extension !== "node")
        return;
      for (var i2 = 0; i2 < arr.length; i2++) {
        var tag = arr[i2];
        if (tag === "node" || tag === "electron" || tag === "node-webkit") {
          tags.runtime = tag;
        } else if (tag === "napi") {
          tags.napi = true;
        } else if (tag.slice(0, 3) === "abi") {
          tags.abi = tag.slice(3);
        } else if (tag.slice(0, 2) === "uv") {
          tags.uv = tag.slice(2);
        } else if (tag.slice(0, 4) === "armv") {
          tags.armv = tag.slice(4);
        } else if (tag === "glibc" || tag === "musl") {
          tags.libc = tag;
        } else {
          continue;
        }
        tags.specificity++;
      }
      return tags;
    }
    function matchTags(runtime2, abi2) {
      return function(tags) {
        if (tags == null)
          return false;
        if (tags.runtime !== runtime2 && !runtimeAgnostic(tags))
          return false;
        if (tags.abi !== abi2 && !tags.napi)
          return false;
        if (tags.uv && tags.uv !== uv)
          return false;
        if (tags.armv && tags.armv !== armv)
          return false;
        if (tags.libc && tags.libc !== libc)
          return false;
        return true;
      };
    }
    function runtimeAgnostic(tags) {
      return tags.runtime === "node" && tags.napi;
    }
    function compareTags(runtime2) {
      return function(a2, b) {
        if (a2.runtime !== b.runtime) {
          return a2.runtime === runtime2 ? -1 : 1;
        } else if (a2.abi !== b.abi) {
          return a2.abi ? -1 : 1;
        } else if (a2.specificity !== b.specificity) {
          return a2.specificity > b.specificity ? -1 : 1;
        } else {
          return 0;
        }
      };
    }
    function isElectron() {
      if (process.versions && process.versions.electron)
        return true;
      if (process.env.ELECTRON_RUN_AS_NODE)
        return true;
      return typeof window !== "undefined" && window.process && window.process.type === "renderer";
    }
    function isAlpine(platform2) {
      return platform2 === "linux" && fs.existsSync("/etc/alpine-release");
    }
    load.parseTags = parseTags;
    load.matchTags = matchTags;
    load.compareTags = compareTags;
  }
});

// ../../node_modules/.pnpm/secp256k1@4.0.2/node_modules/secp256k1/lib/index.js
var require_lib = __commonJS({
  "../../node_modules/.pnpm/secp256k1@4.0.2/node_modules/secp256k1/lib/index.js"(exports2, module2) {
    var errors = {
      IMPOSSIBLE_CASE: "Impossible case. Please create issue.",
      TWEAK_ADD: "The tweak was out of range or the resulted private key is invalid",
      TWEAK_MUL: "The tweak was out of range or equal to zero",
      CONTEXT_RANDOMIZE_UNKNOW: "Unknow error on context randomization",
      SECKEY_INVALID: "Private Key is invalid",
      PUBKEY_PARSE: "Public Key could not be parsed",
      PUBKEY_SERIALIZE: "Public Key serialization error",
      PUBKEY_COMBINE: "The sum of the public keys is not valid",
      SIG_PARSE: "Signature could not be parsed",
      SIGN: "The nonce generation function failed, or the private key was invalid",
      RECOVER: "Public key could not be recover",
      ECDH: "Scalar was invalid (zero or overflow)"
    };
    function assert(cond, msg) {
      if (!cond)
        throw new Error(msg);
    }
    function isUint8Array(name, value, length) {
      assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`);
      if (length !== void 0) {
        if (Array.isArray(length)) {
          const numbers = length.join(", ");
          const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`;
          assert(length.includes(value.length), msg);
        } else {
          const msg = `Expected ${name} to be an Uint8Array with length ${length}`;
          assert(value.length === length, msg);
        }
      }
    }
    function isCompressed(value) {
      assert(toTypeString(value) === "Boolean", "Expected compressed to be a Boolean");
    }
    function getAssertedOutput(output = (len) => new Uint8Array(len), length) {
      if (typeof output === "function")
        output = output(length);
      isUint8Array("output", output, length);
      return output;
    }
    function toTypeString(value) {
      return Object.prototype.toString.call(value).slice(8, -1);
    }
    module2.exports = (secp256k12) => {
      return {
        contextRandomize(seed) {
          assert(seed === null || seed instanceof Uint8Array, "Expected seed to be an Uint8Array or null");
          if (seed !== null)
            isUint8Array("seed", seed, 32);
          switch (secp256k12.contextRandomize(seed)) {
            case 1:
              throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW);
          }
        },
        privateKeyVerify(seckey) {
          isUint8Array("private key", seckey, 32);
          return secp256k12.privateKeyVerify(seckey) === 0;
        },
        privateKeyNegate(seckey) {
          isUint8Array("private key", seckey, 32);
          switch (secp256k12.privateKeyNegate(seckey)) {
            case 0:
              return seckey;
            case 1:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        privateKeyTweakAdd(seckey, tweak) {
          isUint8Array("private key", seckey, 32);
          isUint8Array("tweak", tweak, 32);
          switch (secp256k12.privateKeyTweakAdd(seckey, tweak)) {
            case 0:
              return seckey;
            case 1:
              throw new Error(errors.TWEAK_ADD);
          }
        },
        privateKeyTweakMul(seckey, tweak) {
          isUint8Array("private key", seckey, 32);
          isUint8Array("tweak", tweak, 32);
          switch (secp256k12.privateKeyTweakMul(seckey, tweak)) {
            case 0:
              return seckey;
            case 1:
              throw new Error(errors.TWEAK_MUL);
          }
        },
        publicKeyVerify(pubkey) {
          isUint8Array("public key", pubkey, [33, 65]);
          return secp256k12.publicKeyVerify(pubkey) === 0;
        },
        publicKeyCreate(seckey, compressed = true, output) {
          isUint8Array("private key", seckey, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k12.publicKeyCreate(output, seckey)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.SECKEY_INVALID);
            case 2:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyConvert(pubkey, compressed = true, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k12.publicKeyConvert(output, pubkey)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyNegate(pubkey, compressed = true, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k12.publicKeyNegate(output, pubkey)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
            case 3:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyCombine(pubkeys, compressed = true, output) {
          assert(Array.isArray(pubkeys), "Expected public keys to be an Array");
          assert(pubkeys.length > 0, "Expected public keys array will have more than zero items");
          for (const pubkey of pubkeys) {
            isUint8Array("public key", pubkey, [33, 65]);
          }
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k12.publicKeyCombine(output, pubkeys)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.PUBKEY_COMBINE);
            case 3:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyTweakAdd(pubkey, tweak, compressed = true, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isUint8Array("tweak", tweak, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k12.publicKeyTweakAdd(output, pubkey, tweak)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.TWEAK_ADD);
          }
        },
        publicKeyTweakMul(pubkey, tweak, compressed = true, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isUint8Array("tweak", tweak, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k12.publicKeyTweakMul(output, pubkey, tweak)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.TWEAK_MUL);
          }
        },
        signatureNormalize(sig) {
          isUint8Array("signature", sig, 64);
          switch (secp256k12.signatureNormalize(sig)) {
            case 0:
              return sig;
            case 1:
              throw new Error(errors.SIG_PARSE);
          }
        },
        signatureExport(sig, output) {
          isUint8Array("signature", sig, 64);
          output = getAssertedOutput(output, 72);
          const obj = { output, outputlen: 72 };
          switch (secp256k12.signatureExport(obj, sig)) {
            case 0:
              return output.slice(0, obj.outputlen);
            case 1:
              throw new Error(errors.SIG_PARSE);
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        signatureImport(sig, output) {
          isUint8Array("signature", sig);
          output = getAssertedOutput(output, 64);
          switch (secp256k12.signatureImport(output, sig)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.SIG_PARSE);
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        ecdsaSign(msg32, seckey, options = {}, output) {
          isUint8Array("message", msg32, 32);
          isUint8Array("private key", seckey, 32);
          assert(toTypeString(options) === "Object", "Expected options to be an Object");
          if (options.data !== void 0)
            isUint8Array("options.data", options.data);
          if (options.noncefn !== void 0)
            assert(toTypeString(options.noncefn) === "Function", "Expected options.noncefn to be a Function");
          output = getAssertedOutput(output, 64);
          const obj = { signature: output, recid: null };
          switch (secp256k12.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
            case 0:
              return obj;
            case 1:
              throw new Error(errors.SIGN);
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        ecdsaVerify(sig, msg32, pubkey) {
          isUint8Array("signature", sig, 64);
          isUint8Array("message", msg32, 32);
          isUint8Array("public key", pubkey, [33, 65]);
          switch (secp256k12.ecdsaVerify(sig, msg32, pubkey)) {
            case 0:
              return true;
            case 3:
              return false;
            case 1:
              throw new Error(errors.SIG_PARSE);
            case 2:
              throw new Error(errors.PUBKEY_PARSE);
          }
        },
        ecdsaRecover(sig, recid, msg32, compressed = true, output) {
          isUint8Array("signature", sig, 64);
          assert(toTypeString(recid) === "Number" && recid >= 0 && recid <= 3, "Expected recovery id to be a Number within interval [0, 3]");
          isUint8Array("message", msg32, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k12.ecdsaRecover(output, sig, recid, msg32)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.SIG_PARSE);
            case 2:
              throw new Error(errors.RECOVER);
            case 3:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        ecdh(pubkey, seckey, options = {}, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isUint8Array("private key", seckey, 32);
          assert(toTypeString(options) === "Object", "Expected options to be an Object");
          if (options.data !== void 0)
            isUint8Array("options.data", options.data);
          if (options.hashfn !== void 0) {
            assert(toTypeString(options.hashfn) === "Function", "Expected options.hashfn to be a Function");
            if (options.xbuf !== void 0)
              isUint8Array("options.xbuf", options.xbuf, 32);
            if (options.ybuf !== void 0)
              isUint8Array("options.ybuf", options.ybuf, 32);
            isUint8Array("output", output);
          } else {
            output = getAssertedOutput(output, 32);
          }
          switch (secp256k12.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.ECDH);
          }
        }
      };
    };
  }
});

// ../../node_modules/.pnpm/secp256k1@4.0.2/node_modules/secp256k1/bindings.js
var require_bindings = __commonJS({
  "../../node_modules/.pnpm/secp256k1@4.0.2/node_modules/secp256k1/bindings.js"(exports2, module2) {
    var addon = require_node_gyp_build()(__dirname);
    module2.exports = require_lib()(new addon.Secp256k1());
  }
});

// ../../node_modules/.pnpm/secp256k1@4.0.2/node_modules/secp256k1/lib/elliptic.js
var require_elliptic2 = __commonJS({
  "../../node_modules/.pnpm/secp256k1@4.0.2/node_modules/secp256k1/lib/elliptic.js"(exports2, module2) {
    var EC = require_elliptic().ec;
    var ec5 = new EC("secp256k1");
    var ecparams = ec5.curve;
    var BN = ecparams.n.constructor;
    function loadCompressedPublicKey(first, xbuf) {
      let x = new BN(xbuf);
      if (x.cmp(ecparams.p) >= 0)
        return null;
      x = x.toRed(ecparams.red);
      let y2 = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();
      if (first === 3 !== y2.isOdd())
        y2 = y2.redNeg();
      return ec5.keyPair({ pub: { x, y: y2 } });
    }
    function loadUncompressedPublicKey(first, xbuf, ybuf) {
      let x = new BN(xbuf);
      let y2 = new BN(ybuf);
      if (x.cmp(ecparams.p) >= 0 || y2.cmp(ecparams.p) >= 0)
        return null;
      x = x.toRed(ecparams.red);
      y2 = y2.toRed(ecparams.red);
      if ((first === 6 || first === 7) && y2.isOdd() !== (first === 7))
        return null;
      const x3 = x.redSqr().redIMul(x);
      if (!y2.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero())
        return null;
      return ec5.keyPair({ pub: { x, y: y2 } });
    }
    function loadPublicKey(pubkey) {
      const first = pubkey[0];
      switch (first) {
        case 2:
        case 3:
          if (pubkey.length !== 33)
            return null;
          return loadCompressedPublicKey(first, pubkey.subarray(1, 33));
        case 4:
        case 6:
        case 7:
          if (pubkey.length !== 65)
            return null;
          return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65));
        default:
          return null;
      }
    }
    function savePublicKey(output, point) {
      const pubkey = point.encode(null, output.length === 33);
      for (let i2 = 0; i2 < output.length; ++i2)
        output[i2] = pubkey[i2];
    }
    module2.exports = {
      contextRandomize() {
        return 0;
      },
      privateKeyVerify(seckey) {
        const bn = new BN(seckey);
        return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1;
      },
      privateKeyNegate(seckey) {
        const bn = new BN(seckey);
        const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, "be", 32);
        seckey.set(negate);
        return 0;
      },
      privateKeyTweakAdd(seckey, tweak) {
        const bn = new BN(tweak);
        if (bn.cmp(ecparams.n) >= 0)
          return 1;
        bn.iadd(new BN(seckey));
        if (bn.cmp(ecparams.n) >= 0)
          bn.isub(ecparams.n);
        if (bn.isZero())
          return 1;
        const tweaked = bn.toArrayLike(Uint8Array, "be", 32);
        seckey.set(tweaked);
        return 0;
      },
      privateKeyTweakMul(seckey, tweak) {
        let bn = new BN(tweak);
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero())
          return 1;
        bn.imul(new BN(seckey));
        if (bn.cmp(ecparams.n) >= 0)
          bn = bn.umod(ecparams.n);
        const tweaked = bn.toArrayLike(Uint8Array, "be", 32);
        seckey.set(tweaked);
        return 0;
      },
      publicKeyVerify(pubkey) {
        const pair = loadPublicKey(pubkey);
        return pair === null ? 1 : 0;
      },
      publicKeyCreate(output, seckey) {
        const bn = new BN(seckey);
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero())
          return 1;
        const point = ec5.keyFromPrivate(seckey).getPublic();
        savePublicKey(output, point);
        return 0;
      },
      publicKeyConvert(output, pubkey) {
        const pair = loadPublicKey(pubkey);
        if (pair === null)
          return 1;
        const point = pair.getPublic();
        savePublicKey(output, point);
        return 0;
      },
      publicKeyNegate(output, pubkey) {
        const pair = loadPublicKey(pubkey);
        if (pair === null)
          return 1;
        const point = pair.getPublic();
        point.y = point.y.redNeg();
        savePublicKey(output, point);
        return 0;
      },
      publicKeyCombine(output, pubkeys) {
        const pairs = new Array(pubkeys.length);
        for (let i2 = 0; i2 < pubkeys.length; ++i2) {
          pairs[i2] = loadPublicKey(pubkeys[i2]);
          if (pairs[i2] === null)
            return 1;
        }
        let point = pairs[0].getPublic();
        for (let i2 = 1; i2 < pairs.length; ++i2)
          point = point.add(pairs[i2].pub);
        if (point.isInfinity())
          return 2;
        savePublicKey(output, point);
        return 0;
      },
      publicKeyTweakAdd(output, pubkey, tweak) {
        const pair = loadPublicKey(pubkey);
        if (pair === null)
          return 1;
        tweak = new BN(tweak);
        if (tweak.cmp(ecparams.n) >= 0)
          return 2;
        const point = pair.getPublic().add(ecparams.g.mul(tweak));
        if (point.isInfinity())
          return 2;
        savePublicKey(output, point);
        return 0;
      },
      publicKeyTweakMul(output, pubkey, tweak) {
        const pair = loadPublicKey(pubkey);
        if (pair === null)
          return 1;
        tweak = new BN(tweak);
        if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero())
          return 2;
        const point = pair.getPublic().mul(tweak);
        savePublicKey(output, point);
        return 0;
      },
      signatureNormalize(sig) {
        const r = new BN(sig.subarray(0, 32));
        const s = new BN(sig.subarray(32, 64));
        if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0)
          return 1;
        if (s.cmp(ec5.nh) === 1) {
          sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, "be", 32), 32);
        }
        return 0;
      },
      signatureExport(obj, sig) {
        const sigR = sig.subarray(0, 32);
        const sigS = sig.subarray(32, 64);
        if (new BN(sigR).cmp(ecparams.n) >= 0)
          return 1;
        if (new BN(sigS).cmp(ecparams.n) >= 0)
          return 1;
        const { output } = obj;
        let r = output.subarray(4, 4 + 33);
        r[0] = 0;
        r.set(sigR, 1);
        let lenR = 33;
        let posR = 0;
        for (; lenR > 1 && r[posR] === 0 && !(r[posR + 1] & 128); --lenR, ++posR)
          ;
        r = r.subarray(posR);
        if (r[0] & 128)
          return 1;
        if (lenR > 1 && r[0] === 0 && !(r[1] & 128))
          return 1;
        let s = output.subarray(6 + 33, 6 + 33 + 33);
        s[0] = 0;
        s.set(sigS, 1);
        let lenS = 33;
        let posS = 0;
        for (; lenS > 1 && s[posS] === 0 && !(s[posS + 1] & 128); --lenS, ++posS)
          ;
        s = s.subarray(posS);
        if (s[0] & 128)
          return 1;
        if (lenS > 1 && s[0] === 0 && !(s[1] & 128))
          return 1;
        obj.outputlen = 6 + lenR + lenS;
        output[0] = 48;
        output[1] = obj.outputlen - 2;
        output[2] = 2;
        output[3] = r.length;
        output.set(r, 4);
        output[4 + lenR] = 2;
        output[5 + lenR] = s.length;
        output.set(s, 6 + lenR);
        return 0;
      },
      signatureImport(output, sig) {
        if (sig.length < 8)
          return 1;
        if (sig.length > 72)
          return 1;
        if (sig[0] !== 48)
          return 1;
        if (sig[1] !== sig.length - 2)
          return 1;
        if (sig[2] !== 2)
          return 1;
        const lenR = sig[3];
        if (lenR === 0)
          return 1;
        if (5 + lenR >= sig.length)
          return 1;
        if (sig[4 + lenR] !== 2)
          return 1;
        const lenS = sig[5 + lenR];
        if (lenS === 0)
          return 1;
        if (6 + lenR + lenS !== sig.length)
          return 1;
        if (sig[4] & 128)
          return 1;
        if (lenR > 1 && sig[4] === 0 && !(sig[5] & 128))
          return 1;
        if (sig[lenR + 6] & 128)
          return 1;
        if (lenS > 1 && sig[lenR + 6] === 0 && !(sig[lenR + 7] & 128))
          return 1;
        let sigR = sig.subarray(4, 4 + lenR);
        if (sigR.length === 33 && sigR[0] === 0)
          sigR = sigR.subarray(1);
        if (sigR.length > 32)
          return 1;
        let sigS = sig.subarray(6 + lenR);
        if (sigS.length === 33 && sigS[0] === 0)
          sigS = sigS.slice(1);
        if (sigS.length > 32)
          throw new Error("S length is too long");
        let r = new BN(sigR);
        if (r.cmp(ecparams.n) >= 0)
          r = new BN(0);
        let s = new BN(sig.subarray(6 + lenR));
        if (s.cmp(ecparams.n) >= 0)
          s = new BN(0);
        output.set(r.toArrayLike(Uint8Array, "be", 32), 0);
        output.set(s.toArrayLike(Uint8Array, "be", 32), 32);
        return 0;
      },
      ecdsaSign(obj, message, seckey, data, noncefn) {
        if (noncefn) {
          const _noncefn = noncefn;
          noncefn = (counter) => {
            const nonce = _noncefn(message, seckey, null, data, counter);
            const isValid = nonce instanceof Uint8Array && nonce.length === 32;
            if (!isValid)
              throw new Error("This is the way");
            return new BN(nonce);
          };
        }
        const d2 = new BN(seckey);
        if (d2.cmp(ecparams.n) >= 0 || d2.isZero())
          return 1;
        let sig;
        try {
          sig = ec5.sign(message, seckey, { canonical: true, k: noncefn, pers: data });
        } catch (err) {
          return 1;
        }
        obj.signature.set(sig.r.toArrayLike(Uint8Array, "be", 32), 0);
        obj.signature.set(sig.s.toArrayLike(Uint8Array, "be", 32), 32);
        obj.recid = sig.recoveryParam;
        return 0;
      },
      ecdsaVerify(sig, msg32, pubkey) {
        const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) };
        const sigr = new BN(sigObj.r);
        const sigs = new BN(sigObj.s);
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0)
          return 1;
        if (sigs.cmp(ec5.nh) === 1 || sigr.isZero() || sigs.isZero())
          return 3;
        const pair = loadPublicKey(pubkey);
        if (pair === null)
          return 2;
        const point = pair.getPublic();
        const isValid = ec5.verify(msg32, sigObj, point);
        return isValid ? 0 : 3;
      },
      ecdsaRecover(output, sig, recid, msg32) {
        const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) };
        const sigr = new BN(sigObj.r);
        const sigs = new BN(sigObj.s);
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0)
          return 1;
        if (sigr.isZero() || sigs.isZero())
          return 2;
        let point;
        try {
          point = ec5.recoverPubKey(msg32, sigObj, recid);
        } catch (err) {
          return 2;
        }
        savePublicKey(output, point);
        return 0;
      },
      ecdh(output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
        const pair = loadPublicKey(pubkey);
        if (pair === null)
          return 1;
        const scalar = new BN(seckey);
        if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero())
          return 2;
        const point = pair.getPublic().mul(scalar);
        if (hashfn === void 0) {
          const data2 = point.encode(null, true);
          const sha256 = ec5.hash().update(data2).digest();
          for (let i2 = 0; i2 < 32; ++i2)
            output[i2] = sha256[i2];
        } else {
          if (!xbuf)
            xbuf = new Uint8Array(32);
          const x = point.getX().toArray("be", 32);
          for (let i2 = 0; i2 < 32; ++i2)
            xbuf[i2] = x[i2];
          if (!ybuf)
            ybuf = new Uint8Array(32);
          const y2 = point.getY().toArray("be", 32);
          for (let i2 = 0; i2 < 32; ++i2)
            ybuf[i2] = y2[i2];
          const hash = hashfn(xbuf, ybuf, data);
          const isValid = hash instanceof Uint8Array && hash.length === output.length;
          if (!isValid)
            return 2;
          output.set(hash);
        }
        return 0;
      }
    };
  }
});

// ../../node_modules/.pnpm/secp256k1@4.0.2/node_modules/secp256k1/elliptic.js
var require_elliptic3 = __commonJS({
  "../../node_modules/.pnpm/secp256k1@4.0.2/node_modules/secp256k1/elliptic.js"(exports2, module2) {
    module2.exports = require_lib()(require_elliptic2());
  }
});

// ../../node_modules/.pnpm/secp256k1@4.0.2/node_modules/secp256k1/index.js
var require_secp256k12 = __commonJS({
  "../../node_modules/.pnpm/secp256k1@4.0.2/node_modules/secp256k1/index.js"(exports2, module2) {
    try {
      module2.exports = require_bindings();
    } catch (err) {
      module2.exports = require_elliptic3();
    }
  }
});

// ../../node_modules/.pnpm/randombytes@2.1.0/node_modules/randombytes/index.js
var require_randombytes = __commonJS({
  "../../node_modules/.pnpm/randombytes@2.1.0/node_modules/randombytes/index.js"(exports2, module2) {
    module2.exports = __require("crypto").randomBytes;
  }
});

// ../../node_modules/.pnpm/ethereum-cryptography@0.1.3/node_modules/ethereum-cryptography/random.js
var require_random = __commonJS({
  "../../node_modules/.pnpm/ethereum-cryptography@0.1.3/node_modules/ethereum-cryptography/random.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var randombytes = require_randombytes();
    function getRandomBytes(bytes) {
      return new Promise(function(resolve, reject) {
        randombytes(bytes, function(err, resp) {
          if (err) {
            reject(err);
            return;
          }
          resolve(resp);
        });
      });
    }
    exports2.getRandomBytes = getRandomBytes;
    function getRandomBytesSync(bytes) {
      return randombytes(bytes);
    }
    exports2.getRandomBytesSync = getRandomBytesSync;
  }
});

// ../../node_modules/.pnpm/ethereum-cryptography@0.1.3/node_modules/ethereum-cryptography/secp256k1.js
var require_secp256k13 = __commonJS({
  "../../node_modules/.pnpm/ethereum-cryptography@0.1.3/node_modules/ethereum-cryptography/secp256k1.js"(exports2) {
    "use strict";
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports2 && exports2.__generator || function(thisArg, body) {
      var _2 = { label: 0, sent: function() {
        if (t2[0] & 1)
          throw t2[1];
        return t2[1];
      }, trys: [], ops: [] }, f, y2, t2, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v) {
          return step([n2, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_2)
          try {
            if (f = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
              return t2;
            if (y2 = 0, t2)
              op = [op[0] & 2, t2.value];
            switch (op[0]) {
              case 0:
              case 1:
                t2 = op;
                break;
              case 4:
                _2.label++;
                return { value: op[1], done: false };
              case 5:
                _2.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _2.ops.pop();
                _2.trys.pop();
                continue;
              default:
                if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _2 = 0;
                  continue;
                }
                if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                  _2.label = op[1];
                  break;
                }
                if (op[0] === 6 && _2.label < t2[1]) {
                  _2.label = t2[1];
                  t2 = op;
                  break;
                }
                if (t2 && _2.label < t2[2]) {
                  _2.label = t2[2];
                  _2.ops.push(op);
                  break;
                }
                if (t2[2])
                  _2.ops.pop();
                _2.trys.pop();
                continue;
            }
            op = body.call(thisArg, _2);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f = t2 = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    function __export(m2) {
      for (var p2 in m2)
        if (!exports2.hasOwnProperty(p2))
          exports2[p2] = m2[p2];
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    var secp256k1_1 = require_secp256k12();
    var random_1 = require_random();
    var SECP256K1_PRIVATE_KEY_SIZE = 32;
    function createPrivateKey() {
      return __awaiter(this, void 0, void 0, function() {
        var pk;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (false)
                return [3, 2];
              return [4, random_1.getRandomBytes(SECP256K1_PRIVATE_KEY_SIZE)];
            case 1:
              pk = _a.sent();
              if (secp256k1_1.privateKeyVerify(pk)) {
                return [2, pk];
              }
              return [3, 0];
            case 2:
              return [2];
          }
        });
      });
    }
    exports2.createPrivateKey = createPrivateKey;
    function createPrivateKeySync() {
      while (true) {
        var pk = random_1.getRandomBytesSync(SECP256K1_PRIVATE_KEY_SIZE);
        if (secp256k1_1.privateKeyVerify(pk)) {
          return pk;
        }
      }
    }
    exports2.createPrivateKeySync = createPrivateKeySync;
    __export(require_secp256k12());
  }
});

// ../../node_modules/.pnpm/is-hex-prefixed@1.0.0/node_modules/is-hex-prefixed/src/index.js
var require_src4 = __commonJS({
  "../../node_modules/.pnpm/is-hex-prefixed@1.0.0/node_modules/is-hex-prefixed/src/index.js"(exports2, module2) {
    module2.exports = function isHexPrefixed(str) {
      if (typeof str !== "string") {
        throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + typeof str + ", while checking isHexPrefixed.");
      }
      return str.slice(0, 2) === "0x";
    };
  }
});

// ../../node_modules/.pnpm/strip-hex-prefix@1.0.0/node_modules/strip-hex-prefix/src/index.js
var require_src5 = __commonJS({
  "../../node_modules/.pnpm/strip-hex-prefix@1.0.0/node_modules/strip-hex-prefix/src/index.js"(exports2, module2) {
    var isHexPrefixed = require_src4();
    module2.exports = function stripHexPrefix(str) {
      if (typeof str !== "string") {
        return str;
      }
      return isHexPrefixed(str) ? str.slice(2) : str;
    };
  }
});

// ../../node_modules/.pnpm/ethjs-util@0.1.6/node_modules/ethjs-util/lib/index.js
var require_lib2 = __commonJS({
  "../../node_modules/.pnpm/ethjs-util@0.1.6/node_modules/ethjs-util/lib/index.js"(exports2, module2) {
    "use strict";
    var isHexPrefixed = require_src4();
    var stripHexPrefix = require_src5();
    function padToEven(value) {
      var a2 = value;
      if (typeof a2 !== "string") {
        throw new Error("[ethjs-util] while padding to even, value must be string, is currently " + typeof a2 + ", while padToEven.");
      }
      if (a2.length % 2) {
        a2 = "0" + a2;
      }
      return a2;
    }
    function intToHex(i2) {
      var hex = i2.toString(16);
      return "0x" + hex;
    }
    function intToBuffer(i2) {
      var hex = intToHex(i2);
      return new Buffer(padToEven(hex.slice(2)), "hex");
    }
    function getBinarySize(str) {
      if (typeof str !== "string") {
        throw new Error("[ethjs-util] while getting binary size, method getBinarySize requires input 'str' to be type String, got '" + typeof str + "'.");
      }
      return Buffer.byteLength(str, "utf8");
    }
    function arrayContainsArray(superset, subset, some) {
      if (Array.isArray(superset) !== true) {
        throw new Error("[ethjs-util] method arrayContainsArray requires input 'superset' to be an array got type '" + typeof superset + "'");
      }
      if (Array.isArray(subset) !== true) {
        throw new Error("[ethjs-util] method arrayContainsArray requires input 'subset' to be an array got type '" + typeof subset + "'");
      }
      return subset[Boolean(some) && "some" || "every"](function(value) {
        return superset.indexOf(value) >= 0;
      });
    }
    function toUtf8(hex) {
      var bufferValue = new Buffer(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g, "")), "hex");
      return bufferValue.toString("utf8");
    }
    function toAscii(hex) {
      var str = "";
      var i2 = 0, l2 = hex.length;
      if (hex.substring(0, 2) === "0x") {
        i2 = 2;
      }
      for (; i2 < l2; i2 += 2) {
        var code = parseInt(hex.substr(i2, 2), 16);
        str += String.fromCharCode(code);
      }
      return str;
    }
    function fromUtf8(stringValue) {
      var str = new Buffer(stringValue, "utf8");
      return "0x" + padToEven(str.toString("hex")).replace(/^0+|0+$/g, "");
    }
    function fromAscii(stringValue) {
      var hex = "";
      for (var i2 = 0; i2 < stringValue.length; i2++) {
        var code = stringValue.charCodeAt(i2);
        var n2 = code.toString(16);
        hex += n2.length < 2 ? "0" + n2 : n2;
      }
      return "0x" + hex;
    }
    function getKeys(params, key, allowEmpty) {
      if (!Array.isArray(params)) {
        throw new Error("[ethjs-util] method getKeys expecting type Array as 'params' input, got '" + typeof params + "'");
      }
      if (typeof key !== "string") {
        throw new Error("[ethjs-util] method getKeys expecting type String for input 'key' got '" + typeof key + "'.");
      }
      var result = [];
      for (var i2 = 0; i2 < params.length; i2++) {
        var value = params[i2][key];
        if (allowEmpty && !value) {
          value = "";
        } else if (typeof value !== "string") {
          throw new Error("invalid abi");
        }
        result.push(value);
      }
      return result;
    }
    function isHexString(value, length) {
      if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
        return false;
      }
      if (length && value.length !== 2 + 2 * length) {
        return false;
      }
      return true;
    }
    module2.exports = {
      arrayContainsArray,
      intToBuffer,
      getBinarySize,
      isHexPrefixed,
      stripHexPrefix,
      padToEven,
      intToHex,
      fromAscii,
      fromUtf8,
      toAscii,
      toUtf8,
      getKeys,
      isHexString
    };
  }
});

// ../../node_modules/.pnpm/ethereumjs-util@7.1.0/node_modules/ethereumjs-util/dist/helpers.js
var require_helpers = __commonJS({
  "../../node_modules/.pnpm/ethereumjs-util@7.1.0/node_modules/ethereumjs-util/dist/helpers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.assertIsString = exports2.assertIsArray = exports2.assertIsBuffer = exports2.assertIsHexString = void 0;
    var ethjs_util_1 = require_lib2();
    exports2.assertIsHexString = function(input) {
      if (!ethjs_util_1.isHexString(input)) {
        const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`;
        throw new Error(msg);
      }
    };
    exports2.assertIsBuffer = function(input) {
      if (!Buffer.isBuffer(input)) {
        const msg = `This method only supports Buffer but input was: ${input}`;
        throw new Error(msg);
      }
    };
    exports2.assertIsArray = function(input) {
      if (!Array.isArray(input)) {
        const msg = `This method only supports number arrays but input was: ${input}`;
        throw new Error(msg);
      }
    };
    exports2.assertIsString = function(input) {
      if (typeof input !== "string") {
        const msg = `This method only supports strings but input was: ${input}`;
        throw new Error(msg);
      }
    };
  }
});

// ../../node_modules/.pnpm/ethereumjs-util@7.1.0/node_modules/ethereumjs-util/dist/bytes.js
var require_bytes = __commonJS({
  "../../node_modules/.pnpm/ethereumjs-util@7.1.0/node_modules/ethereumjs-util/dist/bytes.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.baToJSON = exports2.addHexPrefix = exports2.toUnsigned = exports2.fromSigned = exports2.bufferToHex = exports2.bufferToInt = exports2.toBuffer = exports2.unpadHexString = exports2.unpadArray = exports2.unpadBuffer = exports2.setLengthRight = exports2.setLengthLeft = exports2.zeros = void 0;
    var bn_js_1 = __importDefault(require_bn2());
    var ethjs_util_1 = require_lib2();
    var helpers_1 = require_helpers();
    exports2.zeros = function(bytes) {
      return Buffer.allocUnsafe(bytes).fill(0);
    };
    var setLength = function(msg, length, right) {
      const buf = exports2.zeros(length);
      if (right) {
        if (msg.length < length) {
          msg.copy(buf);
          return buf;
        }
        return msg.slice(0, length);
      } else {
        if (msg.length < length) {
          msg.copy(buf, length - msg.length);
          return buf;
        }
        return msg.slice(-length);
      }
    };
    exports2.setLengthLeft = function(msg, length) {
      helpers_1.assertIsBuffer(msg);
      return setLength(msg, length, false);
    };
    exports2.setLengthRight = function(msg, length) {
      helpers_1.assertIsBuffer(msg);
      return setLength(msg, length, true);
    };
    var stripZeros = function(a2) {
      let first = a2[0];
      while (a2.length > 0 && first.toString() === "0") {
        a2 = a2.slice(1);
        first = a2[0];
      }
      return a2;
    };
    exports2.unpadBuffer = function(a2) {
      helpers_1.assertIsBuffer(a2);
      return stripZeros(a2);
    };
    exports2.unpadArray = function(a2) {
      helpers_1.assertIsArray(a2);
      return stripZeros(a2);
    };
    exports2.unpadHexString = function(a2) {
      helpers_1.assertIsHexString(a2);
      a2 = ethjs_util_1.stripHexPrefix(a2);
      return stripZeros(a2);
    };
    exports2.toBuffer = function(v) {
      if (v === null || v === void 0) {
        return Buffer.allocUnsafe(0);
      }
      if (Buffer.isBuffer(v)) {
        return Buffer.from(v);
      }
      if (Array.isArray(v) || v instanceof Uint8Array) {
        return Buffer.from(v);
      }
      if (typeof v === "string") {
        if (!ethjs_util_1.isHexString(v)) {
          throw new Error(`Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${v}`);
        }
        return Buffer.from(ethjs_util_1.padToEven(ethjs_util_1.stripHexPrefix(v)), "hex");
      }
      if (typeof v === "number") {
        return ethjs_util_1.intToBuffer(v);
      }
      if (bn_js_1.default.isBN(v)) {
        return v.toArrayLike(Buffer);
      }
      if (v.toArray) {
        return Buffer.from(v.toArray());
      }
      if (v.toBuffer) {
        return Buffer.from(v.toBuffer());
      }
      throw new Error("invalid type");
    };
    exports2.bufferToInt = function(buf) {
      return new bn_js_1.default(exports2.toBuffer(buf)).toNumber();
    };
    exports2.bufferToHex = function(buf) {
      buf = exports2.toBuffer(buf);
      return "0x" + buf.toString("hex");
    };
    exports2.fromSigned = function(num) {
      return new bn_js_1.default(num).fromTwos(256);
    };
    exports2.toUnsigned = function(num) {
      return Buffer.from(num.toTwos(256).toArray());
    };
    exports2.addHexPrefix = function(str) {
      if (typeof str !== "string") {
        return str;
      }
      return ethjs_util_1.isHexPrefixed(str) ? str : "0x" + str;
    };
    exports2.baToJSON = function(ba) {
      if (Buffer.isBuffer(ba)) {
        return `0x${ba.toString("hex")}`;
      } else if (ba instanceof Array) {
        const array = [];
        for (let i2 = 0; i2 < ba.length; i2++) {
          array.push(exports2.baToJSON(ba[i2]));
        }
        return array;
      }
    };
  }
});

// ../../node_modules/.pnpm/ethereum-cryptography@0.1.3/node_modules/ethereum-cryptography/hash-utils.js
var require_hash_utils = __commonJS({
  "../../node_modules/.pnpm/ethereum-cryptography@0.1.3/node_modules/ethereum-cryptography/hash-utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function createHashFunction(hashConstructor) {
      return function(msg) {
        var hash = hashConstructor();
        hash.update(msg);
        return Buffer.from(hash.digest());
      };
    }
    exports2.createHashFunction = createHashFunction;
  }
});

// ../../node_modules/.pnpm/keccak@3.0.1/node_modules/keccak/lib/api/keccak.js
var require_keccak = __commonJS({
  "../../node_modules/.pnpm/keccak@3.0.1/node_modules/keccak/lib/api/keccak.js"(exports2, module2) {
    var { Transform } = __require("stream");
    module2.exports = (KeccakState) => class Keccak extends Transform {
      constructor(rate, capacity, delimitedSuffix, hashBitLength, options) {
        super(options);
        this._rate = rate;
        this._capacity = capacity;
        this._delimitedSuffix = delimitedSuffix;
        this._hashBitLength = hashBitLength;
        this._options = options;
        this._state = new KeccakState();
        this._state.initialize(rate, capacity);
        this._finalized = false;
      }
      _transform(chunk, encoding, callback) {
        let error = null;
        try {
          this.update(chunk, encoding);
        } catch (err) {
          error = err;
        }
        callback(error);
      }
      _flush(callback) {
        let error = null;
        try {
          this.push(this.digest());
        } catch (err) {
          error = err;
        }
        callback(error);
      }
      update(data, encoding) {
        if (!Buffer.isBuffer(data) && typeof data !== "string")
          throw new TypeError("Data must be a string or a buffer");
        if (this._finalized)
          throw new Error("Digest already called");
        if (!Buffer.isBuffer(data))
          data = Buffer.from(data, encoding);
        this._state.absorb(data);
        return this;
      }
      digest(encoding) {
        if (this._finalized)
          throw new Error("Digest already called");
        this._finalized = true;
        if (this._delimitedSuffix)
          this._state.absorbLastFewBits(this._delimitedSuffix);
        let digest = this._state.squeeze(this._hashBitLength / 8);
        if (encoding !== void 0)
          digest = digest.toString(encoding);
        this._resetState();
        return digest;
      }
      _resetState() {
        this._state.initialize(this._rate, this._capacity);
        return this;
      }
      _clone() {
        const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);
        this._state.copy(clone._state);
        clone._finalized = this._finalized;
        return clone;
      }
    };
  }
});

// ../../node_modules/.pnpm/keccak@3.0.1/node_modules/keccak/lib/api/shake.js
var require_shake = __commonJS({
  "../../node_modules/.pnpm/keccak@3.0.1/node_modules/keccak/lib/api/shake.js"(exports2, module2) {
    var { Transform } = __require("stream");
    module2.exports = (KeccakState) => class Shake extends Transform {
      constructor(rate, capacity, delimitedSuffix, options) {
        super(options);
        this._rate = rate;
        this._capacity = capacity;
        this._delimitedSuffix = delimitedSuffix;
        this._options = options;
        this._state = new KeccakState();
        this._state.initialize(rate, capacity);
        this._finalized = false;
      }
      _transform(chunk, encoding, callback) {
        let error = null;
        try {
          this.update(chunk, encoding);
        } catch (err) {
          error = err;
        }
        callback(error);
      }
      _flush() {
      }
      _read(size) {
        this.push(this.squeeze(size));
      }
      update(data, encoding) {
        if (!Buffer.isBuffer(data) && typeof data !== "string")
          throw new TypeError("Data must be a string or a buffer");
        if (this._finalized)
          throw new Error("Squeeze already called");
        if (!Buffer.isBuffer(data))
          data = Buffer.from(data, encoding);
        this._state.absorb(data);
        return this;
      }
      squeeze(dataByteLength, encoding) {
        if (!this._finalized) {
          this._finalized = true;
          this._state.absorbLastFewBits(this._delimitedSuffix);
        }
        let data = this._state.squeeze(dataByteLength);
        if (encoding !== void 0)
          data = data.toString(encoding);
        return data;
      }
      _resetState() {
        this._state.initialize(this._rate, this._capacity);
        return this;
      }
      _clone() {
        const clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options);
        this._state.copy(clone._state);
        clone._finalized = this._finalized;
        return clone;
      }
    };
  }
});

// ../../node_modules/.pnpm/keccak@3.0.1/node_modules/keccak/lib/api/index.js
var require_api = __commonJS({
  "../../node_modules/.pnpm/keccak@3.0.1/node_modules/keccak/lib/api/index.js"(exports2, module2) {
    var createKeccak = require_keccak();
    var createShake = require_shake();
    module2.exports = function(KeccakState) {
      const Keccak = createKeccak(KeccakState);
      const Shake = createShake(KeccakState);
      return function(algorithm, options) {
        const hash = typeof algorithm === "string" ? algorithm.toLowerCase() : algorithm;
        switch (hash) {
          case "keccak224":
            return new Keccak(1152, 448, null, 224, options);
          case "keccak256":
            return new Keccak(1088, 512, null, 256, options);
          case "keccak384":
            return new Keccak(832, 768, null, 384, options);
          case "keccak512":
            return new Keccak(576, 1024, null, 512, options);
          case "sha3-224":
            return new Keccak(1152, 448, 6, 224, options);
          case "sha3-256":
            return new Keccak(1088, 512, 6, 256, options);
          case "sha3-384":
            return new Keccak(832, 768, 6, 384, options);
          case "sha3-512":
            return new Keccak(576, 1024, 6, 512, options);
          case "shake128":
            return new Shake(1344, 256, 31, options);
          case "shake256":
            return new Shake(1088, 512, 31, options);
          default:
            throw new Error("Invald algorithm: " + algorithm);
        }
      };
    };
  }
});

// ../../node_modules/.pnpm/keccak@3.0.1/node_modules/keccak/bindings.js
var require_bindings2 = __commonJS({
  "../../node_modules/.pnpm/keccak@3.0.1/node_modules/keccak/bindings.js"(exports2, module2) {
    module2.exports = require_api()(require_node_gyp_build()(__dirname));
  }
});

// ../../node_modules/.pnpm/keccak@3.0.1/node_modules/keccak/lib/keccak-state-unroll.js
var require_keccak_state_unroll = __commonJS({
  "../../node_modules/.pnpm/keccak@3.0.1/node_modules/keccak/lib/keccak-state-unroll.js"(exports2) {
    var P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
    exports2.p1600 = function(s) {
      for (let round = 0; round < 24; ++round) {
        const lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
        const hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
        const lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
        const hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
        const lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
        const hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
        const lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
        const hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
        const lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
        const hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
        let lo = lo4 ^ (lo1 << 1 | hi1 >>> 31);
        let hi = hi4 ^ (hi1 << 1 | lo1 >>> 31);
        const t1slo0 = s[0] ^ lo;
        const t1shi0 = s[1] ^ hi;
        const t1slo5 = s[10] ^ lo;
        const t1shi5 = s[11] ^ hi;
        const t1slo10 = s[20] ^ lo;
        const t1shi10 = s[21] ^ hi;
        const t1slo15 = s[30] ^ lo;
        const t1shi15 = s[31] ^ hi;
        const t1slo20 = s[40] ^ lo;
        const t1shi20 = s[41] ^ hi;
        lo = lo0 ^ (lo2 << 1 | hi2 >>> 31);
        hi = hi0 ^ (hi2 << 1 | lo2 >>> 31);
        const t1slo1 = s[2] ^ lo;
        const t1shi1 = s[3] ^ hi;
        const t1slo6 = s[12] ^ lo;
        const t1shi6 = s[13] ^ hi;
        const t1slo11 = s[22] ^ lo;
        const t1shi11 = s[23] ^ hi;
        const t1slo16 = s[32] ^ lo;
        const t1shi16 = s[33] ^ hi;
        const t1slo21 = s[42] ^ lo;
        const t1shi21 = s[43] ^ hi;
        lo = lo1 ^ (lo3 << 1 | hi3 >>> 31);
        hi = hi1 ^ (hi3 << 1 | lo3 >>> 31);
        const t1slo2 = s[4] ^ lo;
        const t1shi2 = s[5] ^ hi;
        const t1slo7 = s[14] ^ lo;
        const t1shi7 = s[15] ^ hi;
        const t1slo12 = s[24] ^ lo;
        const t1shi12 = s[25] ^ hi;
        const t1slo17 = s[34] ^ lo;
        const t1shi17 = s[35] ^ hi;
        const t1slo22 = s[44] ^ lo;
        const t1shi22 = s[45] ^ hi;
        lo = lo2 ^ (lo4 << 1 | hi4 >>> 31);
        hi = hi2 ^ (hi4 << 1 | lo4 >>> 31);
        const t1slo3 = s[6] ^ lo;
        const t1shi3 = s[7] ^ hi;
        const t1slo8 = s[16] ^ lo;
        const t1shi8 = s[17] ^ hi;
        const t1slo13 = s[26] ^ lo;
        const t1shi13 = s[27] ^ hi;
        const t1slo18 = s[36] ^ lo;
        const t1shi18 = s[37] ^ hi;
        const t1slo23 = s[46] ^ lo;
        const t1shi23 = s[47] ^ hi;
        lo = lo3 ^ (lo0 << 1 | hi0 >>> 31);
        hi = hi3 ^ (hi0 << 1 | lo0 >>> 31);
        const t1slo4 = s[8] ^ lo;
        const t1shi4 = s[9] ^ hi;
        const t1slo9 = s[18] ^ lo;
        const t1shi9 = s[19] ^ hi;
        const t1slo14 = s[28] ^ lo;
        const t1shi14 = s[29] ^ hi;
        const t1slo19 = s[38] ^ lo;
        const t1shi19 = s[39] ^ hi;
        const t1slo24 = s[48] ^ lo;
        const t1shi24 = s[49] ^ hi;
        const t2slo0 = t1slo0;
        const t2shi0 = t1shi0;
        const t2slo16 = t1shi5 << 4 | t1slo5 >>> 28;
        const t2shi16 = t1slo5 << 4 | t1shi5 >>> 28;
        const t2slo7 = t1slo10 << 3 | t1shi10 >>> 29;
        const t2shi7 = t1shi10 << 3 | t1slo10 >>> 29;
        const t2slo23 = t1shi15 << 9 | t1slo15 >>> 23;
        const t2shi23 = t1slo15 << 9 | t1shi15 >>> 23;
        const t2slo14 = t1slo20 << 18 | t1shi20 >>> 14;
        const t2shi14 = t1shi20 << 18 | t1slo20 >>> 14;
        const t2slo10 = t1slo1 << 1 | t1shi1 >>> 31;
        const t2shi10 = t1shi1 << 1 | t1slo1 >>> 31;
        const t2slo1 = t1shi6 << 12 | t1slo6 >>> 20;
        const t2shi1 = t1slo6 << 12 | t1shi6 >>> 20;
        const t2slo17 = t1slo11 << 10 | t1shi11 >>> 22;
        const t2shi17 = t1shi11 << 10 | t1slo11 >>> 22;
        const t2slo8 = t1shi16 << 13 | t1slo16 >>> 19;
        const t2shi8 = t1slo16 << 13 | t1shi16 >>> 19;
        const t2slo24 = t1slo21 << 2 | t1shi21 >>> 30;
        const t2shi24 = t1shi21 << 2 | t1slo21 >>> 30;
        const t2slo20 = t1shi2 << 30 | t1slo2 >>> 2;
        const t2shi20 = t1slo2 << 30 | t1shi2 >>> 2;
        const t2slo11 = t1slo7 << 6 | t1shi7 >>> 26;
        const t2shi11 = t1shi7 << 6 | t1slo7 >>> 26;
        const t2slo2 = t1shi12 << 11 | t1slo12 >>> 21;
        const t2shi2 = t1slo12 << 11 | t1shi12 >>> 21;
        const t2slo18 = t1slo17 << 15 | t1shi17 >>> 17;
        const t2shi18 = t1shi17 << 15 | t1slo17 >>> 17;
        const t2slo9 = t1shi22 << 29 | t1slo22 >>> 3;
        const t2shi9 = t1slo22 << 29 | t1shi22 >>> 3;
        const t2slo5 = t1slo3 << 28 | t1shi3 >>> 4;
        const t2shi5 = t1shi3 << 28 | t1slo3 >>> 4;
        const t2slo21 = t1shi8 << 23 | t1slo8 >>> 9;
        const t2shi21 = t1slo8 << 23 | t1shi8 >>> 9;
        const t2slo12 = t1slo13 << 25 | t1shi13 >>> 7;
        const t2shi12 = t1shi13 << 25 | t1slo13 >>> 7;
        const t2slo3 = t1slo18 << 21 | t1shi18 >>> 11;
        const t2shi3 = t1shi18 << 21 | t1slo18 >>> 11;
        const t2slo19 = t1shi23 << 24 | t1slo23 >>> 8;
        const t2shi19 = t1slo23 << 24 | t1shi23 >>> 8;
        const t2slo15 = t1slo4 << 27 | t1shi4 >>> 5;
        const t2shi15 = t1shi4 << 27 | t1slo4 >>> 5;
        const t2slo6 = t1slo9 << 20 | t1shi9 >>> 12;
        const t2shi6 = t1shi9 << 20 | t1slo9 >>> 12;
        const t2slo22 = t1shi14 << 7 | t1slo14 >>> 25;
        const t2shi22 = t1slo14 << 7 | t1shi14 >>> 25;
        const t2slo13 = t1slo19 << 8 | t1shi19 >>> 24;
        const t2shi13 = t1shi19 << 8 | t1slo19 >>> 24;
        const t2slo4 = t1slo24 << 14 | t1shi24 >>> 18;
        const t2shi4 = t1shi24 << 14 | t1slo24 >>> 18;
        s[0] = t2slo0 ^ ~t2slo1 & t2slo2;
        s[1] = t2shi0 ^ ~t2shi1 & t2shi2;
        s[10] = t2slo5 ^ ~t2slo6 & t2slo7;
        s[11] = t2shi5 ^ ~t2shi6 & t2shi7;
        s[20] = t2slo10 ^ ~t2slo11 & t2slo12;
        s[21] = t2shi10 ^ ~t2shi11 & t2shi12;
        s[30] = t2slo15 ^ ~t2slo16 & t2slo17;
        s[31] = t2shi15 ^ ~t2shi16 & t2shi17;
        s[40] = t2slo20 ^ ~t2slo21 & t2slo22;
        s[41] = t2shi20 ^ ~t2shi21 & t2shi22;
        s[2] = t2slo1 ^ ~t2slo2 & t2slo3;
        s[3] = t2shi1 ^ ~t2shi2 & t2shi3;
        s[12] = t2slo6 ^ ~t2slo7 & t2slo8;
        s[13] = t2shi6 ^ ~t2shi7 & t2shi8;
        s[22] = t2slo11 ^ ~t2slo12 & t2slo13;
        s[23] = t2shi11 ^ ~t2shi12 & t2shi13;
        s[32] = t2slo16 ^ ~t2slo17 & t2slo18;
        s[33] = t2shi16 ^ ~t2shi17 & t2shi18;
        s[42] = t2slo21 ^ ~t2slo22 & t2slo23;
        s[43] = t2shi21 ^ ~t2shi22 & t2shi23;
        s[4] = t2slo2 ^ ~t2slo3 & t2slo4;
        s[5] = t2shi2 ^ ~t2shi3 & t2shi4;
        s[14] = t2slo7 ^ ~t2slo8 & t2slo9;
        s[15] = t2shi7 ^ ~t2shi8 & t2shi9;
        s[24] = t2slo12 ^ ~t2slo13 & t2slo14;
        s[25] = t2shi12 ^ ~t2shi13 & t2shi14;
        s[34] = t2slo17 ^ ~t2slo18 & t2slo19;
        s[35] = t2shi17 ^ ~t2shi18 & t2shi19;
        s[44] = t2slo22 ^ ~t2slo23 & t2slo24;
        s[45] = t2shi22 ^ ~t2shi23 & t2shi24;
        s[6] = t2slo3 ^ ~t2slo4 & t2slo0;
        s[7] = t2shi3 ^ ~t2shi4 & t2shi0;
        s[16] = t2slo8 ^ ~t2slo9 & t2slo5;
        s[17] = t2shi8 ^ ~t2shi9 & t2shi5;
        s[26] = t2slo13 ^ ~t2slo14 & t2slo10;
        s[27] = t2shi13 ^ ~t2shi14 & t2shi10;
        s[36] = t2slo18 ^ ~t2slo19 & t2slo15;
        s[37] = t2shi18 ^ ~t2shi19 & t2shi15;
        s[46] = t2slo23 ^ ~t2slo24 & t2slo20;
        s[47] = t2shi23 ^ ~t2shi24 & t2shi20;
        s[8] = t2slo4 ^ ~t2slo0 & t2slo1;
        s[9] = t2shi4 ^ ~t2shi0 & t2shi1;
        s[18] = t2slo9 ^ ~t2slo5 & t2slo6;
        s[19] = t2shi9 ^ ~t2shi5 & t2shi6;
        s[28] = t2slo14 ^ ~t2slo10 & t2slo11;
        s[29] = t2shi14 ^ ~t2shi10 & t2shi11;
        s[38] = t2slo19 ^ ~t2slo15 & t2slo16;
        s[39] = t2shi19 ^ ~t2shi15 & t2shi16;
        s[48] = t2slo24 ^ ~t2slo20 & t2slo21;
        s[49] = t2shi24 ^ ~t2shi20 & t2shi21;
        s[0] ^= P1600_ROUND_CONSTANTS[round * 2];
        s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1];
      }
    };
  }
});

// ../../node_modules/.pnpm/keccak@3.0.1/node_modules/keccak/lib/keccak.js
var require_keccak2 = __commonJS({
  "../../node_modules/.pnpm/keccak@3.0.1/node_modules/keccak/lib/keccak.js"(exports2, module2) {
    var keccakState = require_keccak_state_unroll();
    function Keccak() {
      this.state = [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ];
      this.blockSize = null;
      this.count = 0;
      this.squeezing = false;
    }
    Keccak.prototype.initialize = function(rate, capacity) {
      for (let i2 = 0; i2 < 50; ++i2)
        this.state[i2] = 0;
      this.blockSize = rate / 8;
      this.count = 0;
      this.squeezing = false;
    };
    Keccak.prototype.absorb = function(data) {
      for (let i2 = 0; i2 < data.length; ++i2) {
        this.state[~~(this.count / 4)] ^= data[i2] << 8 * (this.count % 4);
        this.count += 1;
        if (this.count === this.blockSize) {
          keccakState.p1600(this.state);
          this.count = 0;
        }
      }
    };
    Keccak.prototype.absorbLastFewBits = function(bits) {
      this.state[~~(this.count / 4)] ^= bits << 8 * (this.count % 4);
      if ((bits & 128) !== 0 && this.count === this.blockSize - 1)
        keccakState.p1600(this.state);
      this.state[~~((this.blockSize - 1) / 4)] ^= 128 << 8 * ((this.blockSize - 1) % 4);
      keccakState.p1600(this.state);
      this.count = 0;
      this.squeezing = true;
    };
    Keccak.prototype.squeeze = function(length) {
      if (!this.squeezing)
        this.absorbLastFewBits(1);
      const output = Buffer.alloc(length);
      for (let i2 = 0; i2 < length; ++i2) {
        output[i2] = this.state[~~(this.count / 4)] >>> 8 * (this.count % 4) & 255;
        this.count += 1;
        if (this.count === this.blockSize) {
          keccakState.p1600(this.state);
          this.count = 0;
        }
      }
      return output;
    };
    Keccak.prototype.copy = function(dest) {
      for (let i2 = 0; i2 < 50; ++i2)
        dest.state[i2] = this.state[i2];
      dest.blockSize = this.blockSize;
      dest.count = this.count;
      dest.squeezing = this.squeezing;
    };
    module2.exports = Keccak;
  }
});

// ../../node_modules/.pnpm/keccak@3.0.1/node_modules/keccak/js.js
var require_js = __commonJS({
  "../../node_modules/.pnpm/keccak@3.0.1/node_modules/keccak/js.js"(exports2, module2) {
    module2.exports = require_api()(require_keccak2());
  }
});

// ../../node_modules/.pnpm/keccak@3.0.1/node_modules/keccak/index.js
var require_keccak3 = __commonJS({
  "../../node_modules/.pnpm/keccak@3.0.1/node_modules/keccak/index.js"(exports2, module2) {
    try {
      module2.exports = require_bindings2();
    } catch (err) {
      module2.exports = require_js();
    }
  }
});

// ../../node_modules/.pnpm/ethereum-cryptography@0.1.3/node_modules/ethereum-cryptography/keccak.js
var require_keccak4 = __commonJS({
  "../../node_modules/.pnpm/ethereum-cryptography@0.1.3/node_modules/ethereum-cryptography/keccak.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var hash_utils_1 = require_hash_utils();
    var createKeccakHash = require_keccak3();
    exports2.keccak224 = hash_utils_1.createHashFunction(function() {
      return createKeccakHash("keccak224");
    });
    exports2.keccak256 = hash_utils_1.createHashFunction(function() {
      return createKeccakHash("keccak256");
    });
    exports2.keccak384 = hash_utils_1.createHashFunction(function() {
      return createKeccakHash("keccak384");
    });
    exports2.keccak512 = hash_utils_1.createHashFunction(function() {
      return createKeccakHash("keccak512");
    });
  }
});

// ../../node_modules/.pnpm/create-hash@1.2.0/node_modules/create-hash/index.js
var require_create_hash = __commonJS({
  "../../node_modules/.pnpm/create-hash@1.2.0/node_modules/create-hash/index.js"(exports2, module2) {
    module2.exports = __require("crypto").createHash;
  }
});

// ../../node_modules/.pnpm/ethereumjs-util@7.1.0/node_modules/ethereumjs-util/dist/hash.js
var require_hash2 = __commonJS({
  "../../node_modules/.pnpm/ethereumjs-util@7.1.0/node_modules/ethereumjs-util/dist/hash.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o2, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o2, k2, { enumerable: true, get: function() {
        return m2[k];
      } });
    } : function(o2, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m2[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rlphash = exports2.ripemd160FromArray = exports2.ripemd160FromString = exports2.ripemd160 = exports2.sha256FromArray = exports2.sha256FromString = exports2.sha256 = exports2.keccakFromArray = exports2.keccakFromHexString = exports2.keccakFromString = exports2.keccak256 = exports2.keccak = void 0;
    var keccak_1 = require_keccak4();
    var createHash = require_create_hash();
    var rlp = __importStar(require_dist());
    var bytes_1 = require_bytes();
    var helpers_1 = require_helpers();
    exports2.keccak = function(a2, bits = 256) {
      helpers_1.assertIsBuffer(a2);
      switch (bits) {
        case 224: {
          return keccak_1.keccak224(a2);
        }
        case 256: {
          return keccak_1.keccak256(a2);
        }
        case 384: {
          return keccak_1.keccak384(a2);
        }
        case 512: {
          return keccak_1.keccak512(a2);
        }
        default: {
          throw new Error(`Invald algorithm: keccak${bits}`);
        }
      }
    };
    exports2.keccak256 = function(a2) {
      return exports2.keccak(a2);
    };
    exports2.keccakFromString = function(a2, bits = 256) {
      helpers_1.assertIsString(a2);
      const buf = Buffer.from(a2, "utf8");
      return exports2.keccak(buf, bits);
    };
    exports2.keccakFromHexString = function(a2, bits = 256) {
      helpers_1.assertIsHexString(a2);
      return exports2.keccak(bytes_1.toBuffer(a2), bits);
    };
    exports2.keccakFromArray = function(a2, bits = 256) {
      helpers_1.assertIsArray(a2);
      return exports2.keccak(bytes_1.toBuffer(a2), bits);
    };
    var _sha256 = function(a2) {
      a2 = bytes_1.toBuffer(a2);
      return createHash("sha256").update(a2).digest();
    };
    exports2.sha256 = function(a2) {
      helpers_1.assertIsBuffer(a2);
      return _sha256(a2);
    };
    exports2.sha256FromString = function(a2) {
      helpers_1.assertIsString(a2);
      return _sha256(a2);
    };
    exports2.sha256FromArray = function(a2) {
      helpers_1.assertIsArray(a2);
      return _sha256(a2);
    };
    var _ripemd160 = function(a2, padded) {
      a2 = bytes_1.toBuffer(a2);
      const hash = createHash("rmd160").update(a2).digest();
      if (padded === true) {
        return bytes_1.setLengthLeft(hash, 32);
      } else {
        return hash;
      }
    };
    exports2.ripemd160 = function(a2, padded) {
      helpers_1.assertIsBuffer(a2);
      return _ripemd160(a2, padded);
    };
    exports2.ripemd160FromString = function(a2, padded) {
      helpers_1.assertIsString(a2);
      return _ripemd160(a2, padded);
    };
    exports2.ripemd160FromArray = function(a2, padded) {
      helpers_1.assertIsArray(a2);
      return _ripemd160(a2, padded);
    };
    exports2.rlphash = function(a2) {
      return exports2.keccak(rlp.encode(a2));
    };
  }
});

// ../../node_modules/.pnpm/ethereumjs-util@7.1.0/node_modules/ethereumjs-util/dist/types.js
var require_types = __commonJS({
  "../../node_modules/.pnpm/ethereumjs-util@7.1.0/node_modules/ethereumjs-util/dist/types.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toType = exports2.TypeOutput = exports2.bnToRlp = exports2.bnToUnpaddedBuffer = exports2.bnToHex = void 0;
    var bn_js_1 = __importDefault(require_bn2());
    var ethjs_util_1 = require_lib2();
    var bytes_1 = require_bytes();
    function bnToHex(value) {
      return `0x${value.toString(16)}`;
    }
    exports2.bnToHex = bnToHex;
    function bnToUnpaddedBuffer(value) {
      return bytes_1.unpadBuffer(value.toArrayLike(Buffer));
    }
    exports2.bnToUnpaddedBuffer = bnToUnpaddedBuffer;
    function bnToRlp(value) {
      return bnToUnpaddedBuffer(value);
    }
    exports2.bnToRlp = bnToRlp;
    var TypeOutput;
    (function(TypeOutput2) {
      TypeOutput2[TypeOutput2["Number"] = 0] = "Number";
      TypeOutput2[TypeOutput2["BN"] = 1] = "BN";
      TypeOutput2[TypeOutput2["Buffer"] = 2] = "Buffer";
      TypeOutput2[TypeOutput2["PrefixedHexString"] = 3] = "PrefixedHexString";
    })(TypeOutput = exports2.TypeOutput || (exports2.TypeOutput = {}));
    function toType(input, outputType) {
      if (typeof input === "string" && !ethjs_util_1.isHexString(input)) {
        throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);
      } else if (typeof input === "number" && !Number.isSafeInteger(input)) {
        throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
      }
      input = bytes_1.toBuffer(input);
      if (outputType === TypeOutput.Buffer) {
        return input;
      } else if (outputType === TypeOutput.BN) {
        return new bn_js_1.default(input);
      } else if (outputType === TypeOutput.Number) {
        const bn = new bn_js_1.default(input);
        const max = new bn_js_1.default(Number.MAX_SAFE_INTEGER.toString());
        if (bn.gt(max)) {
          throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");
        }
        return bn.toNumber();
      } else {
        return `0x${input.toString("hex")}`;
      }
    }
    exports2.toType = toType;
  }
});

// ../../node_modules/.pnpm/ethereumjs-util@7.1.0/node_modules/ethereumjs-util/dist/account.js
var require_account = __commonJS({
  "../../node_modules/.pnpm/ethereumjs-util@7.1.0/node_modules/ethereumjs-util/dist/account.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o2, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o2, k2, { enumerable: true, get: function() {
        return m2[k];
      } });
    } : function(o2, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m2[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isZeroAddress = exports2.zeroAddress = exports2.importPublic = exports2.privateToAddress = exports2.privateToPublic = exports2.publicToAddress = exports2.pubToAddress = exports2.isValidPublic = exports2.isValidPrivate = exports2.generateAddress2 = exports2.generateAddress = exports2.isValidChecksumAddress = exports2.toChecksumAddress = exports2.isValidAddress = exports2.Account = void 0;
    var assert_1 = __importDefault(__require("assert"));
    var bn_js_1 = __importDefault(require_bn2());
    var rlp = __importStar(require_dist());
    var secp256k1_1 = require_secp256k13();
    var ethjs_util_1 = require_lib2();
    var constants_1 = require_constants();
    var bytes_1 = require_bytes();
    var hash_1 = require_hash2();
    var helpers_1 = require_helpers();
    var types_1 = require_types();
    var Account = class {
      constructor(nonce = new bn_js_1.default(0), balance = new bn_js_1.default(0), stateRoot = constants_1.KECCAK256_RLP, codeHash = constants_1.KECCAK256_NULL) {
        this.nonce = nonce;
        this.balance = balance;
        this.stateRoot = stateRoot;
        this.codeHash = codeHash;
        this._validate();
      }
      static fromAccountData(accountData) {
        const { nonce, balance, stateRoot, codeHash } = accountData;
        return new Account(nonce ? new bn_js_1.default(bytes_1.toBuffer(nonce)) : void 0, balance ? new bn_js_1.default(bytes_1.toBuffer(balance)) : void 0, stateRoot ? bytes_1.toBuffer(stateRoot) : void 0, codeHash ? bytes_1.toBuffer(codeHash) : void 0);
      }
      static fromRlpSerializedAccount(serialized) {
        const values = rlp.decode(serialized);
        if (!Array.isArray(values)) {
          throw new Error("Invalid serialized account input. Must be array");
        }
        return this.fromValuesArray(values);
      }
      static fromValuesArray(values) {
        const [nonce, balance, stateRoot, codeHash] = values;
        return new Account(new bn_js_1.default(nonce), new bn_js_1.default(balance), stateRoot, codeHash);
      }
      _validate() {
        if (this.nonce.lt(new bn_js_1.default(0))) {
          throw new Error("nonce must be greater than zero");
        }
        if (this.balance.lt(new bn_js_1.default(0))) {
          throw new Error("balance must be greater than zero");
        }
        if (this.stateRoot.length !== 32) {
          throw new Error("stateRoot must have a length of 32");
        }
        if (this.codeHash.length !== 32) {
          throw new Error("codeHash must have a length of 32");
        }
      }
      raw() {
        return [
          types_1.bnToUnpaddedBuffer(this.nonce),
          types_1.bnToUnpaddedBuffer(this.balance),
          this.stateRoot,
          this.codeHash
        ];
      }
      serialize() {
        return rlp.encode(this.raw());
      }
      isContract() {
        return !this.codeHash.equals(constants_1.KECCAK256_NULL);
      }
      isEmpty() {
        return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(constants_1.KECCAK256_NULL);
      }
    };
    exports2.Account = Account;
    exports2.isValidAddress = function(hexAddress) {
      try {
        helpers_1.assertIsString(hexAddress);
      } catch (e2) {
        return false;
      }
      return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);
    };
    exports2.toChecksumAddress = function(hexAddress, eip1191ChainId) {
      helpers_1.assertIsHexString(hexAddress);
      const address = ethjs_util_1.stripHexPrefix(hexAddress).toLowerCase();
      let prefix2 = "";
      if (eip1191ChainId) {
        const chainId = types_1.toType(eip1191ChainId, types_1.TypeOutput.BN);
        prefix2 = chainId.toString() + "0x";
      }
      const hash = hash_1.keccakFromString(prefix2 + address).toString("hex");
      let ret = "0x";
      for (let i2 = 0; i2 < address.length; i2++) {
        if (parseInt(hash[i2], 16) >= 8) {
          ret += address[i2].toUpperCase();
        } else {
          ret += address[i2];
        }
      }
      return ret;
    };
    exports2.isValidChecksumAddress = function(hexAddress, eip1191ChainId) {
      return exports2.isValidAddress(hexAddress) && exports2.toChecksumAddress(hexAddress, eip1191ChainId) === hexAddress;
    };
    exports2.generateAddress = function(from, nonce) {
      helpers_1.assertIsBuffer(from);
      helpers_1.assertIsBuffer(nonce);
      const nonceBN = new bn_js_1.default(nonce);
      if (nonceBN.isZero()) {
        return hash_1.rlphash([from, null]).slice(-20);
      }
      return hash_1.rlphash([from, Buffer.from(nonceBN.toArray())]).slice(-20);
    };
    exports2.generateAddress2 = function(from, salt, initCode) {
      helpers_1.assertIsBuffer(from);
      helpers_1.assertIsBuffer(salt);
      helpers_1.assertIsBuffer(initCode);
      assert_1.default(from.length === 20);
      assert_1.default(salt.length === 32);
      const address = hash_1.keccak256(Buffer.concat([Buffer.from("ff", "hex"), from, salt, hash_1.keccak256(initCode)]));
      return address.slice(-20);
    };
    exports2.isValidPrivate = function(privateKey) {
      return secp256k1_1.privateKeyVerify(privateKey);
    };
    exports2.isValidPublic = function(publicKey, sanitize = false) {
      helpers_1.assertIsBuffer(publicKey);
      if (publicKey.length === 64) {
        return secp256k1_1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));
      }
      if (!sanitize) {
        return false;
      }
      return secp256k1_1.publicKeyVerify(publicKey);
    };
    exports2.pubToAddress = function(pubKey, sanitize = false) {
      helpers_1.assertIsBuffer(pubKey);
      if (sanitize && pubKey.length !== 64) {
        pubKey = Buffer.from(secp256k1_1.publicKeyConvert(pubKey, false).slice(1));
      }
      assert_1.default(pubKey.length === 64);
      return hash_1.keccak(pubKey).slice(-20);
    };
    exports2.publicToAddress = exports2.pubToAddress;
    exports2.privateToPublic = function(privateKey) {
      helpers_1.assertIsBuffer(privateKey);
      return Buffer.from(secp256k1_1.publicKeyCreate(privateKey, false)).slice(1);
    };
    exports2.privateToAddress = function(privateKey) {
      return exports2.publicToAddress(exports2.privateToPublic(privateKey));
    };
    exports2.importPublic = function(publicKey) {
      helpers_1.assertIsBuffer(publicKey);
      if (publicKey.length !== 64) {
        publicKey = Buffer.from(secp256k1_1.publicKeyConvert(publicKey, false).slice(1));
      }
      return publicKey;
    };
    exports2.zeroAddress = function() {
      const addressLength = 20;
      const addr = bytes_1.zeros(addressLength);
      return bytes_1.bufferToHex(addr);
    };
    exports2.isZeroAddress = function(hexAddress) {
      try {
        helpers_1.assertIsString(hexAddress);
      } catch (e2) {
        return false;
      }
      const zeroAddr = exports2.zeroAddress();
      return zeroAddr === hexAddress;
    };
  }
});

// ../../node_modules/.pnpm/ethereumjs-util@7.1.0/node_modules/ethereumjs-util/dist/address.js
var require_address = __commonJS({
  "../../node_modules/.pnpm/ethereumjs-util@7.1.0/node_modules/ethereumjs-util/dist/address.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Address = void 0;
    var assert_1 = __importDefault(__require("assert"));
    var bn_js_1 = __importDefault(require_bn2());
    var bytes_1 = require_bytes();
    var account_1 = require_account();
    var Address = class {
      constructor(buf) {
        assert_1.default(buf.length === 20, "Invalid address length");
        this.buf = buf;
      }
      static zero() {
        return new Address(bytes_1.zeros(20));
      }
      static fromString(str) {
        assert_1.default(account_1.isValidAddress(str), "Invalid address");
        return new Address(bytes_1.toBuffer(str));
      }
      static fromPublicKey(pubKey) {
        assert_1.default(Buffer.isBuffer(pubKey), "Public key should be Buffer");
        const buf = account_1.pubToAddress(pubKey);
        return new Address(buf);
      }
      static fromPrivateKey(privateKey) {
        assert_1.default(Buffer.isBuffer(privateKey), "Private key should be Buffer");
        const buf = account_1.privateToAddress(privateKey);
        return new Address(buf);
      }
      static generate(from, nonce) {
        assert_1.default(bn_js_1.default.isBN(nonce));
        return new Address(account_1.generateAddress(from.buf, nonce.toArrayLike(Buffer)));
      }
      static generate2(from, salt, initCode) {
        assert_1.default(Buffer.isBuffer(salt));
        assert_1.default(Buffer.isBuffer(initCode));
        return new Address(account_1.generateAddress2(from.buf, salt, initCode));
      }
      equals(address) {
        return this.buf.equals(address.buf);
      }
      isZero() {
        return this.equals(Address.zero());
      }
      isPrecompileOrSystemAddress() {
        const addressBN = new bn_js_1.default(this.buf);
        const rangeMin = new bn_js_1.default(0);
        const rangeMax = new bn_js_1.default("ffff", "hex");
        return addressBN.gte(rangeMin) && addressBN.lte(rangeMax);
      }
      toString() {
        return "0x" + this.buf.toString("hex");
      }
      toBuffer() {
        return Buffer.from(this.buf);
      }
    };
    exports2.Address = Address;
  }
});

// ../../node_modules/.pnpm/ethereumjs-util@7.1.0/node_modules/ethereumjs-util/dist/signature.js
var require_signature3 = __commonJS({
  "../../node_modules/.pnpm/ethereumjs-util@7.1.0/node_modules/ethereumjs-util/dist/signature.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hashPersonalMessage = exports2.isValidSignature = exports2.fromRpcSig = exports2.toCompactSig = exports2.toRpcSig = exports2.ecrecover = exports2.ecsign = void 0;
    var secp256k1_1 = require_secp256k13();
    var bn_js_1 = __importDefault(require_bn2());
    var bytes_1 = require_bytes();
    var hash_1 = require_hash2();
    var helpers_1 = require_helpers();
    var types_1 = require_types();
    function ecsign(msgHash, privateKey, chainId) {
      const { signature, recid: recovery } = secp256k1_1.ecdsaSign(msgHash, privateKey);
      const r = Buffer.from(signature.slice(0, 32));
      const s = Buffer.from(signature.slice(32, 64));
      if (!chainId || typeof chainId === "number") {
        if (chainId && !Number.isSafeInteger(chainId)) {
          throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
        }
        const v2 = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;
        return { r, s, v: v2 };
      }
      const chainIdBN = types_1.toType(chainId, types_1.TypeOutput.BN);
      const v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer);
      return { r, s, v };
    }
    exports2.ecsign = ecsign;
    function calculateSigRecovery(v, chainId) {
      const vBN = types_1.toType(v, types_1.TypeOutput.BN);
      if (!chainId) {
        return vBN.subn(27);
      }
      const chainIdBN = types_1.toType(chainId, types_1.TypeOutput.BN);
      return vBN.sub(chainIdBN.muln(2).addn(35));
    }
    function isValidSigRecovery(recovery) {
      const rec = new bn_js_1.default(recovery);
      return rec.eqn(0) || rec.eqn(1);
    }
    exports2.ecrecover = function(msgHash, v, r, s, chainId) {
      const signature = Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32)], 64);
      const recovery = calculateSigRecovery(v, chainId);
      if (!isValidSigRecovery(recovery)) {
        throw new Error("Invalid signature v value");
      }
      const senderPubKey = secp256k1_1.ecdsaRecover(signature, recovery.toNumber(), msgHash);
      return Buffer.from(secp256k1_1.publicKeyConvert(senderPubKey, false).slice(1));
    };
    exports2.toRpcSig = function(v, r, s, chainId) {
      const recovery = calculateSigRecovery(v, chainId);
      if (!isValidSigRecovery(recovery)) {
        throw new Error("Invalid signature v value");
      }
      return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));
    };
    exports2.toCompactSig = function(v, r, s, chainId) {
      const recovery = calculateSigRecovery(v, chainId);
      if (!isValidSigRecovery(recovery)) {
        throw new Error("Invalid signature v value");
      }
      const vn = types_1.toType(v, types_1.TypeOutput.Number);
      let ss = s;
      if (vn > 28 && vn % 2 === 1 || vn === 1 || vn === 28) {
        ss = Buffer.from(s);
        ss[0] |= 128;
      }
      return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(ss, 32)]));
    };
    exports2.fromRpcSig = function(sig) {
      const buf = bytes_1.toBuffer(sig);
      let r;
      let s;
      let v;
      if (buf.length >= 65) {
        r = buf.slice(0, 32);
        s = buf.slice(32, 64);
        v = bytes_1.bufferToInt(buf.slice(64));
      } else if (buf.length === 64) {
        r = buf.slice(0, 32);
        s = buf.slice(32, 64);
        v = bytes_1.bufferToInt(buf.slice(32, 33)) >> 7;
        s[0] &= 127;
      } else {
        throw new Error("Invalid signature length");
      }
      if (v < 27) {
        v += 27;
      }
      return {
        v,
        r,
        s
      };
    };
    exports2.isValidSignature = function(v, r, s, homesteadOrLater = true, chainId) {
      const SECP256K1_N_DIV_2 = new bn_js_1.default("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0", 16);
      const SECP256K1_N = new bn_js_1.default("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141", 16);
      if (r.length !== 32 || s.length !== 32) {
        return false;
      }
      if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
        return false;
      }
      const rBN = new bn_js_1.default(r);
      const sBN = new bn_js_1.default(s);
      if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {
        return false;
      }
      if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {
        return false;
      }
      return true;
    };
    exports2.hashPersonalMessage = function(message) {
      helpers_1.assertIsBuffer(message);
      const prefix2 = Buffer.from(`Ethereum Signed Message:
${message.length.toString()}`, "utf-8");
      return hash_1.keccak(Buffer.concat([prefix2, message]));
    };
  }
});

// ../../node_modules/.pnpm/ethereumjs-util@7.1.0/node_modules/ethereumjs-util/dist/object.js
var require_object = __commonJS({
  "../../node_modules/.pnpm/ethereumjs-util@7.1.0/node_modules/ethereumjs-util/dist/object.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o2, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o2, k2, { enumerable: true, get: function() {
        return m2[k];
      } });
    } : function(o2, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m2[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defineProperties = void 0;
    var assert_1 = __importDefault(__require("assert"));
    var ethjsUtil = __importStar(require_lib2());
    var rlp = __importStar(require_dist());
    var bytes_1 = require_bytes();
    exports2.defineProperties = function(self2, fields, data) {
      self2.raw = [];
      self2._fields = [];
      self2.toJSON = function(label = false) {
        if (label) {
          const obj = {};
          self2._fields.forEach((field) => {
            obj[field] = `0x${self2[field].toString("hex")}`;
          });
          return obj;
        }
        return bytes_1.baToJSON(self2.raw);
      };
      self2.serialize = function serialize() {
        return rlp.encode(self2.raw);
      };
      fields.forEach((field, i2) => {
        self2._fields.push(field.name);
        function getter() {
          return self2.raw[i2];
        }
        function setter(v) {
          v = bytes_1.toBuffer(v);
          if (v.toString("hex") === "00" && !field.allowZero) {
            v = Buffer.allocUnsafe(0);
          }
          if (field.allowLess && field.length) {
            v = bytes_1.unpadBuffer(v);
            assert_1.default(field.length >= v.length, `The field ${field.name} must not have more ${field.length} bytes`);
          } else if (!(field.allowZero && v.length === 0) && field.length) {
            assert_1.default(field.length === v.length, `The field ${field.name} must have byte length of ${field.length}`);
          }
          self2.raw[i2] = v;
        }
        Object.defineProperty(self2, field.name, {
          enumerable: true,
          configurable: true,
          get: getter,
          set: setter
        });
        if (field.default) {
          self2[field.name] = field.default;
        }
        if (field.alias) {
          Object.defineProperty(self2, field.alias, {
            enumerable: false,
            configurable: true,
            set: setter,
            get: getter
          });
        }
      });
      if (data) {
        if (typeof data === "string") {
          data = Buffer.from(ethjsUtil.stripHexPrefix(data), "hex");
        }
        if (Buffer.isBuffer(data)) {
          data = rlp.decode(data);
        }
        if (Array.isArray(data)) {
          if (data.length > self2._fields.length) {
            throw new Error("wrong number of fields in data");
          }
          data.forEach((d2, i2) => {
            self2[self2._fields[i2]] = bytes_1.toBuffer(d2);
          });
        } else if (typeof data === "object") {
          const keys = Object.keys(data);
          fields.forEach((field) => {
            if (keys.indexOf(field.name) !== -1)
              self2[field.name] = data[field.name];
            if (keys.indexOf(field.alias) !== -1)
              self2[field.alias] = data[field.alias];
          });
        } else {
          throw new Error("invalid data");
        }
      }
    };
  }
});

// ../../node_modules/.pnpm/ethereumjs-util@7.1.0/node_modules/ethereumjs-util/dist/externals.js
var require_externals = __commonJS({
  "../../node_modules/.pnpm/ethereumjs-util@7.1.0/node_modules/ethereumjs-util/dist/externals.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o2, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o2, k2, { enumerable: true, get: function() {
        return m2[k];
      } });
    } : function(o2, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m2[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rlp = exports2.BN = void 0;
    var bn_js_1 = __importDefault(require_bn2());
    exports2.BN = bn_js_1.default;
    var rlp = __importStar(require_dist());
    exports2.rlp = rlp;
  }
});

// ../../node_modules/.pnpm/ethereumjs-util@7.1.0/node_modules/ethereumjs-util/dist/index.js
var require_dist2 = __commonJS({
  "../../node_modules/.pnpm/ethereumjs-util@7.1.0/node_modules/ethereumjs-util/dist/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o2, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o2, k2, { enumerable: true, get: function() {
        return m2[k];
      } });
    } : function(o2, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m2[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m2, exports3) {
      for (var p2 in m2)
        if (p2 !== "default" && !exports3.hasOwnProperty(p2))
          __createBinding(exports3, m2, p2);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_constants(), exports2);
    __exportStar(require_account(), exports2);
    __exportStar(require_address(), exports2);
    __exportStar(require_hash2(), exports2);
    __exportStar(require_signature3(), exports2);
    __exportStar(require_bytes(), exports2);
    __exportStar(require_object(), exports2);
    __exportStar(require_externals(), exports2);
    __exportStar(require_types(), exports2);
    __exportStar(require_lib2(), exports2);
  }
});

// ../../node_modules/.pnpm/blakejs@1.1.1/node_modules/blakejs/util.js
var require_util = __commonJS({
  "../../node_modules/.pnpm/blakejs@1.1.1/node_modules/blakejs/util.js"(exports2, module2) {
    var ERROR_MSG_INPUT = "Input must be an string, Buffer or Uint8Array";
    function normalizeInput(input) {
      let ret;
      if (input instanceof Uint8Array) {
        ret = input;
      } else if (input instanceof Buffer) {
        ret = new Uint8Array(input);
      } else if (typeof input === "string") {
        ret = new Uint8Array(Buffer.from(input, "utf8"));
      } else {
        throw new Error(ERROR_MSG_INPUT);
      }
      return ret;
    }
    function toHex(bytes) {
      return Array.prototype.map.call(bytes, function(n2) {
        return (n2 < 16 ? "0" : "") + n2.toString(16);
      }).join("");
    }
    function uint32ToHex(val) {
      return (4294967296 + val).toString(16).substring(1);
    }
    function debugPrint(label, arr, size) {
      let msg = "\n" + label + " = ";
      for (let i2 = 0; i2 < arr.length; i2 += 2) {
        if (size === 32) {
          msg += uint32ToHex(arr[i2]).toUpperCase();
          msg += " ";
          msg += uint32ToHex(arr[i2 + 1]).toUpperCase();
        } else if (size === 64) {
          msg += uint32ToHex(arr[i2 + 1]).toUpperCase();
          msg += uint32ToHex(arr[i2]).toUpperCase();
        } else
          throw new Error("Invalid size " + size);
        if (i2 % 6 === 4) {
          msg += "\n" + new Array(label.length + 4).join(" ");
        } else if (i2 < arr.length - 2) {
          msg += " ";
        }
      }
      console.log(msg);
    }
    function testSpeed(hashFn, N, M2) {
      let startMs = new Date().getTime();
      const input = new Uint8Array(N);
      for (let i2 = 0; i2 < N; i2++) {
        input[i2] = i2 % 256;
      }
      const genMs = new Date().getTime();
      console.log("Generated random input in " + (genMs - startMs) + "ms");
      startMs = genMs;
      for (let i2 = 0; i2 < M2; i2++) {
        const hashHex = hashFn(input);
        const hashMs = new Date().getTime();
        const ms = hashMs - startMs;
        startMs = hashMs;
        console.log("Hashed in " + ms + "ms: " + hashHex.substring(0, 20) + "...");
        console.log(Math.round(N / (1 << 20) / (ms / 1e3) * 100) / 100 + " MB PER SECOND");
      }
    }
    module2.exports = {
      normalizeInput,
      toHex,
      debugPrint,
      testSpeed
    };
  }
});

// ../../node_modules/.pnpm/blakejs@1.1.1/node_modules/blakejs/blake2b.js
var require_blake2b = __commonJS({
  "../../node_modules/.pnpm/blakejs@1.1.1/node_modules/blakejs/blake2b.js"(exports2, module2) {
    var util = require_util();
    function ADD64AA(v2, a2, b) {
      const o0 = v2[a2] + v2[b];
      let o1 = v2[a2 + 1] + v2[b + 1];
      if (o0 >= 4294967296) {
        o1++;
      }
      v2[a2] = o0;
      v2[a2 + 1] = o1;
    }
    function ADD64AC(v2, a2, b0, b1) {
      let o0 = v2[a2] + b0;
      if (b0 < 0) {
        o0 += 4294967296;
      }
      let o1 = v2[a2 + 1] + b1;
      if (o0 >= 4294967296) {
        o1++;
      }
      v2[a2] = o0;
      v2[a2 + 1] = o1;
    }
    function B2B_GET32(arr, i2) {
      return arr[i2] ^ arr[i2 + 1] << 8 ^ arr[i2 + 2] << 16 ^ arr[i2 + 3] << 24;
    }
    function B2B_G(a2, b, c2, d2, ix, iy) {
      const x0 = m2[ix];
      const x1 = m2[ix + 1];
      const y0 = m2[iy];
      const y1 = m2[iy + 1];
      ADD64AA(v, a2, b);
      ADD64AC(v, a2, x0, x1);
      let xor0 = v[d2] ^ v[a2];
      let xor1 = v[d2 + 1] ^ v[a2 + 1];
      v[d2] = xor1;
      v[d2 + 1] = xor0;
      ADD64AA(v, c2, d2);
      xor0 = v[b] ^ v[c2];
      xor1 = v[b + 1] ^ v[c2 + 1];
      v[b] = xor0 >>> 24 ^ xor1 << 8;
      v[b + 1] = xor1 >>> 24 ^ xor0 << 8;
      ADD64AA(v, a2, b);
      ADD64AC(v, a2, y0, y1);
      xor0 = v[d2] ^ v[a2];
      xor1 = v[d2 + 1] ^ v[a2 + 1];
      v[d2] = xor0 >>> 16 ^ xor1 << 16;
      v[d2 + 1] = xor1 >>> 16 ^ xor0 << 16;
      ADD64AA(v, c2, d2);
      xor0 = v[b] ^ v[c2];
      xor1 = v[b + 1] ^ v[c2 + 1];
      v[b] = xor1 >>> 31 ^ xor0 << 1;
      v[b + 1] = xor0 >>> 31 ^ xor1 << 1;
    }
    var BLAKE2B_IV32 = new Uint32Array([
      4089235720,
      1779033703,
      2227873595,
      3144134277,
      4271175723,
      1013904242,
      1595750129,
      2773480762,
      2917565137,
      1359893119,
      725511199,
      2600822924,
      4215389547,
      528734635,
      327033209,
      1541459225
    ]);
    var SIGMA8 = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3
    ];
    var SIGMA82 = new Uint8Array(SIGMA8.map(function(x) {
      return x * 2;
    }));
    var v = new Uint32Array(32);
    var m2 = new Uint32Array(32);
    function blake2bCompress(ctx, last) {
      let i2 = 0;
      for (i2 = 0; i2 < 16; i2++) {
        v[i2] = ctx.h[i2];
        v[i2 + 16] = BLAKE2B_IV32[i2];
      }
      v[24] = v[24] ^ ctx.t;
      v[25] = v[25] ^ ctx.t / 4294967296;
      if (last) {
        v[28] = ~v[28];
        v[29] = ~v[29];
      }
      for (i2 = 0; i2 < 32; i2++) {
        m2[i2] = B2B_GET32(ctx.b, 4 * i2);
      }
      for (i2 = 0; i2 < 12; i2++) {
        B2B_G(0, 8, 16, 24, SIGMA82[i2 * 16 + 0], SIGMA82[i2 * 16 + 1]);
        B2B_G(2, 10, 18, 26, SIGMA82[i2 * 16 + 2], SIGMA82[i2 * 16 + 3]);
        B2B_G(4, 12, 20, 28, SIGMA82[i2 * 16 + 4], SIGMA82[i2 * 16 + 5]);
        B2B_G(6, 14, 22, 30, SIGMA82[i2 * 16 + 6], SIGMA82[i2 * 16 + 7]);
        B2B_G(0, 10, 20, 30, SIGMA82[i2 * 16 + 8], SIGMA82[i2 * 16 + 9]);
        B2B_G(2, 12, 22, 24, SIGMA82[i2 * 16 + 10], SIGMA82[i2 * 16 + 11]);
        B2B_G(4, 14, 16, 26, SIGMA82[i2 * 16 + 12], SIGMA82[i2 * 16 + 13]);
        B2B_G(6, 8, 18, 28, SIGMA82[i2 * 16 + 14], SIGMA82[i2 * 16 + 15]);
      }
      for (i2 = 0; i2 < 16; i2++) {
        ctx.h[i2] = ctx.h[i2] ^ v[i2] ^ v[i2 + 16];
      }
    }
    function blake2bInit(outlen, key) {
      if (outlen === 0 || outlen > 64) {
        throw new Error("Illegal output length, expected 0 < length <= 64");
      }
      if (key && key.length > 64) {
        throw new Error("Illegal key, expected Uint8Array with 0 < length <= 64");
      }
      const ctx = {
        b: new Uint8Array(128),
        h: new Uint32Array(16),
        t: 0,
        c: 0,
        outlen
      };
      for (let i2 = 0; i2 < 16; i2++) {
        ctx.h[i2] = BLAKE2B_IV32[i2];
      }
      const keylen = key ? key.length : 0;
      ctx.h[0] ^= 16842752 ^ keylen << 8 ^ outlen;
      if (key) {
        blake2bUpdate(ctx, key);
        ctx.c = 128;
      }
      return ctx;
    }
    function blake2bUpdate(ctx, input) {
      for (let i2 = 0; i2 < input.length; i2++) {
        if (ctx.c === 128) {
          ctx.t += ctx.c;
          blake2bCompress(ctx, false);
          ctx.c = 0;
        }
        ctx.b[ctx.c++] = input[i2];
      }
    }
    function blake2bFinal(ctx) {
      ctx.t += ctx.c;
      while (ctx.c < 128) {
        ctx.b[ctx.c++] = 0;
      }
      blake2bCompress(ctx, true);
      const out = new Uint8Array(ctx.outlen);
      for (let i2 = 0; i2 < ctx.outlen; i2++) {
        out[i2] = ctx.h[i2 >> 2] >> 8 * (i2 & 3);
      }
      return out;
    }
    function blake2b(input, key, outlen) {
      outlen = outlen || 64;
      input = util.normalizeInput(input);
      const ctx = blake2bInit(outlen, key);
      blake2bUpdate(ctx, input);
      return blake2bFinal(ctx);
    }
    function blake2bHex(input, key, outlen) {
      const output = blake2b(input, key, outlen);
      return util.toHex(output);
    }
    module2.exports = {
      blake2b,
      blake2bHex,
      blake2bInit,
      blake2bUpdate,
      blake2bFinal
    };
  }
});

// ../../node_modules/.pnpm/blakejs@1.1.1/node_modules/blakejs/blake2s.js
var require_blake2s = __commonJS({
  "../../node_modules/.pnpm/blakejs@1.1.1/node_modules/blakejs/blake2s.js"(exports2, module2) {
    var util = require_util();
    function B2S_GET32(v2, i2) {
      return v2[i2] ^ v2[i2 + 1] << 8 ^ v2[i2 + 2] << 16 ^ v2[i2 + 3] << 24;
    }
    function B2S_G(a2, b, c2, d2, x, y2) {
      v[a2] = v[a2] + v[b] + x;
      v[d2] = ROTR32(v[d2] ^ v[a2], 16);
      v[c2] = v[c2] + v[d2];
      v[b] = ROTR32(v[b] ^ v[c2], 12);
      v[a2] = v[a2] + v[b] + y2;
      v[d2] = ROTR32(v[d2] ^ v[a2], 8);
      v[c2] = v[c2] + v[d2];
      v[b] = ROTR32(v[b] ^ v[c2], 7);
    }
    function ROTR32(x, y2) {
      return x >>> y2 ^ x << 32 - y2;
    }
    var BLAKE2S_IV = new Uint32Array([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    var SIGMA = new Uint8Array([
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0
    ]);
    var v = new Uint32Array(16);
    var m2 = new Uint32Array(16);
    function blake2sCompress(ctx, last) {
      let i2 = 0;
      for (i2 = 0; i2 < 8; i2++) {
        v[i2] = ctx.h[i2];
        v[i2 + 8] = BLAKE2S_IV[i2];
      }
      v[12] ^= ctx.t;
      v[13] ^= ctx.t / 4294967296;
      if (last) {
        v[14] = ~v[14];
      }
      for (i2 = 0; i2 < 16; i2++) {
        m2[i2] = B2S_GET32(ctx.b, 4 * i2);
      }
      for (i2 = 0; i2 < 10; i2++) {
        B2S_G(0, 4, 8, 12, m2[SIGMA[i2 * 16 + 0]], m2[SIGMA[i2 * 16 + 1]]);
        B2S_G(1, 5, 9, 13, m2[SIGMA[i2 * 16 + 2]], m2[SIGMA[i2 * 16 + 3]]);
        B2S_G(2, 6, 10, 14, m2[SIGMA[i2 * 16 + 4]], m2[SIGMA[i2 * 16 + 5]]);
        B2S_G(3, 7, 11, 15, m2[SIGMA[i2 * 16 + 6]], m2[SIGMA[i2 * 16 + 7]]);
        B2S_G(0, 5, 10, 15, m2[SIGMA[i2 * 16 + 8]], m2[SIGMA[i2 * 16 + 9]]);
        B2S_G(1, 6, 11, 12, m2[SIGMA[i2 * 16 + 10]], m2[SIGMA[i2 * 16 + 11]]);
        B2S_G(2, 7, 8, 13, m2[SIGMA[i2 * 16 + 12]], m2[SIGMA[i2 * 16 + 13]]);
        B2S_G(3, 4, 9, 14, m2[SIGMA[i2 * 16 + 14]], m2[SIGMA[i2 * 16 + 15]]);
      }
      for (i2 = 0; i2 < 8; i2++) {
        ctx.h[i2] ^= v[i2] ^ v[i2 + 8];
      }
    }
    function blake2sInit(outlen, key) {
      if (!(outlen > 0 && outlen <= 32)) {
        throw new Error("Incorrect output length, should be in [1, 32]");
      }
      const keylen = key ? key.length : 0;
      if (key && !(keylen > 0 && keylen <= 32)) {
        throw new Error("Incorrect key length, should be in [1, 32]");
      }
      const ctx = {
        h: new Uint32Array(BLAKE2S_IV),
        b: new Uint8Array(64),
        c: 0,
        t: 0,
        outlen
      };
      ctx.h[0] ^= 16842752 ^ keylen << 8 ^ outlen;
      if (keylen > 0) {
        blake2sUpdate(ctx, key);
        ctx.c = 64;
      }
      return ctx;
    }
    function blake2sUpdate(ctx, input) {
      for (let i2 = 0; i2 < input.length; i2++) {
        if (ctx.c === 64) {
          ctx.t += ctx.c;
          blake2sCompress(ctx, false);
          ctx.c = 0;
        }
        ctx.b[ctx.c++] = input[i2];
      }
    }
    function blake2sFinal(ctx) {
      ctx.t += ctx.c;
      while (ctx.c < 64) {
        ctx.b[ctx.c++] = 0;
      }
      blake2sCompress(ctx, true);
      const out = new Uint8Array(ctx.outlen);
      for (let i2 = 0; i2 < ctx.outlen; i2++) {
        out[i2] = ctx.h[i2 >> 2] >> 8 * (i2 & 3) & 255;
      }
      return out;
    }
    function blake2s(input, key, outlen) {
      outlen = outlen || 32;
      input = util.normalizeInput(input);
      const ctx = blake2sInit(outlen, key);
      blake2sUpdate(ctx, input);
      return blake2sFinal(ctx);
    }
    function blake2sHex(input, key, outlen) {
      const output = blake2s(input, key, outlen);
      return util.toHex(output);
    }
    module2.exports = {
      blake2s,
      blake2sHex,
      blake2sInit,
      blake2sUpdate,
      blake2sFinal
    };
  }
});

// ../../node_modules/.pnpm/blakejs@1.1.1/node_modules/blakejs/index.js
var require_blakejs = __commonJS({
  "../../node_modules/.pnpm/blakejs@1.1.1/node_modules/blakejs/index.js"(exports2, module2) {
    var b2b = require_blake2b();
    var b2s = require_blake2s();
    module2.exports = {
      blake2b: b2b.blake2b,
      blake2bHex: b2b.blake2bHex,
      blake2bInit: b2b.blake2bInit,
      blake2bUpdate: b2b.blake2bUpdate,
      blake2bFinal: b2b.blake2bFinal,
      blake2s: b2s.blake2s,
      blake2sHex: b2s.blake2sHex,
      blake2sInit: b2s.blake2sInit,
      blake2sUpdate: b2s.blake2sUpdate,
      blake2sFinal: b2s.blake2sFinal
    };
  }
});

// ../../node_modules/.pnpm/google-protobuf@3.17.3/node_modules/google-protobuf/google-protobuf.js
var require_google_protobuf = __commonJS({
  "../../node_modules/.pnpm/google-protobuf@3.17.3/node_modules/google-protobuf/google-protobuf.js"(exports, module) {
    var $jscomp = $jscomp || {};
    $jscomp.scope = {};
    $jscomp.findInternal = function(a2, b, c2) {
      a2 instanceof String && (a2 = String(a2));
      for (var d2 = a2.length, e2 = 0; e2 < d2; e2++) {
        var f = a2[e2];
        if (b.call(c2, f, e2, a2))
          return { i: e2, v: f };
      }
      return { i: -1, v: void 0 };
    };
    $jscomp.ASSUME_ES5 = false;
    $jscomp.ASSUME_NO_NATIVE_MAP = false;
    $jscomp.ASSUME_NO_NATIVE_SET = false;
    $jscomp.SIMPLE_FROUND_POLYFILL = false;
    $jscomp.defineProperty = $jscomp.ASSUME_ES5 || typeof Object.defineProperties == "function" ? Object.defineProperty : function(a2, b, c2) {
      a2 != Array.prototype && a2 != Object.prototype && (a2[b] = c2.value);
    };
    $jscomp.getGlobal = function(a2) {
      return typeof window != "undefined" && window === a2 ? a2 : typeof global != "undefined" && global != null ? global : a2;
    };
    $jscomp.global = $jscomp.getGlobal(exports);
    $jscomp.polyfill = function(a2, b, c2, d2) {
      if (b) {
        c2 = $jscomp.global;
        a2 = a2.split(".");
        for (d2 = 0; d2 < a2.length - 1; d2++) {
          var e2 = a2[d2];
          e2 in c2 || (c2[e2] = {});
          c2 = c2[e2];
        }
        a2 = a2[a2.length - 1];
        d2 = c2[a2];
        b = b(d2);
        b != d2 && b != null && $jscomp.defineProperty(c2, a2, { configurable: true, writable: true, value: b });
      }
    };
    $jscomp.polyfill("Array.prototype.findIndex", function(a2) {
      return a2 ? a2 : function(a3, c2) {
        return $jscomp.findInternal(this, a3, c2).i;
      };
    }, "es6", "es3");
    $jscomp.checkStringArgs = function(a2, b, c2) {
      if (a2 == null)
        throw new TypeError("The 'this' value for String.prototype." + c2 + " must not be null or undefined");
      if (b instanceof RegExp)
        throw new TypeError("First argument to String.prototype." + c2 + " must not be a regular expression");
      return a2 + "";
    };
    $jscomp.polyfill("String.prototype.endsWith", function(a2) {
      return a2 ? a2 : function(a3, c2) {
        var b = $jscomp.checkStringArgs(this, a3, "endsWith");
        a3 += "";
        c2 === void 0 && (c2 = b.length);
        c2 = Math.max(0, Math.min(c2 | 0, b.length));
        for (var e2 = a3.length; 0 < e2 && 0 < c2; )
          if (b[--c2] != a3[--e2])
            return false;
        return 0 >= e2;
      };
    }, "es6", "es3");
    $jscomp.polyfill("Array.prototype.find", function(a2) {
      return a2 ? a2 : function(a3, c2) {
        return $jscomp.findInternal(this, a3, c2).v;
      };
    }, "es6", "es3");
    $jscomp.polyfill("String.prototype.startsWith", function(a2) {
      return a2 ? a2 : function(a3, c2) {
        var b = $jscomp.checkStringArgs(this, a3, "startsWith");
        a3 += "";
        var e2 = b.length, f = a3.length;
        c2 = Math.max(0, Math.min(c2 | 0, b.length));
        for (var g = 0; g < f && c2 < e2; )
          if (b[c2++] != a3[g++])
            return false;
        return g >= f;
      };
    }, "es6", "es3");
    $jscomp.polyfill("String.prototype.repeat", function(a2) {
      return a2 ? a2 : function(a3) {
        var b = $jscomp.checkStringArgs(this, null, "repeat");
        if (0 > a3 || 1342177279 < a3)
          throw new RangeError("Invalid count value");
        a3 |= 0;
        for (var d2 = ""; a3; )
          if (a3 & 1 && (d2 += b), a3 >>>= 1)
            b += b;
        return d2;
      };
    }, "es6", "es3");
    var COMPILED = true;
    var goog = goog || {};
    goog.global = exports || self;
    goog.isDef = function(a2) {
      return a2 !== void 0;
    };
    goog.isString = function(a2) {
      return typeof a2 == "string";
    };
    goog.isBoolean = function(a2) {
      return typeof a2 == "boolean";
    };
    goog.isNumber = function(a2) {
      return typeof a2 == "number";
    };
    goog.exportPath_ = function(a2, b, c2) {
      a2 = a2.split(".");
      c2 = c2 || goog.global;
      a2[0] in c2 || typeof c2.execScript == "undefined" || c2.execScript("var " + a2[0]);
      for (var d2; a2.length && (d2 = a2.shift()); )
        !a2.length && goog.isDef(b) ? c2[d2] = b : c2 = c2[d2] && c2[d2] !== Object.prototype[d2] ? c2[d2] : c2[d2] = {};
    };
    goog.define = function(a2, b) {
      if (!COMPILED) {
        var c2 = goog.global.CLOSURE_UNCOMPILED_DEFINES, d2 = goog.global.CLOSURE_DEFINES;
        c2 && c2.nodeType === void 0 && Object.prototype.hasOwnProperty.call(c2, a2) ? b = c2[a2] : d2 && d2.nodeType === void 0 && Object.prototype.hasOwnProperty.call(d2, a2) && (b = d2[a2]);
      }
      return b;
    };
    goog.FEATURESET_YEAR = 2012;
    goog.DEBUG = true;
    goog.LOCALE = "en";
    goog.TRUSTED_SITE = true;
    goog.STRICT_MODE_COMPATIBLE = false;
    goog.DISALLOW_TEST_ONLY_CODE = COMPILED && !goog.DEBUG;
    goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING = false;
    goog.provide = function(a2) {
      if (goog.isInModuleLoader_())
        throw Error("goog.provide cannot be used within a module.");
      if (!COMPILED && goog.isProvided_(a2))
        throw Error('Namespace "' + a2 + '" already declared.');
      goog.constructNamespace_(a2);
    };
    goog.constructNamespace_ = function(a2, b) {
      if (!COMPILED) {
        delete goog.implicitNamespaces_[a2];
        for (var c2 = a2; (c2 = c2.substring(0, c2.lastIndexOf("."))) && !goog.getObjectByName(c2); )
          goog.implicitNamespaces_[c2] = true;
      }
      goog.exportPath_(a2, b);
    };
    goog.getScriptNonce = function(a2) {
      if (a2 && a2 != goog.global)
        return goog.getScriptNonce_(a2.document);
      goog.cspNonce_ === null && (goog.cspNonce_ = goog.getScriptNonce_(goog.global.document));
      return goog.cspNonce_;
    };
    goog.NONCE_PATTERN_ = /^[\w+/_-]+[=]{0,2}$/;
    goog.cspNonce_ = null;
    goog.getScriptNonce_ = function(a2) {
      return (a2 = a2.querySelector && a2.querySelector("script[nonce]")) && (a2 = a2.nonce || a2.getAttribute("nonce")) && goog.NONCE_PATTERN_.test(a2) ? a2 : "";
    };
    goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
    goog.module = function(a2) {
      if (!goog.isString(a2) || !a2 || a2.search(goog.VALID_MODULE_RE_) == -1)
        throw Error("Invalid module identifier");
      if (!goog.isInGoogModuleLoader_())
        throw Error("Module " + a2 + " has been loaded incorrectly. Note, modules cannot be loaded as normal scripts. They require some kind of pre-processing step. You're likely trying to load a module via a script tag or as a part of a concatenated bundle without rewriting the module. For more info see: https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.");
      if (goog.moduleLoaderState_.moduleName)
        throw Error("goog.module may only be called once per module.");
      goog.moduleLoaderState_.moduleName = a2;
      if (!COMPILED) {
        if (goog.isProvided_(a2))
          throw Error('Namespace "' + a2 + '" already declared.');
        delete goog.implicitNamespaces_[a2];
      }
    };
    goog.module.get = function(a2) {
      return goog.module.getInternal_(a2);
    };
    goog.module.getInternal_ = function(a2) {
      if (!COMPILED) {
        if (a2 in goog.loadedModules_)
          return goog.loadedModules_[a2].exports;
        if (!goog.implicitNamespaces_[a2])
          return a2 = goog.getObjectByName(a2), a2 != null ? a2 : null;
      }
      return null;
    };
    goog.ModuleType = { ES6: "es6", GOOG: "goog" };
    goog.moduleLoaderState_ = null;
    goog.isInModuleLoader_ = function() {
      return goog.isInGoogModuleLoader_() || goog.isInEs6ModuleLoader_();
    };
    goog.isInGoogModuleLoader_ = function() {
      return !!goog.moduleLoaderState_ && goog.moduleLoaderState_.type == goog.ModuleType.GOOG;
    };
    goog.isInEs6ModuleLoader_ = function() {
      if (goog.moduleLoaderState_ && goog.moduleLoaderState_.type == goog.ModuleType.ES6)
        return true;
      var a2 = goog.global.$jscomp;
      return a2 ? typeof a2.getCurrentModulePath != "function" ? false : !!a2.getCurrentModulePath() : false;
    };
    goog.module.declareLegacyNamespace = function() {
      if (!COMPILED && !goog.isInGoogModuleLoader_())
        throw Error("goog.module.declareLegacyNamespace must be called from within a goog.module");
      if (!COMPILED && !goog.moduleLoaderState_.moduleName)
        throw Error("goog.module must be called prior to goog.module.declareLegacyNamespace.");
      goog.moduleLoaderState_.declareLegacyNamespace = true;
    };
    goog.declareModuleId = function(a2) {
      if (!COMPILED) {
        if (!goog.isInEs6ModuleLoader_())
          throw Error("goog.declareModuleId may only be called from within an ES6 module");
        if (goog.moduleLoaderState_ && goog.moduleLoaderState_.moduleName)
          throw Error("goog.declareModuleId may only be called once per module.");
        if (a2 in goog.loadedModules_)
          throw Error('Module with namespace "' + a2 + '" already exists.');
      }
      if (goog.moduleLoaderState_)
        goog.moduleLoaderState_.moduleName = a2;
      else {
        var b = goog.global.$jscomp;
        if (!b || typeof b.getCurrentModulePath != "function")
          throw Error('Module with namespace "' + a2 + '" has been loaded incorrectly.');
        b = b.require(b.getCurrentModulePath());
        goog.loadedModules_[a2] = { exports: b, type: goog.ModuleType.ES6, moduleId: a2 };
      }
    };
    goog.setTestOnly = function(a2) {
      if (goog.DISALLOW_TEST_ONLY_CODE)
        throw a2 = a2 || "", Error("Importing test-only code into non-debug environment" + (a2 ? ": " + a2 : "."));
    };
    goog.forwardDeclare = function(a2) {
    };
    COMPILED || (goog.isProvided_ = function(a2) {
      return a2 in goog.loadedModules_ || !goog.implicitNamespaces_[a2] && goog.isDefAndNotNull(goog.getObjectByName(a2));
    }, goog.implicitNamespaces_ = { "goog.module": true });
    goog.getObjectByName = function(a2, b) {
      a2 = a2.split(".");
      b = b || goog.global;
      for (var c2 = 0; c2 < a2.length; c2++)
        if (b = b[a2[c2]], !goog.isDefAndNotNull(b))
          return null;
      return b;
    };
    goog.globalize = function(a2, b) {
      b = b || goog.global;
      for (var c2 in a2)
        b[c2] = a2[c2];
    };
    goog.addDependency = function(a2, b, c2, d2) {
      !COMPILED && goog.DEPENDENCIES_ENABLED && goog.debugLoader_.addDependency(a2, b, c2, d2);
    };
    goog.ENABLE_DEBUG_LOADER = true;
    goog.logToConsole_ = function(a2) {
      goog.global.console && goog.global.console.error(a2);
    };
    goog.require = function(a2) {
      if (!COMPILED) {
        goog.ENABLE_DEBUG_LOADER && goog.debugLoader_.requested(a2);
        if (goog.isProvided_(a2)) {
          if (goog.isInModuleLoader_())
            return goog.module.getInternal_(a2);
        } else if (goog.ENABLE_DEBUG_LOADER) {
          var b = goog.moduleLoaderState_;
          goog.moduleLoaderState_ = null;
          try {
            goog.debugLoader_.load_(a2);
          } finally {
            goog.moduleLoaderState_ = b;
          }
        }
        return null;
      }
    };
    goog.requireType = function(a2) {
      return {};
    };
    goog.basePath = "";
    goog.nullFunction = function() {
    };
    goog.abstractMethod = function() {
      throw Error("unimplemented abstract method");
    };
    goog.addSingletonGetter = function(a2) {
      a2.instance_ = void 0;
      a2.getInstance = function() {
        if (a2.instance_)
          return a2.instance_;
        goog.DEBUG && (goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = a2);
        return a2.instance_ = new a2();
      };
    };
    goog.instantiatedSingletons_ = [];
    goog.LOAD_MODULE_USING_EVAL = true;
    goog.SEAL_MODULE_EXPORTS = goog.DEBUG;
    goog.loadedModules_ = {};
    goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
    goog.TRANSPILE = "detect";
    goog.ASSUME_ES_MODULES_TRANSPILED = false;
    goog.TRANSPILE_TO_LANGUAGE = "";
    goog.TRANSPILER = "transpile.js";
    goog.hasBadLetScoping = null;
    goog.useSafari10Workaround = function() {
      if (goog.hasBadLetScoping == null) {
        try {
          var a = !eval('"use strict";let x = 1; function f() { return typeof x; };f() == "number";');
        } catch (b) {
          a = false;
        }
        goog.hasBadLetScoping = a;
      }
      return goog.hasBadLetScoping;
    };
    goog.workaroundSafari10EvalBug = function(a2) {
      return "(function(){" + a2 + "\n;})();\n";
    };
    goog.loadModule = function(a2) {
      var b = goog.moduleLoaderState_;
      try {
        goog.moduleLoaderState_ = { moduleName: "", declareLegacyNamespace: false, type: goog.ModuleType.GOOG };
        if (goog.isFunction(a2))
          var c2 = a2.call(void 0, {});
        else if (goog.isString(a2))
          goog.useSafari10Workaround() && (a2 = goog.workaroundSafari10EvalBug(a2)), c2 = goog.loadModuleFromSource_.call(void 0, a2);
        else
          throw Error("Invalid module definition");
        var d2 = goog.moduleLoaderState_.moduleName;
        if (goog.isString(d2) && d2)
          goog.moduleLoaderState_.declareLegacyNamespace ? goog.constructNamespace_(d2, c2) : goog.SEAL_MODULE_EXPORTS && Object.seal && typeof c2 == "object" && c2 != null && Object.seal(c2), goog.loadedModules_[d2] = { exports: c2, type: goog.ModuleType.GOOG, moduleId: goog.moduleLoaderState_.moduleName };
        else
          throw Error('Invalid module name "' + d2 + '"');
      } finally {
        goog.moduleLoaderState_ = b;
      }
    };
    goog.loadModuleFromSource_ = function(a) {
      eval(a);
      return {};
    };
    goog.normalizePath_ = function(a2) {
      a2 = a2.split("/");
      for (var b = 0; b < a2.length; )
        a2[b] == "." ? a2.splice(b, 1) : b && a2[b] == ".." && a2[b - 1] && a2[b - 1] != ".." ? a2.splice(--b, 2) : b++;
      return a2.join("/");
    };
    goog.loadFileSync_ = function(a2) {
      if (goog.global.CLOSURE_LOAD_FILE_SYNC)
        return goog.global.CLOSURE_LOAD_FILE_SYNC(a2);
      try {
        var b = new goog.global.XMLHttpRequest();
        b.open("get", a2, false);
        b.send();
        return b.status == 0 || b.status == 200 ? b.responseText : null;
      } catch (c2) {
        return null;
      }
    };
    goog.transpile_ = function(a2, b, c2) {
      var d2 = goog.global.$jscomp;
      d2 || (goog.global.$jscomp = d2 = {});
      var e2 = d2.transpile;
      if (!e2) {
        var f = goog.basePath + goog.TRANSPILER, g = goog.loadFileSync_(f);
        if (g) {
          (function() {
            (0, eval)(g + "\n//# sourceURL=" + f);
          }).call(goog.global);
          if (goog.global.$gwtExport && goog.global.$gwtExport.$jscomp && !goog.global.$gwtExport.$jscomp.transpile)
            throw Error('The transpiler did not properly export the "transpile" method. $gwtExport: ' + JSON.stringify(goog.global.$gwtExport));
          goog.global.$jscomp.transpile = goog.global.$gwtExport.$jscomp.transpile;
          d2 = goog.global.$jscomp;
          e2 = d2.transpile;
        }
      }
      e2 || (e2 = d2.transpile = function(a3, b2) {
        goog.logToConsole_(b2 + " requires transpilation but no transpiler was found.");
        return a3;
      });
      return e2(a2, b, c2);
    };
    goog.typeOf = function(a2) {
      var b = typeof a2;
      if (b == "object")
        if (a2) {
          if (a2 instanceof Array)
            return "array";
          if (a2 instanceof Object)
            return b;
          var c2 = Object.prototype.toString.call(a2);
          if (c2 == "[object Window]")
            return "object";
          if (c2 == "[object Array]" || typeof a2.length == "number" && typeof a2.splice != "undefined" && typeof a2.propertyIsEnumerable != "undefined" && !a2.propertyIsEnumerable("splice"))
            return "array";
          if (c2 == "[object Function]" || typeof a2.call != "undefined" && typeof a2.propertyIsEnumerable != "undefined" && !a2.propertyIsEnumerable("call"))
            return "function";
        } else
          return "null";
      else if (b == "function" && typeof a2.call == "undefined")
        return "object";
      return b;
    };
    goog.isNull = function(a2) {
      return a2 === null;
    };
    goog.isDefAndNotNull = function(a2) {
      return a2 != null;
    };
    goog.isArray = function(a2) {
      return goog.typeOf(a2) == "array";
    };
    goog.isArrayLike = function(a2) {
      var b = goog.typeOf(a2);
      return b == "array" || b == "object" && typeof a2.length == "number";
    };
    goog.isDateLike = function(a2) {
      return goog.isObject(a2) && typeof a2.getFullYear == "function";
    };
    goog.isFunction = function(a2) {
      return goog.typeOf(a2) == "function";
    };
    goog.isObject = function(a2) {
      var b = typeof a2;
      return b == "object" && a2 != null || b == "function";
    };
    goog.getUid = function(a2) {
      return a2[goog.UID_PROPERTY_] || (a2[goog.UID_PROPERTY_] = ++goog.uidCounter_);
    };
    goog.hasUid = function(a2) {
      return !!a2[goog.UID_PROPERTY_];
    };
    goog.removeUid = function(a2) {
      a2 !== null && "removeAttribute" in a2 && a2.removeAttribute(goog.UID_PROPERTY_);
      try {
        delete a2[goog.UID_PROPERTY_];
      } catch (b) {
      }
    };
    goog.UID_PROPERTY_ = "closure_uid_" + (1e9 * Math.random() >>> 0);
    goog.uidCounter_ = 0;
    goog.getHashCode = goog.getUid;
    goog.removeHashCode = goog.removeUid;
    goog.cloneObject = function(a2) {
      var b = goog.typeOf(a2);
      if (b == "object" || b == "array") {
        if (typeof a2.clone === "function")
          return a2.clone();
        b = b == "array" ? [] : {};
        for (var c2 in a2)
          b[c2] = goog.cloneObject(a2[c2]);
        return b;
      }
      return a2;
    };
    goog.bindNative_ = function(a2, b, c2) {
      return a2.call.apply(a2.bind, arguments);
    };
    goog.bindJs_ = function(a2, b, c2) {
      if (!a2)
        throw Error();
      if (2 < arguments.length) {
        var d2 = Array.prototype.slice.call(arguments, 2);
        return function() {
          var c3 = Array.prototype.slice.call(arguments);
          Array.prototype.unshift.apply(c3, d2);
          return a2.apply(b, c3);
        };
      }
      return function() {
        return a2.apply(b, arguments);
      };
    };
    goog.bind = function(a2, b, c2) {
      Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1 ? goog.bind = goog.bindNative_ : goog.bind = goog.bindJs_;
      return goog.bind.apply(null, arguments);
    };
    goog.partial = function(a2, b) {
      var c2 = Array.prototype.slice.call(arguments, 1);
      return function() {
        var b2 = c2.slice();
        b2.push.apply(b2, arguments);
        return a2.apply(this, b2);
      };
    };
    goog.mixin = function(a2, b) {
      for (var c2 in b)
        a2[c2] = b[c2];
    };
    goog.now = goog.TRUSTED_SITE && Date.now || function() {
      return +new Date();
    };
    goog.globalEval = function(a2) {
      if (goog.global.execScript)
        goog.global.execScript(a2, "JavaScript");
      else if (goog.global.eval) {
        if (goog.evalWorksForGlobals_ == null) {
          try {
            goog.global.eval("var _evalTest_ = 1;");
          } catch (d2) {
          }
          if (typeof goog.global._evalTest_ != "undefined") {
            try {
              delete goog.global._evalTest_;
            } catch (d2) {
            }
            goog.evalWorksForGlobals_ = true;
          } else
            goog.evalWorksForGlobals_ = false;
        }
        if (goog.evalWorksForGlobals_)
          goog.global.eval(a2);
        else {
          var b = goog.global.document, c2 = b.createElement("SCRIPT");
          c2.type = "text/javascript";
          c2.defer = false;
          c2.appendChild(b.createTextNode(a2));
          b.head.appendChild(c2);
          b.head.removeChild(c2);
        }
      } else
        throw Error("goog.globalEval not available");
    };
    goog.evalWorksForGlobals_ = null;
    goog.getCssName = function(a2, b) {
      if (String(a2).charAt(0) == ".")
        throw Error('className passed in goog.getCssName must not start with ".". You passed: ' + a2);
      var c2 = function(a3) {
        return goog.cssNameMapping_[a3] || a3;
      }, d2 = function(a3) {
        a3 = a3.split("-");
        for (var b2 = [], d3 = 0; d3 < a3.length; d3++)
          b2.push(c2(a3[d3]));
        return b2.join("-");
      };
      d2 = goog.cssNameMapping_ ? goog.cssNameMappingStyle_ == "BY_WHOLE" ? c2 : d2 : function(a3) {
        return a3;
      };
      a2 = b ? a2 + "-" + d2(b) : d2(a2);
      return goog.global.CLOSURE_CSS_NAME_MAP_FN ? goog.global.CLOSURE_CSS_NAME_MAP_FN(a2) : a2;
    };
    goog.setCssNameMapping = function(a2, b) {
      goog.cssNameMapping_ = a2;
      goog.cssNameMappingStyle_ = b;
    };
    !COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING && (goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING);
    goog.getMsg = function(a2, b, c2) {
      c2 && c2.html && (a2 = a2.replace(/</g, "&lt;"));
      b && (a2 = a2.replace(/\{\$([^}]+)}/g, function(a3, c3) {
        return b != null && c3 in b ? b[c3] : a3;
      }));
      return a2;
    };
    goog.getMsgWithFallback = function(a2, b) {
      return a2;
    };
    goog.exportSymbol = function(a2, b, c2) {
      goog.exportPath_(a2, b, c2);
    };
    goog.exportProperty = function(a2, b, c2) {
      a2[b] = c2;
    };
    goog.inherits = function(a2, b) {
      function c2() {
      }
      c2.prototype = b.prototype;
      a2.superClass_ = b.prototype;
      a2.prototype = new c2();
      a2.prototype.constructor = a2;
      a2.base = function(a3, c3, f) {
        for (var d2 = Array(arguments.length - 2), e2 = 2; e2 < arguments.length; e2++)
          d2[e2 - 2] = arguments[e2];
        return b.prototype[c3].apply(a3, d2);
      };
    };
    goog.base = function(a2, b, c2) {
      var d2 = arguments.callee.caller;
      if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !d2)
        throw Error("arguments.caller not defined.  goog.base() cannot be used with strict mode code. See http://www.ecma-international.org/ecma-262/5.1/#sec-C");
      if (typeof d2.superClass_ !== "undefined") {
        for (var e2 = Array(arguments.length - 1), f = 1; f < arguments.length; f++)
          e2[f - 1] = arguments[f];
        return d2.superClass_.constructor.apply(a2, e2);
      }
      if (typeof b != "string" && typeof b != "symbol")
        throw Error("method names provided to goog.base must be a string or a symbol");
      e2 = Array(arguments.length - 2);
      for (f = 2; f < arguments.length; f++)
        e2[f - 2] = arguments[f];
      f = false;
      for (var g = a2.constructor.prototype; g; g = Object.getPrototypeOf(g))
        if (g[b] === d2)
          f = true;
        else if (f)
          return g[b].apply(a2, e2);
      if (a2[b] === d2)
        return a2.constructor.prototype[b].apply(a2, e2);
      throw Error("goog.base called from a method of one name to a method of a different name");
    };
    goog.scope = function(a2) {
      if (goog.isInModuleLoader_())
        throw Error("goog.scope is not supported within a module.");
      a2.call(goog.global);
    };
    COMPILED || (goog.global.COMPILED = COMPILED);
    goog.defineClass = function(a2, b) {
      var c2 = b.constructor, d2 = b.statics;
      c2 && c2 != Object.prototype.constructor || (c2 = function() {
        throw Error("cannot instantiate an interface (no constructor defined).");
      });
      c2 = goog.defineClass.createSealingConstructor_(c2, a2);
      a2 && goog.inherits(c2, a2);
      delete b.constructor;
      delete b.statics;
      goog.defineClass.applyProperties_(c2.prototype, b);
      d2 != null && (d2 instanceof Function ? d2(c2) : goog.defineClass.applyProperties_(c2, d2));
      return c2;
    };
    goog.defineClass.SEAL_CLASS_INSTANCES = goog.DEBUG;
    goog.defineClass.createSealingConstructor_ = function(a2, b) {
      if (!goog.defineClass.SEAL_CLASS_INSTANCES)
        return a2;
      var c2 = !goog.defineClass.isUnsealable_(b), d2 = function() {
        var b2 = a2.apply(this, arguments) || this;
        b2[goog.UID_PROPERTY_] = b2[goog.UID_PROPERTY_];
        this.constructor === d2 && c2 && Object.seal instanceof Function && Object.seal(b2);
        return b2;
      };
      return d2;
    };
    goog.defineClass.isUnsealable_ = function(a2) {
      return a2 && a2.prototype && a2.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_];
    };
    goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
    goog.defineClass.applyProperties_ = function(a2, b) {
      for (var c2 in b)
        Object.prototype.hasOwnProperty.call(b, c2) && (a2[c2] = b[c2]);
      for (var d2 = 0; d2 < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; d2++)
        c2 = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[d2], Object.prototype.hasOwnProperty.call(b, c2) && (a2[c2] = b[c2]);
    };
    goog.tagUnsealableClass = function(a2) {
      !COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES && (a2.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true);
    };
    goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
    !COMPILED && goog.DEPENDENCIES_ENABLED && (goog.inHtmlDocument_ = function() {
      var a2 = goog.global.document;
      return a2 != null && "write" in a2;
    }, goog.isDocumentLoading_ = function() {
      var a2 = goog.global.document;
      return a2.attachEvent ? a2.readyState != "complete" : a2.readyState == "loading";
    }, goog.findBasePath_ = function() {
      if (goog.isDef(goog.global.CLOSURE_BASE_PATH) && goog.isString(goog.global.CLOSURE_BASE_PATH))
        goog.basePath = goog.global.CLOSURE_BASE_PATH;
      else if (goog.inHtmlDocument_()) {
        var a2 = goog.global.document, b = a2.currentScript;
        a2 = b ? [b] : a2.getElementsByTagName("SCRIPT");
        for (b = a2.length - 1; 0 <= b; --b) {
          var c2 = a2[b].src, d2 = c2.lastIndexOf("?");
          d2 = d2 == -1 ? c2.length : d2;
          if (c2.substr(d2 - 7, 7) == "base.js") {
            goog.basePath = c2.substr(0, d2 - 7);
            break;
          }
        }
      }
    }, goog.findBasePath_(), goog.Transpiler = function() {
      this.requiresTranspilation_ = null;
      this.transpilationTarget_ = goog.TRANSPILE_TO_LANGUAGE;
    }, goog.Transpiler.prototype.createRequiresTranspilation_ = function() {
      function a(a2, b) {
        e ? d[a2] = true : b() ? (c = a2, d[a2] = false) : e = d[a2] = true;
      }
      function b(a) {
        try {
          return !!eval(a);
        } catch (h2) {
          return false;
        }
      }
      var c = "es3", d = { es3: false }, e = false, f = goog.global.navigator && goog.global.navigator.userAgent ? goog.global.navigator.userAgent : "";
      a("es5", function() {
        return b("[1,].length==1");
      });
      a("es6", function() {
        return f.match(/Edge\/(\d+)(\.\d)*/i) ? false : b('(()=>{"use strict";class X{constructor(){if(new.target!=String)throw 1;this.x=42}}let q=Reflect.construct(X,[],String);if(q.x!=42||!(q instanceof String))throw 1;for(const a of[2,3]){if(a==2)continue;function f(z={a}){let a=0;return z.a}{function f(){return 0;}}return f()==3}})()');
      });
      a("es7", function() {
        return b("2 ** 2 == 4");
      });
      a("es8", function() {
        return b("async () => 1, true");
      });
      a("es9", function() {
        return b("({...rest} = {}), true");
      });
      a("es_next", function() {
        return false;
      });
      return { target: c, map: d };
    }, goog.Transpiler.prototype.needsTranspile = function(a2, b) {
      if (goog.TRANSPILE == "always")
        return true;
      if (goog.TRANSPILE == "never")
        return false;
      if (!this.requiresTranspilation_) {
        var c2 = this.createRequiresTranspilation_();
        this.requiresTranspilation_ = c2.map;
        this.transpilationTarget_ = this.transpilationTarget_ || c2.target;
      }
      if (a2 in this.requiresTranspilation_)
        return this.requiresTranspilation_[a2] ? true : !goog.inHtmlDocument_() || b != "es6" || "noModule" in goog.global.document.createElement("script") ? false : true;
      throw Error("Unknown language mode: " + a2);
    }, goog.Transpiler.prototype.transpile = function(a2, b) {
      return goog.transpile_(a2, b, this.transpilationTarget_);
    }, goog.transpiler_ = new goog.Transpiler(), goog.protectScriptTag_ = function(a2) {
      return a2.replace(/<\/(SCRIPT)/ig, "\\x3c/$1");
    }, goog.DebugLoader_ = function() {
      this.dependencies_ = {};
      this.idToPath_ = {};
      this.written_ = {};
      this.loadingDeps_ = [];
      this.depsToLoad_ = [];
      this.paused_ = false;
      this.factory_ = new goog.DependencyFactory(goog.transpiler_);
      this.deferredCallbacks_ = {};
      this.deferredQueue_ = [];
    }, goog.DebugLoader_.prototype.bootstrap = function(a2, b) {
      function c2() {
        d2 && (goog.global.setTimeout(d2, 0), d2 = null);
      }
      var d2 = b;
      if (a2.length) {
        b = [];
        for (var e2 = 0; e2 < a2.length; e2++) {
          var f = this.getPathFromDeps_(a2[e2]);
          if (!f)
            throw Error("Unregonized namespace: " + a2[e2]);
          b.push(this.dependencies_[f]);
        }
        f = goog.require;
        var g = 0;
        for (e2 = 0; e2 < a2.length; e2++)
          f(a2[e2]), b[e2].onLoad(function() {
            ++g == a2.length && c2();
          });
      } else
        c2();
    }, goog.DebugLoader_.prototype.loadClosureDeps = function() {
      this.depsToLoad_.push(this.factory_.createDependency(goog.normalizePath_(goog.basePath + "deps.js"), "deps.js", [], [], {}, false));
      this.loadDeps_();
    }, goog.DebugLoader_.prototype.requested = function(a2, b) {
      (a2 = this.getPathFromDeps_(a2)) && (b || this.areDepsLoaded_(this.dependencies_[a2].requires)) && (b = this.deferredCallbacks_[a2]) && (delete this.deferredCallbacks_[a2], b());
    }, goog.DebugLoader_.prototype.setDependencyFactory = function(a2) {
      this.factory_ = a2;
    }, goog.DebugLoader_.prototype.load_ = function(a2) {
      if (this.getPathFromDeps_(a2)) {
        var b = this, c2 = [], d2 = function(a3) {
          var e2 = b.getPathFromDeps_(a3);
          if (!e2)
            throw Error("Bad dependency path or symbol: " + a3);
          if (!b.written_[e2]) {
            b.written_[e2] = true;
            a3 = b.dependencies_[e2];
            for (e2 = 0; e2 < a3.requires.length; e2++)
              goog.isProvided_(a3.requires[e2]) || d2(a3.requires[e2]);
            c2.push(a3);
          }
        };
        d2(a2);
        a2 = !!this.depsToLoad_.length;
        this.depsToLoad_ = this.depsToLoad_.concat(c2);
        this.paused_ || a2 || this.loadDeps_();
      } else
        throw a2 = "goog.require could not find: " + a2, goog.logToConsole_(a2), Error(a2);
    }, goog.DebugLoader_.prototype.loadDeps_ = function() {
      for (var a2 = this, b = this.paused_; this.depsToLoad_.length && !b; )
        (function() {
          var c2 = false, d2 = a2.depsToLoad_.shift(), e2 = false;
          a2.loading_(d2);
          var f = { pause: function() {
            if (c2)
              throw Error("Cannot call pause after the call to load.");
            b = true;
          }, resume: function() {
            c2 ? a2.resume_() : b = false;
          }, loaded: function() {
            if (e2)
              throw Error("Double call to loaded.");
            e2 = true;
            a2.loaded_(d2);
          }, pending: function() {
            for (var b2 = [], c3 = 0; c3 < a2.loadingDeps_.length; c3++)
              b2.push(a2.loadingDeps_[c3]);
            return b2;
          }, setModuleState: function(a3) {
            goog.moduleLoaderState_ = { type: a3, moduleName: "", declareLegacyNamespace: false };
          }, registerEs6ModuleExports: function(a3, b2, c3) {
            c3 && (goog.loadedModules_[c3] = { exports: b2, type: goog.ModuleType.ES6, moduleId: c3 || "" });
          }, registerGoogModuleExports: function(a3, b2) {
            goog.loadedModules_[a3] = { exports: b2, type: goog.ModuleType.GOOG, moduleId: a3 };
          }, clearModuleState: function() {
            goog.moduleLoaderState_ = null;
          }, defer: function(b2) {
            if (c2)
              throw Error("Cannot register with defer after the call to load.");
            a2.defer_(d2, b2);
          }, areDepsLoaded: function() {
            return a2.areDepsLoaded_(d2.requires);
          } };
          try {
            d2.load(f);
          } finally {
            c2 = true;
          }
        })();
      b && this.pause_();
    }, goog.DebugLoader_.prototype.pause_ = function() {
      this.paused_ = true;
    }, goog.DebugLoader_.prototype.resume_ = function() {
      this.paused_ && (this.paused_ = false, this.loadDeps_());
    }, goog.DebugLoader_.prototype.loading_ = function(a2) {
      this.loadingDeps_.push(a2);
    }, goog.DebugLoader_.prototype.loaded_ = function(a2) {
      for (var b = 0; b < this.loadingDeps_.length; b++)
        if (this.loadingDeps_[b] == a2) {
          this.loadingDeps_.splice(b, 1);
          break;
        }
      for (b = 0; b < this.deferredQueue_.length; b++)
        if (this.deferredQueue_[b] == a2.path) {
          this.deferredQueue_.splice(b, 1);
          break;
        }
      if (this.loadingDeps_.length == this.deferredQueue_.length && !this.depsToLoad_.length)
        for (; this.deferredQueue_.length; )
          this.requested(this.deferredQueue_.shift(), true);
      a2.loaded();
    }, goog.DebugLoader_.prototype.areDepsLoaded_ = function(a2) {
      for (var b = 0; b < a2.length; b++) {
        var c2 = this.getPathFromDeps_(a2[b]);
        if (!c2 || !(c2 in this.deferredCallbacks_ || goog.isProvided_(a2[b])))
          return false;
      }
      return true;
    }, goog.DebugLoader_.prototype.getPathFromDeps_ = function(a2) {
      return a2 in this.idToPath_ ? this.idToPath_[a2] : a2 in this.dependencies_ ? a2 : null;
    }, goog.DebugLoader_.prototype.defer_ = function(a2, b) {
      this.deferredCallbacks_[a2.path] = b;
      this.deferredQueue_.push(a2.path);
    }, goog.LoadController = function() {
    }, goog.LoadController.prototype.pause = function() {
    }, goog.LoadController.prototype.resume = function() {
    }, goog.LoadController.prototype.loaded = function() {
    }, goog.LoadController.prototype.pending = function() {
    }, goog.LoadController.prototype.registerEs6ModuleExports = function(a2, b, c2) {
    }, goog.LoadController.prototype.setModuleState = function(a2) {
    }, goog.LoadController.prototype.clearModuleState = function() {
    }, goog.LoadController.prototype.defer = function(a2) {
    }, goog.LoadController.prototype.areDepsLoaded = function() {
    }, goog.Dependency = function(a2, b, c2, d2, e2) {
      this.path = a2;
      this.relativePath = b;
      this.provides = c2;
      this.requires = d2;
      this.loadFlags = e2;
      this.loaded_ = false;
      this.loadCallbacks_ = [];
    }, goog.Dependency.prototype.getPathName = function() {
      var a2 = this.path, b = a2.indexOf("://");
      0 <= b && (a2 = a2.substring(b + 3), b = a2.indexOf("/"), 0 <= b && (a2 = a2.substring(b + 1)));
      return a2;
    }, goog.Dependency.prototype.onLoad = function(a2) {
      this.loaded_ ? a2() : this.loadCallbacks_.push(a2);
    }, goog.Dependency.prototype.loaded = function() {
      this.loaded_ = true;
      var a2 = this.loadCallbacks_;
      this.loadCallbacks_ = [];
      for (var b = 0; b < a2.length; b++)
        a2[b]();
    }, goog.Dependency.defer_ = false, goog.Dependency.callbackMap_ = {}, goog.Dependency.registerCallback_ = function(a2) {
      var b = Math.random().toString(32);
      goog.Dependency.callbackMap_[b] = a2;
      return b;
    }, goog.Dependency.unregisterCallback_ = function(a2) {
      delete goog.Dependency.callbackMap_[a2];
    }, goog.Dependency.callback_ = function(a2, b) {
      if (a2 in goog.Dependency.callbackMap_) {
        for (var c2 = goog.Dependency.callbackMap_[a2], d2 = [], e2 = 1; e2 < arguments.length; e2++)
          d2.push(arguments[e2]);
        c2.apply(void 0, d2);
      } else
        throw Error("Callback key " + a2 + " does not exist (was base.js loaded more than once?).");
    }, goog.Dependency.prototype.load = function(a2) {
      if (goog.global.CLOSURE_IMPORT_SCRIPT)
        goog.global.CLOSURE_IMPORT_SCRIPT(this.path) ? a2.loaded() : a2.pause();
      else if (goog.inHtmlDocument_()) {
        var b = goog.global.document;
        if (b.readyState == "complete" && !goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {
          if (/\bdeps.js$/.test(this.path)) {
            a2.loaded();
            return;
          }
          throw Error('Cannot write "' + this.path + '" after document load');
        }
        if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING && goog.isDocumentLoading_()) {
          var c2 = goog.Dependency.registerCallback_(function(b2) {
            goog.DebugLoader_.IS_OLD_IE_ && b2.readyState != "complete" || (goog.Dependency.unregisterCallback_(c2), a2.loaded());
          }), d2 = !goog.DebugLoader_.IS_OLD_IE_ && goog.getScriptNonce() ? ' nonce="' + goog.getScriptNonce() + '"' : "";
          d2 = '<script src="' + this.path + '" ' + (goog.DebugLoader_.IS_OLD_IE_ ? "onreadystatechange" : "onload") + `="goog.Dependency.callback_('` + c2 + `', this)" type="text/javascript" ` + (goog.Dependency.defer_ ? "defer" : "") + d2 + "><\/script>";
          b.write(goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createHTML(d2) : d2);
        } else {
          var e2 = b.createElement("script");
          e2.defer = goog.Dependency.defer_;
          e2.async = false;
          e2.type = "text/javascript";
          (d2 = goog.getScriptNonce()) && e2.setAttribute("nonce", d2);
          goog.DebugLoader_.IS_OLD_IE_ ? (a2.pause(), e2.onreadystatechange = function() {
            if (e2.readyState == "loaded" || e2.readyState == "complete")
              a2.loaded(), a2.resume();
          }) : e2.onload = function() {
            e2.onload = null;
            a2.loaded();
          };
          e2.src = goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createScriptURL(this.path) : this.path;
          b.head.appendChild(e2);
        }
      } else
        goog.logToConsole_("Cannot use default debug loader outside of HTML documents."), this.relativePath == "deps.js" ? (goog.logToConsole_("Consider setting CLOSURE_IMPORT_SCRIPT before loading base.js, or setting CLOSURE_NO_DEPS to true."), a2.loaded()) : a2.pause();
    }, goog.Es6ModuleDependency = function(a2, b, c2, d2, e2) {
      goog.Dependency.call(this, a2, b, c2, d2, e2);
    }, goog.inherits(goog.Es6ModuleDependency, goog.Dependency), goog.Es6ModuleDependency.prototype.load = function(a2) {
      function b(a3, b2) {
        a3 = b2 ? '<script type="module" crossorigin>' + b2 + "<\/script>" : '<script type="module" crossorigin src="' + a3 + '"><\/script>';
        d2.write(goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createHTML(a3) : a3);
      }
      function c2(a3, b2) {
        var c3 = d2.createElement("script");
        c3.defer = true;
        c3.async = false;
        c3.type = "module";
        c3.setAttribute("crossorigin", true);
        var e3 = goog.getScriptNonce();
        e3 && c3.setAttribute("nonce", e3);
        b2 ? c3.textContent = goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createScript(b2) : b2 : c3.src = goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createScriptURL(a3) : a3;
        d2.head.appendChild(c3);
      }
      if (goog.global.CLOSURE_IMPORT_SCRIPT)
        goog.global.CLOSURE_IMPORT_SCRIPT(this.path) ? a2.loaded() : a2.pause();
      else if (goog.inHtmlDocument_()) {
        var d2 = goog.global.document, e2 = this;
        if (goog.isDocumentLoading_()) {
          var f = b;
          goog.Dependency.defer_ = true;
        } else
          f = c2;
        var g = goog.Dependency.registerCallback_(function() {
          goog.Dependency.unregisterCallback_(g);
          a2.setModuleState(goog.ModuleType.ES6);
        });
        f(void 0, 'goog.Dependency.callback_("' + g + '")');
        f(this.path, void 0);
        var h2 = goog.Dependency.registerCallback_(function(b2) {
          goog.Dependency.unregisterCallback_(h2);
          a2.registerEs6ModuleExports(e2.path, b2, goog.moduleLoaderState_.moduleName);
        });
        f(void 0, 'import * as m from "' + this.path + '"; goog.Dependency.callback_("' + h2 + '", m)');
        var k = goog.Dependency.registerCallback_(function() {
          goog.Dependency.unregisterCallback_(k);
          a2.clearModuleState();
          a2.loaded();
        });
        f(void 0, 'goog.Dependency.callback_("' + k + '")');
      } else
        goog.logToConsole_("Cannot use default debug loader outside of HTML documents."), a2.pause();
    }, goog.TransformedDependency = function(a2, b, c2, d2, e2) {
      goog.Dependency.call(this, a2, b, c2, d2, e2);
      this.contents_ = null;
      this.lazyFetch_ = !goog.inHtmlDocument_() || !("noModule" in goog.global.document.createElement("script"));
    }, goog.inherits(goog.TransformedDependency, goog.Dependency), goog.TransformedDependency.prototype.load = function(a2) {
      function b() {
        e2.contents_ = goog.loadFileSync_(e2.path);
        e2.contents_ && (e2.contents_ = e2.transform(e2.contents_), e2.contents_ && (e2.contents_ += "\n//# sourceURL=" + e2.path));
      }
      function c2() {
        e2.lazyFetch_ && b();
        if (e2.contents_) {
          f && a2.setModuleState(goog.ModuleType.ES6);
          try {
            var c3 = e2.contents_;
            e2.contents_ = null;
            goog.globalEval(c3);
            if (f)
              var d3 = goog.moduleLoaderState_.moduleName;
          } finally {
            f && a2.clearModuleState();
          }
          f && goog.global.$jscomp.require.ensure([e2.getPathName()], function() {
            a2.registerEs6ModuleExports(e2.path, goog.global.$jscomp.require(e2.getPathName()), d3);
          });
          a2.loaded();
        }
      }
      function d2() {
        var a3 = goog.global.document, b2 = goog.Dependency.registerCallback_(function() {
          goog.Dependency.unregisterCallback_(b2);
          c2();
        }), d3 = '<script type="text/javascript">' + goog.protectScriptTag_('goog.Dependency.callback_("' + b2 + '");') + "<\/script>";
        a3.write(goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createHTML(d3) : d3);
      }
      var e2 = this;
      if (goog.global.CLOSURE_IMPORT_SCRIPT)
        b(), this.contents_ && goog.global.CLOSURE_IMPORT_SCRIPT("", this.contents_) ? (this.contents_ = null, a2.loaded()) : a2.pause();
      else {
        var f = this.loadFlags.module == goog.ModuleType.ES6;
        this.lazyFetch_ || b();
        var g = 1 < a2.pending().length, h2 = g && goog.DebugLoader_.IS_OLD_IE_;
        g = goog.Dependency.defer_ && (g || goog.isDocumentLoading_());
        if (h2 || g)
          a2.defer(function() {
            c2();
          });
        else {
          var k = goog.global.document;
          h2 = goog.inHtmlDocument_() && "ActiveXObject" in goog.global;
          if (f && goog.inHtmlDocument_() && goog.isDocumentLoading_() && !h2) {
            goog.Dependency.defer_ = true;
            a2.pause();
            var l2 = k.onreadystatechange;
            k.onreadystatechange = function() {
              k.readyState == "interactive" && (k.onreadystatechange = l2, c2(), a2.resume());
              goog.isFunction(l2) && l2.apply(void 0, arguments);
            };
          } else
            !goog.DebugLoader_.IS_OLD_IE_ && goog.inHtmlDocument_() && goog.isDocumentLoading_() ? d2() : c2();
        }
      }
    }, goog.TransformedDependency.prototype.transform = function(a2) {
    }, goog.TranspiledDependency = function(a2, b, c2, d2, e2, f) {
      goog.TransformedDependency.call(this, a2, b, c2, d2, e2);
      this.transpiler = f;
    }, goog.inherits(goog.TranspiledDependency, goog.TransformedDependency), goog.TranspiledDependency.prototype.transform = function(a2) {
      return this.transpiler.transpile(a2, this.getPathName());
    }, goog.PreTranspiledEs6ModuleDependency = function(a2, b, c2, d2, e2) {
      goog.TransformedDependency.call(this, a2, b, c2, d2, e2);
    }, goog.inherits(goog.PreTranspiledEs6ModuleDependency, goog.TransformedDependency), goog.PreTranspiledEs6ModuleDependency.prototype.transform = function(a2) {
      return a2;
    }, goog.GoogModuleDependency = function(a2, b, c2, d2, e2, f, g) {
      goog.TransformedDependency.call(this, a2, b, c2, d2, e2);
      this.needsTranspile_ = f;
      this.transpiler_ = g;
    }, goog.inherits(goog.GoogModuleDependency, goog.TransformedDependency), goog.GoogModuleDependency.prototype.transform = function(a2) {
      this.needsTranspile_ && (a2 = this.transpiler_.transpile(a2, this.getPathName()));
      return goog.LOAD_MODULE_USING_EVAL && goog.isDef(goog.global.JSON) ? "goog.loadModule(" + goog.global.JSON.stringify(a2 + "\n//# sourceURL=" + this.path + "\n") + ");" : 'goog.loadModule(function(exports) {"use strict";' + a2 + "\n;return exports});\n//# sourceURL=" + this.path + "\n";
    }, goog.DebugLoader_.IS_OLD_IE_ = !(goog.global.atob || !goog.global.document || !goog.global.document.all), goog.DebugLoader_.prototype.addDependency = function(a2, b, c2, d2) {
      b = b || [];
      a2 = a2.replace(/\\/g, "/");
      var e2 = goog.normalizePath_(goog.basePath + a2);
      d2 && typeof d2 !== "boolean" || (d2 = d2 ? { module: goog.ModuleType.GOOG } : {});
      c2 = this.factory_.createDependency(e2, a2, b, c2, d2, goog.transpiler_.needsTranspile(d2.lang || "es3", d2.module));
      this.dependencies_[e2] = c2;
      for (c2 = 0; c2 < b.length; c2++)
        this.idToPath_[b[c2]] = e2;
      this.idToPath_[a2] = e2;
    }, goog.DependencyFactory = function(a2) {
      this.transpiler = a2;
    }, goog.DependencyFactory.prototype.createDependency = function(a2, b, c2, d2, e2, f) {
      return e2.module == goog.ModuleType.GOOG ? new goog.GoogModuleDependency(a2, b, c2, d2, e2, f, this.transpiler) : f ? new goog.TranspiledDependency(a2, b, c2, d2, e2, this.transpiler) : e2.module == goog.ModuleType.ES6 ? goog.TRANSPILE == "never" && goog.ASSUME_ES_MODULES_TRANSPILED ? new goog.PreTranspiledEs6ModuleDependency(a2, b, c2, d2, e2) : new goog.Es6ModuleDependency(a2, b, c2, d2, e2) : new goog.Dependency(a2, b, c2, d2, e2);
    }, goog.debugLoader_ = new goog.DebugLoader_(), goog.loadClosureDeps = function() {
      goog.debugLoader_.loadClosureDeps();
    }, goog.setDependencyFactory = function(a2) {
      goog.debugLoader_.setDependencyFactory(a2);
    }, goog.global.CLOSURE_NO_DEPS || goog.debugLoader_.loadClosureDeps(), goog.bootstrap = function(a2, b) {
      goog.debugLoader_.bootstrap(a2, b);
    });
    goog.TRUSTED_TYPES_POLICY_NAME = "";
    goog.identity_ = function(a2) {
      return a2;
    };
    goog.createTrustedTypesPolicy = function(a2) {
      var b = null;
      if (typeof TrustedTypes === "undefined" || !TrustedTypes.createPolicy)
        return b;
      try {
        b = TrustedTypes.createPolicy(a2, { createHTML: goog.identity_, createScript: goog.identity_, createScriptURL: goog.identity_, createURL: goog.identity_ });
      } catch (c2) {
        goog.logToConsole_(c2.message);
      }
      return b;
    };
    goog.TRUSTED_TYPES_POLICY_ = goog.TRUSTED_TYPES_POLICY_NAME ? goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME + "#base") : null;
    goog.object = {};
    goog.object.is = function(a2, b) {
      return a2 === b ? a2 !== 0 || 1 / a2 === 1 / b : a2 !== a2 && b !== b;
    };
    goog.object.forEach = function(a2, b, c2) {
      for (var d2 in a2)
        b.call(c2, a2[d2], d2, a2);
    };
    goog.object.filter = function(a2, b, c2) {
      var d2 = {}, e2;
      for (e2 in a2)
        b.call(c2, a2[e2], e2, a2) && (d2[e2] = a2[e2]);
      return d2;
    };
    goog.object.map = function(a2, b, c2) {
      var d2 = {}, e2;
      for (e2 in a2)
        d2[e2] = b.call(c2, a2[e2], e2, a2);
      return d2;
    };
    goog.object.some = function(a2, b, c2) {
      for (var d2 in a2)
        if (b.call(c2, a2[d2], d2, a2))
          return true;
      return false;
    };
    goog.object.every = function(a2, b, c2) {
      for (var d2 in a2)
        if (!b.call(c2, a2[d2], d2, a2))
          return false;
      return true;
    };
    goog.object.getCount = function(a2) {
      var b = 0, c2;
      for (c2 in a2)
        b++;
      return b;
    };
    goog.object.getAnyKey = function(a2) {
      for (var b in a2)
        return b;
    };
    goog.object.getAnyValue = function(a2) {
      for (var b in a2)
        return a2[b];
    };
    goog.object.contains = function(a2, b) {
      return goog.object.containsValue(a2, b);
    };
    goog.object.getValues = function(a2) {
      var b = [], c2 = 0, d2;
      for (d2 in a2)
        b[c2++] = a2[d2];
      return b;
    };
    goog.object.getKeys = function(a2) {
      var b = [], c2 = 0, d2;
      for (d2 in a2)
        b[c2++] = d2;
      return b;
    };
    goog.object.getValueByKeys = function(a2, b) {
      var c2 = goog.isArrayLike(b), d2 = c2 ? b : arguments;
      for (c2 = c2 ? 0 : 1; c2 < d2.length; c2++) {
        if (a2 == null)
          return;
        a2 = a2[d2[c2]];
      }
      return a2;
    };
    goog.object.containsKey = function(a2, b) {
      return a2 !== null && b in a2;
    };
    goog.object.containsValue = function(a2, b) {
      for (var c2 in a2)
        if (a2[c2] == b)
          return true;
      return false;
    };
    goog.object.findKey = function(a2, b, c2) {
      for (var d2 in a2)
        if (b.call(c2, a2[d2], d2, a2))
          return d2;
    };
    goog.object.findValue = function(a2, b, c2) {
      return (b = goog.object.findKey(a2, b, c2)) && a2[b];
    };
    goog.object.isEmpty = function(a2) {
      for (var b in a2)
        return false;
      return true;
    };
    goog.object.clear = function(a2) {
      for (var b in a2)
        delete a2[b];
    };
    goog.object.remove = function(a2, b) {
      var c2;
      (c2 = b in a2) && delete a2[b];
      return c2;
    };
    goog.object.add = function(a2, b, c2) {
      if (a2 !== null && b in a2)
        throw Error('The object already contains the key "' + b + '"');
      goog.object.set(a2, b, c2);
    };
    goog.object.get = function(a2, b, c2) {
      return a2 !== null && b in a2 ? a2[b] : c2;
    };
    goog.object.set = function(a2, b, c2) {
      a2[b] = c2;
    };
    goog.object.setIfUndefined = function(a2, b, c2) {
      return b in a2 ? a2[b] : a2[b] = c2;
    };
    goog.object.setWithReturnValueIfNotSet = function(a2, b, c2) {
      if (b in a2)
        return a2[b];
      c2 = c2();
      return a2[b] = c2;
    };
    goog.object.equals = function(a2, b) {
      for (var c2 in a2)
        if (!(c2 in b) || a2[c2] !== b[c2])
          return false;
      for (var d2 in b)
        if (!(d2 in a2))
          return false;
      return true;
    };
    goog.object.clone = function(a2) {
      var b = {}, c2;
      for (c2 in a2)
        b[c2] = a2[c2];
      return b;
    };
    goog.object.unsafeClone = function(a2) {
      var b = goog.typeOf(a2);
      if (b == "object" || b == "array") {
        if (goog.isFunction(a2.clone))
          return a2.clone();
        b = b == "array" ? [] : {};
        for (var c2 in a2)
          b[c2] = goog.object.unsafeClone(a2[c2]);
        return b;
      }
      return a2;
    };
    goog.object.transpose = function(a2) {
      var b = {}, c2;
      for (c2 in a2)
        b[a2[c2]] = c2;
      return b;
    };
    goog.object.PROTOTYPE_FIELDS_ = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
    goog.object.extend = function(a2, b) {
      for (var c2, d2, e2 = 1; e2 < arguments.length; e2++) {
        d2 = arguments[e2];
        for (c2 in d2)
          a2[c2] = d2[c2];
        for (var f = 0; f < goog.object.PROTOTYPE_FIELDS_.length; f++)
          c2 = goog.object.PROTOTYPE_FIELDS_[f], Object.prototype.hasOwnProperty.call(d2, c2) && (a2[c2] = d2[c2]);
      }
    };
    goog.object.create = function(a2) {
      var b = arguments.length;
      if (b == 1 && goog.isArray(arguments[0]))
        return goog.object.create.apply(null, arguments[0]);
      if (b % 2)
        throw Error("Uneven number of arguments");
      for (var c2 = {}, d2 = 0; d2 < b; d2 += 2)
        c2[arguments[d2]] = arguments[d2 + 1];
      return c2;
    };
    goog.object.createSet = function(a2) {
      var b = arguments.length;
      if (b == 1 && goog.isArray(arguments[0]))
        return goog.object.createSet.apply(null, arguments[0]);
      for (var c2 = {}, d2 = 0; d2 < b; d2++)
        c2[arguments[d2]] = true;
      return c2;
    };
    goog.object.createImmutableView = function(a2) {
      var b = a2;
      Object.isFrozen && !Object.isFrozen(a2) && (b = Object.create(a2), Object.freeze(b));
      return b;
    };
    goog.object.isImmutableView = function(a2) {
      return !!Object.isFrozen && Object.isFrozen(a2);
    };
    goog.object.getAllPropertyNames = function(a2, b, c2) {
      if (!a2)
        return [];
      if (!Object.getOwnPropertyNames || !Object.getPrototypeOf)
        return goog.object.getKeys(a2);
      for (var d2 = {}; a2 && (a2 !== Object.prototype || b) && (a2 !== Function.prototype || c2); ) {
        for (var e2 = Object.getOwnPropertyNames(a2), f = 0; f < e2.length; f++)
          d2[e2[f]] = true;
        a2 = Object.getPrototypeOf(a2);
      }
      return goog.object.getKeys(d2);
    };
    goog.object.getSuperClass = function(a2) {
      return (a2 = Object.getPrototypeOf(a2.prototype)) && a2.constructor;
    };
    goog.debug = {};
    goog.debug.Error = function(a2) {
      if (Error.captureStackTrace)
        Error.captureStackTrace(this, goog.debug.Error);
      else {
        var b = Error().stack;
        b && (this.stack = b);
      }
      a2 && (this.message = String(a2));
      this.reportErrorToServer = true;
    };
    goog.inherits(goog.debug.Error, Error);
    goog.debug.Error.prototype.name = "CustomError";
    goog.dom = {};
    goog.dom.NodeType = { ELEMENT: 1, ATTRIBUTE: 2, TEXT: 3, CDATA_SECTION: 4, ENTITY_REFERENCE: 5, ENTITY: 6, PROCESSING_INSTRUCTION: 7, COMMENT: 8, DOCUMENT: 9, DOCUMENT_TYPE: 10, DOCUMENT_FRAGMENT: 11, NOTATION: 12 };
    goog.asserts = {};
    goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
    goog.asserts.AssertionError = function(a2, b) {
      goog.debug.Error.call(this, goog.asserts.subs_(a2, b));
      this.messagePattern = a2;
    };
    goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
    goog.asserts.AssertionError.prototype.name = "AssertionError";
    goog.asserts.DEFAULT_ERROR_HANDLER = function(a2) {
      throw a2;
    };
    goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
    goog.asserts.subs_ = function(a2, b) {
      a2 = a2.split("%s");
      for (var c2 = "", d2 = a2.length - 1, e2 = 0; e2 < d2; e2++)
        c2 += a2[e2] + (e2 < b.length ? b[e2] : "%s");
      return c2 + a2[d2];
    };
    goog.asserts.doAssertFailure_ = function(a2, b, c2, d2) {
      var e2 = "Assertion failed";
      if (c2) {
        e2 += ": " + c2;
        var f = d2;
      } else
        a2 && (e2 += ": " + a2, f = b);
      a2 = new goog.asserts.AssertionError("" + e2, f || []);
      goog.asserts.errorHandler_(a2);
    };
    goog.asserts.setErrorHandler = function(a2) {
      goog.asserts.ENABLE_ASSERTS && (goog.asserts.errorHandler_ = a2);
    };
    goog.asserts.assert = function(a2, b, c2) {
      goog.asserts.ENABLE_ASSERTS && !a2 && goog.asserts.doAssertFailure_("", null, b, Array.prototype.slice.call(arguments, 2));
      return a2;
    };
    goog.asserts.assertExists = function(a2, b, c2) {
      goog.asserts.ENABLE_ASSERTS && a2 == null && goog.asserts.doAssertFailure_("Expected to exist: %s.", [a2], b, Array.prototype.slice.call(arguments, 2));
      return a2;
    };
    goog.asserts.fail = function(a2, b) {
      goog.asserts.ENABLE_ASSERTS && goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (a2 ? ": " + a2 : ""), Array.prototype.slice.call(arguments, 1)));
    };
    goog.asserts.assertNumber = function(a2, b, c2) {
      goog.asserts.ENABLE_ASSERTS && !goog.isNumber(a2) && goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(a2), a2], b, Array.prototype.slice.call(arguments, 2));
      return a2;
    };
    goog.asserts.assertString = function(a2, b, c2) {
      goog.asserts.ENABLE_ASSERTS && !goog.isString(a2) && goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(a2), a2], b, Array.prototype.slice.call(arguments, 2));
      return a2;
    };
    goog.asserts.assertFunction = function(a2, b, c2) {
      goog.asserts.ENABLE_ASSERTS && !goog.isFunction(a2) && goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(a2), a2], b, Array.prototype.slice.call(arguments, 2));
      return a2;
    };
    goog.asserts.assertObject = function(a2, b, c2) {
      goog.asserts.ENABLE_ASSERTS && !goog.isObject(a2) && goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(a2), a2], b, Array.prototype.slice.call(arguments, 2));
      return a2;
    };
    goog.asserts.assertArray = function(a2, b, c2) {
      goog.asserts.ENABLE_ASSERTS && !goog.isArray(a2) && goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(a2), a2], b, Array.prototype.slice.call(arguments, 2));
      return a2;
    };
    goog.asserts.assertBoolean = function(a2, b, c2) {
      goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(a2) && goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(a2), a2], b, Array.prototype.slice.call(arguments, 2));
      return a2;
    };
    goog.asserts.assertElement = function(a2, b, c2) {
      !goog.asserts.ENABLE_ASSERTS || goog.isObject(a2) && a2.nodeType == goog.dom.NodeType.ELEMENT || goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(a2), a2], b, Array.prototype.slice.call(arguments, 2));
      return a2;
    };
    goog.asserts.assertInstanceof = function(a2, b, c2, d2) {
      !goog.asserts.ENABLE_ASSERTS || a2 instanceof b || goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.", [goog.asserts.getType_(b), goog.asserts.getType_(a2)], c2, Array.prototype.slice.call(arguments, 3));
      return a2;
    };
    goog.asserts.assertFinite = function(a2, b, c2) {
      !goog.asserts.ENABLE_ASSERTS || typeof a2 == "number" && isFinite(a2) || goog.asserts.doAssertFailure_("Expected %s to be a finite number but it is not.", [a2], b, Array.prototype.slice.call(arguments, 2));
      return a2;
    };
    goog.asserts.assertObjectPrototypeIsIntact = function() {
      for (var a2 in Object.prototype)
        goog.asserts.fail(a2 + " should not be enumerable in Object.prototype.");
    };
    goog.asserts.getType_ = function(a2) {
      return a2 instanceof Function ? a2.displayName || a2.name || "unknown type name" : a2 instanceof Object ? a2.constructor.displayName || a2.constructor.name || Object.prototype.toString.call(a2) : a2 === null ? "null" : typeof a2;
    };
    var jspb = { BinaryConstants: {}, ConstBinaryMessage: function() {
    }, BinaryMessage: function() {
    } };
    jspb.BinaryConstants.FieldType = { INVALID: -1, DOUBLE: 1, FLOAT: 2, INT64: 3, UINT64: 4, INT32: 5, FIXED64: 6, FIXED32: 7, BOOL: 8, STRING: 9, GROUP: 10, MESSAGE: 11, BYTES: 12, UINT32: 13, ENUM: 14, SFIXED32: 15, SFIXED64: 16, SINT32: 17, SINT64: 18, FHASH64: 30, VHASH64: 31 };
    jspb.BinaryConstants.WireType = { INVALID: -1, VARINT: 0, FIXED64: 1, DELIMITED: 2, START_GROUP: 3, END_GROUP: 4, FIXED32: 5 };
    jspb.BinaryConstants.FieldTypeToWireType = function(a2) {
      var b = jspb.BinaryConstants.FieldType, c2 = jspb.BinaryConstants.WireType;
      switch (a2) {
        case b.INT32:
        case b.INT64:
        case b.UINT32:
        case b.UINT64:
        case b.SINT32:
        case b.SINT64:
        case b.BOOL:
        case b.ENUM:
        case b.VHASH64:
          return c2.VARINT;
        case b.DOUBLE:
        case b.FIXED64:
        case b.SFIXED64:
        case b.FHASH64:
          return c2.FIXED64;
        case b.STRING:
        case b.MESSAGE:
        case b.BYTES:
          return c2.DELIMITED;
        case b.FLOAT:
        case b.FIXED32:
        case b.SFIXED32:
          return c2.FIXED32;
        default:
          return c2.INVALID;
      }
    };
    jspb.BinaryConstants.INVALID_FIELD_NUMBER = -1;
    jspb.BinaryConstants.FLOAT32_EPS = 1401298464324817e-60;
    jspb.BinaryConstants.FLOAT32_MIN = 11754943508222875e-54;
    jspb.BinaryConstants.FLOAT32_MAX = 34028234663852886e22;
    jspb.BinaryConstants.FLOAT64_EPS = 5e-324;
    jspb.BinaryConstants.FLOAT64_MIN = 22250738585072014e-324;
    jspb.BinaryConstants.FLOAT64_MAX = 17976931348623157e292;
    jspb.BinaryConstants.TWO_TO_20 = 1048576;
    jspb.BinaryConstants.TWO_TO_23 = 8388608;
    jspb.BinaryConstants.TWO_TO_31 = 2147483648;
    jspb.BinaryConstants.TWO_TO_32 = 4294967296;
    jspb.BinaryConstants.TWO_TO_52 = 4503599627370496;
    jspb.BinaryConstants.TWO_TO_63 = 9223372036854776e3;
    jspb.BinaryConstants.TWO_TO_64 = 18446744073709552e3;
    jspb.BinaryConstants.ZERO_HASH = "\0\0\0\0\0\0\0\0";
    goog.array = {};
    goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
    goog.array.ASSUME_NATIVE_FUNCTIONS = 2012 < goog.FEATURESET_YEAR;
    goog.array.peek = function(a2) {
      return a2[a2.length - 1];
    };
    goog.array.last = goog.array.peek;
    goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.indexOf) ? function(a2, b, c2) {
      goog.asserts.assert(a2.length != null);
      return Array.prototype.indexOf.call(a2, b, c2);
    } : function(a2, b, c2) {
      c2 = c2 == null ? 0 : 0 > c2 ? Math.max(0, a2.length + c2) : c2;
      if (goog.isString(a2))
        return goog.isString(b) && b.length == 1 ? a2.indexOf(b, c2) : -1;
      for (; c2 < a2.length; c2++)
        if (c2 in a2 && a2[c2] === b)
          return c2;
      return -1;
    };
    goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.lastIndexOf) ? function(a2, b, c2) {
      goog.asserts.assert(a2.length != null);
      return Array.prototype.lastIndexOf.call(a2, b, c2 == null ? a2.length - 1 : c2);
    } : function(a2, b, c2) {
      c2 = c2 == null ? a2.length - 1 : c2;
      0 > c2 && (c2 = Math.max(0, a2.length + c2));
      if (goog.isString(a2))
        return goog.isString(b) && b.length == 1 ? a2.lastIndexOf(b, c2) : -1;
      for (; 0 <= c2; c2--)
        if (c2 in a2 && a2[c2] === b)
          return c2;
      return -1;
    };
    goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.forEach) ? function(a2, b, c2) {
      goog.asserts.assert(a2.length != null);
      Array.prototype.forEach.call(a2, b, c2);
    } : function(a2, b, c2) {
      for (var d2 = a2.length, e2 = goog.isString(a2) ? a2.split("") : a2, f = 0; f < d2; f++)
        f in e2 && b.call(c2, e2[f], f, a2);
    };
    goog.array.forEachRight = function(a2, b, c2) {
      var d2 = a2.length, e2 = goog.isString(a2) ? a2.split("") : a2;
      for (--d2; 0 <= d2; --d2)
        d2 in e2 && b.call(c2, e2[d2], d2, a2);
    };
    goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.filter) ? function(a2, b, c2) {
      goog.asserts.assert(a2.length != null);
      return Array.prototype.filter.call(a2, b, c2);
    } : function(a2, b, c2) {
      for (var d2 = a2.length, e2 = [], f = 0, g = goog.isString(a2) ? a2.split("") : a2, h2 = 0; h2 < d2; h2++)
        if (h2 in g) {
          var k = g[h2];
          b.call(c2, k, h2, a2) && (e2[f++] = k);
        }
      return e2;
    };
    goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.map) ? function(a2, b, c2) {
      goog.asserts.assert(a2.length != null);
      return Array.prototype.map.call(a2, b, c2);
    } : function(a2, b, c2) {
      for (var d2 = a2.length, e2 = Array(d2), f = goog.isString(a2) ? a2.split("") : a2, g = 0; g < d2; g++)
        g in f && (e2[g] = b.call(c2, f[g], g, a2));
      return e2;
    };
    goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduce) ? function(a2, b, c2, d2) {
      goog.asserts.assert(a2.length != null);
      d2 && (b = goog.bind(b, d2));
      return Array.prototype.reduce.call(a2, b, c2);
    } : function(a2, b, c2, d2) {
      var e2 = c2;
      goog.array.forEach(a2, function(c3, g) {
        e2 = b.call(d2, e2, c3, g, a2);
      });
      return e2;
    };
    goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduceRight) ? function(a2, b, c2, d2) {
      goog.asserts.assert(a2.length != null);
      goog.asserts.assert(b != null);
      d2 && (b = goog.bind(b, d2));
      return Array.prototype.reduceRight.call(a2, b, c2);
    } : function(a2, b, c2, d2) {
      var e2 = c2;
      goog.array.forEachRight(a2, function(c3, g) {
        e2 = b.call(d2, e2, c3, g, a2);
      });
      return e2;
    };
    goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.some) ? function(a2, b, c2) {
      goog.asserts.assert(a2.length != null);
      return Array.prototype.some.call(a2, b, c2);
    } : function(a2, b, c2) {
      for (var d2 = a2.length, e2 = goog.isString(a2) ? a2.split("") : a2, f = 0; f < d2; f++)
        if (f in e2 && b.call(c2, e2[f], f, a2))
          return true;
      return false;
    };
    goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.every) ? function(a2, b, c2) {
      goog.asserts.assert(a2.length != null);
      return Array.prototype.every.call(a2, b, c2);
    } : function(a2, b, c2) {
      for (var d2 = a2.length, e2 = goog.isString(a2) ? a2.split("") : a2, f = 0; f < d2; f++)
        if (f in e2 && !b.call(c2, e2[f], f, a2))
          return false;
      return true;
    };
    goog.array.count = function(a2, b, c2) {
      var d2 = 0;
      goog.array.forEach(a2, function(a3, f, g) {
        b.call(c2, a3, f, g) && ++d2;
      }, c2);
      return d2;
    };
    goog.array.find = function(a2, b, c2) {
      b = goog.array.findIndex(a2, b, c2);
      return 0 > b ? null : goog.isString(a2) ? a2.charAt(b) : a2[b];
    };
    goog.array.findIndex = function(a2, b, c2) {
      for (var d2 = a2.length, e2 = goog.isString(a2) ? a2.split("") : a2, f = 0; f < d2; f++)
        if (f in e2 && b.call(c2, e2[f], f, a2))
          return f;
      return -1;
    };
    goog.array.findRight = function(a2, b, c2) {
      b = goog.array.findIndexRight(a2, b, c2);
      return 0 > b ? null : goog.isString(a2) ? a2.charAt(b) : a2[b];
    };
    goog.array.findIndexRight = function(a2, b, c2) {
      var d2 = a2.length, e2 = goog.isString(a2) ? a2.split("") : a2;
      for (--d2; 0 <= d2; d2--)
        if (d2 in e2 && b.call(c2, e2[d2], d2, a2))
          return d2;
      return -1;
    };
    goog.array.contains = function(a2, b) {
      return 0 <= goog.array.indexOf(a2, b);
    };
    goog.array.isEmpty = function(a2) {
      return a2.length == 0;
    };
    goog.array.clear = function(a2) {
      if (!goog.isArray(a2))
        for (var b = a2.length - 1; 0 <= b; b--)
          delete a2[b];
      a2.length = 0;
    };
    goog.array.insert = function(a2, b) {
      goog.array.contains(a2, b) || a2.push(b);
    };
    goog.array.insertAt = function(a2, b, c2) {
      goog.array.splice(a2, c2, 0, b);
    };
    goog.array.insertArrayAt = function(a2, b, c2) {
      goog.partial(goog.array.splice, a2, c2, 0).apply(null, b);
    };
    goog.array.insertBefore = function(a2, b, c2) {
      var d2;
      arguments.length == 2 || 0 > (d2 = goog.array.indexOf(a2, c2)) ? a2.push(b) : goog.array.insertAt(a2, b, d2);
    };
    goog.array.remove = function(a2, b) {
      b = goog.array.indexOf(a2, b);
      var c2;
      (c2 = 0 <= b) && goog.array.removeAt(a2, b);
      return c2;
    };
    goog.array.removeLast = function(a2, b) {
      b = goog.array.lastIndexOf(a2, b);
      return 0 <= b ? (goog.array.removeAt(a2, b), true) : false;
    };
    goog.array.removeAt = function(a2, b) {
      goog.asserts.assert(a2.length != null);
      return Array.prototype.splice.call(a2, b, 1).length == 1;
    };
    goog.array.removeIf = function(a2, b, c2) {
      b = goog.array.findIndex(a2, b, c2);
      return 0 <= b ? (goog.array.removeAt(a2, b), true) : false;
    };
    goog.array.removeAllIf = function(a2, b, c2) {
      var d2 = 0;
      goog.array.forEachRight(a2, function(e2, f) {
        b.call(c2, e2, f, a2) && goog.array.removeAt(a2, f) && d2++;
      });
      return d2;
    };
    goog.array.concat = function(a2) {
      return Array.prototype.concat.apply([], arguments);
    };
    goog.array.join = function(a2) {
      return Array.prototype.concat.apply([], arguments);
    };
    goog.array.toArray = function(a2) {
      var b = a2.length;
      if (0 < b) {
        for (var c2 = Array(b), d2 = 0; d2 < b; d2++)
          c2[d2] = a2[d2];
        return c2;
      }
      return [];
    };
    goog.array.clone = goog.array.toArray;
    goog.array.extend = function(a2, b) {
      for (var c2 = 1; c2 < arguments.length; c2++) {
        var d2 = arguments[c2];
        if (goog.isArrayLike(d2)) {
          var e2 = a2.length || 0, f = d2.length || 0;
          a2.length = e2 + f;
          for (var g = 0; g < f; g++)
            a2[e2 + g] = d2[g];
        } else
          a2.push(d2);
      }
    };
    goog.array.splice = function(a2, b, c2, d2) {
      goog.asserts.assert(a2.length != null);
      return Array.prototype.splice.apply(a2, goog.array.slice(arguments, 1));
    };
    goog.array.slice = function(a2, b, c2) {
      goog.asserts.assert(a2.length != null);
      return 2 >= arguments.length ? Array.prototype.slice.call(a2, b) : Array.prototype.slice.call(a2, b, c2);
    };
    goog.array.removeDuplicates = function(a2, b, c2) {
      b = b || a2;
      var d2 = function(a3) {
        return goog.isObject(a3) ? "o" + goog.getUid(a3) : (typeof a3).charAt(0) + a3;
      };
      c2 = c2 || d2;
      d2 = {};
      for (var e2 = 0, f = 0; f < a2.length; ) {
        var g = a2[f++], h2 = c2(g);
        Object.prototype.hasOwnProperty.call(d2, h2) || (d2[h2] = true, b[e2++] = g);
      }
      b.length = e2;
    };
    goog.array.binarySearch = function(a2, b, c2) {
      return goog.array.binarySearch_(a2, c2 || goog.array.defaultCompare, false, b);
    };
    goog.array.binarySelect = function(a2, b, c2) {
      return goog.array.binarySearch_(a2, b, true, void 0, c2);
    };
    goog.array.binarySearch_ = function(a2, b, c2, d2, e2) {
      for (var f = 0, g = a2.length, h2; f < g; ) {
        var k = f + g >> 1;
        var l2 = c2 ? b.call(e2, a2[k], k, a2) : b(d2, a2[k]);
        0 < l2 ? f = k + 1 : (g = k, h2 = !l2);
      }
      return h2 ? f : ~f;
    };
    goog.array.sort = function(a2, b) {
      a2.sort(b || goog.array.defaultCompare);
    };
    goog.array.stableSort = function(a2, b) {
      for (var c2 = Array(a2.length), d2 = 0; d2 < a2.length; d2++)
        c2[d2] = { index: d2, value: a2[d2] };
      var e2 = b || goog.array.defaultCompare;
      goog.array.sort(c2, function(a3, b2) {
        return e2(a3.value, b2.value) || a3.index - b2.index;
      });
      for (d2 = 0; d2 < a2.length; d2++)
        a2[d2] = c2[d2].value;
    };
    goog.array.sortByKey = function(a2, b, c2) {
      var d2 = c2 || goog.array.defaultCompare;
      goog.array.sort(a2, function(a3, c3) {
        return d2(b(a3), b(c3));
      });
    };
    goog.array.sortObjectsByKey = function(a2, b, c2) {
      goog.array.sortByKey(a2, function(a3) {
        return a3[b];
      }, c2);
    };
    goog.array.isSorted = function(a2, b, c2) {
      b = b || goog.array.defaultCompare;
      for (var d2 = 1; d2 < a2.length; d2++) {
        var e2 = b(a2[d2 - 1], a2[d2]);
        if (0 < e2 || e2 == 0 && c2)
          return false;
      }
      return true;
    };
    goog.array.equals = function(a2, b, c2) {
      if (!goog.isArrayLike(a2) || !goog.isArrayLike(b) || a2.length != b.length)
        return false;
      var d2 = a2.length;
      c2 = c2 || goog.array.defaultCompareEquality;
      for (var e2 = 0; e2 < d2; e2++)
        if (!c2(a2[e2], b[e2]))
          return false;
      return true;
    };
    goog.array.compare3 = function(a2, b, c2) {
      c2 = c2 || goog.array.defaultCompare;
      for (var d2 = Math.min(a2.length, b.length), e2 = 0; e2 < d2; e2++) {
        var f = c2(a2[e2], b[e2]);
        if (f != 0)
          return f;
      }
      return goog.array.defaultCompare(a2.length, b.length);
    };
    goog.array.defaultCompare = function(a2, b) {
      return a2 > b ? 1 : a2 < b ? -1 : 0;
    };
    goog.array.inverseDefaultCompare = function(a2, b) {
      return -goog.array.defaultCompare(a2, b);
    };
    goog.array.defaultCompareEquality = function(a2, b) {
      return a2 === b;
    };
    goog.array.binaryInsert = function(a2, b, c2) {
      c2 = goog.array.binarySearch(a2, b, c2);
      return 0 > c2 ? (goog.array.insertAt(a2, b, -(c2 + 1)), true) : false;
    };
    goog.array.binaryRemove = function(a2, b, c2) {
      b = goog.array.binarySearch(a2, b, c2);
      return 0 <= b ? goog.array.removeAt(a2, b) : false;
    };
    goog.array.bucket = function(a2, b, c2) {
      for (var d2 = {}, e2 = 0; e2 < a2.length; e2++) {
        var f = a2[e2], g = b.call(c2, f, e2, a2);
        goog.isDef(g) && (d2[g] || (d2[g] = [])).push(f);
      }
      return d2;
    };
    goog.array.toObject = function(a2, b, c2) {
      var d2 = {};
      goog.array.forEach(a2, function(e2, f) {
        d2[b.call(c2, e2, f, a2)] = e2;
      });
      return d2;
    };
    goog.array.range = function(a2, b, c2) {
      var d2 = [], e2 = 0, f = a2;
      c2 = c2 || 1;
      b !== void 0 && (e2 = a2, f = b);
      if (0 > c2 * (f - e2))
        return [];
      if (0 < c2)
        for (a2 = e2; a2 < f; a2 += c2)
          d2.push(a2);
      else
        for (a2 = e2; a2 > f; a2 += c2)
          d2.push(a2);
      return d2;
    };
    goog.array.repeat = function(a2, b) {
      for (var c2 = [], d2 = 0; d2 < b; d2++)
        c2[d2] = a2;
      return c2;
    };
    goog.array.flatten = function(a2) {
      for (var b = [], c2 = 0; c2 < arguments.length; c2++) {
        var d2 = arguments[c2];
        if (goog.isArray(d2))
          for (var e2 = 0; e2 < d2.length; e2 += 8192) {
            var f = goog.array.slice(d2, e2, e2 + 8192);
            f = goog.array.flatten.apply(null, f);
            for (var g = 0; g < f.length; g++)
              b.push(f[g]);
          }
        else
          b.push(d2);
      }
      return b;
    };
    goog.array.rotate = function(a2, b) {
      goog.asserts.assert(a2.length != null);
      a2.length && (b %= a2.length, 0 < b ? Array.prototype.unshift.apply(a2, a2.splice(-b, b)) : 0 > b && Array.prototype.push.apply(a2, a2.splice(0, -b)));
      return a2;
    };
    goog.array.moveItem = function(a2, b, c2) {
      goog.asserts.assert(0 <= b && b < a2.length);
      goog.asserts.assert(0 <= c2 && c2 < a2.length);
      b = Array.prototype.splice.call(a2, b, 1);
      Array.prototype.splice.call(a2, c2, 0, b[0]);
    };
    goog.array.zip = function(a2) {
      if (!arguments.length)
        return [];
      for (var b = [], c2 = arguments[0].length, d2 = 1; d2 < arguments.length; d2++)
        arguments[d2].length < c2 && (c2 = arguments[d2].length);
      for (d2 = 0; d2 < c2; d2++) {
        for (var e2 = [], f = 0; f < arguments.length; f++)
          e2.push(arguments[f][d2]);
        b.push(e2);
      }
      return b;
    };
    goog.array.shuffle = function(a2, b) {
      b = b || Math.random;
      for (var c2 = a2.length - 1; 0 < c2; c2--) {
        var d2 = Math.floor(b() * (c2 + 1)), e2 = a2[c2];
        a2[c2] = a2[d2];
        a2[d2] = e2;
      }
    };
    goog.array.copyByIndex = function(a2, b) {
      var c2 = [];
      goog.array.forEach(b, function(b2) {
        c2.push(a2[b2]);
      });
      return c2;
    };
    goog.array.concatMap = function(a2, b, c2) {
      return goog.array.concat.apply([], goog.array.map(a2, b, c2));
    };
    goog.crypt = {};
    goog.crypt.stringToByteArray = function(a2) {
      for (var b = [], c2 = 0, d2 = 0; d2 < a2.length; d2++) {
        var e2 = a2.charCodeAt(d2);
        255 < e2 && (b[c2++] = e2 & 255, e2 >>= 8);
        b[c2++] = e2;
      }
      return b;
    };
    goog.crypt.byteArrayToString = function(a2) {
      if (8192 >= a2.length)
        return String.fromCharCode.apply(null, a2);
      for (var b = "", c2 = 0; c2 < a2.length; c2 += 8192) {
        var d2 = goog.array.slice(a2, c2, c2 + 8192);
        b += String.fromCharCode.apply(null, d2);
      }
      return b;
    };
    goog.crypt.byteArrayToHex = function(a2, b) {
      return goog.array.map(a2, function(a3) {
        a3 = a3.toString(16);
        return 1 < a3.length ? a3 : "0" + a3;
      }).join(b || "");
    };
    goog.crypt.hexToByteArray = function(a2) {
      goog.asserts.assert(a2.length % 2 == 0, "Key string length must be multiple of 2");
      for (var b = [], c2 = 0; c2 < a2.length; c2 += 2)
        b.push(parseInt(a2.substring(c2, c2 + 2), 16));
      return b;
    };
    goog.crypt.stringToUtf8ByteArray = function(a2) {
      for (var b = [], c2 = 0, d2 = 0; d2 < a2.length; d2++) {
        var e2 = a2.charCodeAt(d2);
        128 > e2 ? b[c2++] = e2 : (2048 > e2 ? b[c2++] = e2 >> 6 | 192 : ((e2 & 64512) == 55296 && d2 + 1 < a2.length && (a2.charCodeAt(d2 + 1) & 64512) == 56320 ? (e2 = 65536 + ((e2 & 1023) << 10) + (a2.charCodeAt(++d2) & 1023), b[c2++] = e2 >> 18 | 240, b[c2++] = e2 >> 12 & 63 | 128) : b[c2++] = e2 >> 12 | 224, b[c2++] = e2 >> 6 & 63 | 128), b[c2++] = e2 & 63 | 128);
      }
      return b;
    };
    goog.crypt.utf8ByteArrayToString = function(a2) {
      for (var b = [], c2 = 0, d2 = 0; c2 < a2.length; ) {
        var e2 = a2[c2++];
        if (128 > e2)
          b[d2++] = String.fromCharCode(e2);
        else if (191 < e2 && 224 > e2) {
          var f = a2[c2++];
          b[d2++] = String.fromCharCode((e2 & 31) << 6 | f & 63);
        } else if (239 < e2 && 365 > e2) {
          f = a2[c2++];
          var g = a2[c2++], h2 = a2[c2++];
          e2 = ((e2 & 7) << 18 | (f & 63) << 12 | (g & 63) << 6 | h2 & 63) - 65536;
          b[d2++] = String.fromCharCode(55296 + (e2 >> 10));
          b[d2++] = String.fromCharCode(56320 + (e2 & 1023));
        } else
          f = a2[c2++], g = a2[c2++], b[d2++] = String.fromCharCode((e2 & 15) << 12 | (f & 63) << 6 | g & 63);
      }
      return b.join("");
    };
    goog.crypt.xorByteArray = function(a2, b) {
      goog.asserts.assert(a2.length == b.length, "XOR array lengths must match");
      for (var c2 = [], d2 = 0; d2 < a2.length; d2++)
        c2.push(a2[d2] ^ b[d2]);
      return c2;
    };
    goog.dom.asserts = {};
    goog.dom.asserts.assertIsLocation = function(a2) {
      if (goog.asserts.ENABLE_ASSERTS) {
        var b = goog.dom.asserts.getWindow_(a2);
        b && (!a2 || !(a2 instanceof b.Location) && a2 instanceof b.Element) && goog.asserts.fail("Argument is not a Location (or a non-Element mock); got: %s", goog.dom.asserts.debugStringForType_(a2));
      }
      return a2;
    };
    goog.dom.asserts.assertIsElementType_ = function(a2, b) {
      if (goog.asserts.ENABLE_ASSERTS) {
        var c2 = goog.dom.asserts.getWindow_(a2);
        c2 && typeof c2[b] != "undefined" && (a2 && (a2 instanceof c2[b] || !(a2 instanceof c2.Location || a2 instanceof c2.Element)) || goog.asserts.fail("Argument is not a %s (or a non-Element, non-Location mock); got: %s", b, goog.dom.asserts.debugStringForType_(a2)));
      }
      return a2;
    };
    goog.dom.asserts.assertIsHTMLAnchorElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLAnchorElement");
    };
    goog.dom.asserts.assertIsHTMLButtonElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLButtonElement");
    };
    goog.dom.asserts.assertIsHTMLLinkElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLLinkElement");
    };
    goog.dom.asserts.assertIsHTMLImageElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLImageElement");
    };
    goog.dom.asserts.assertIsHTMLAudioElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLAudioElement");
    };
    goog.dom.asserts.assertIsHTMLVideoElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLVideoElement");
    };
    goog.dom.asserts.assertIsHTMLInputElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLInputElement");
    };
    goog.dom.asserts.assertIsHTMLTextAreaElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLTextAreaElement");
    };
    goog.dom.asserts.assertIsHTMLCanvasElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLCanvasElement");
    };
    goog.dom.asserts.assertIsHTMLEmbedElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLEmbedElement");
    };
    goog.dom.asserts.assertIsHTMLFormElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLFormElement");
    };
    goog.dom.asserts.assertIsHTMLFrameElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLFrameElement");
    };
    goog.dom.asserts.assertIsHTMLIFrameElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLIFrameElement");
    };
    goog.dom.asserts.assertIsHTMLObjectElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLObjectElement");
    };
    goog.dom.asserts.assertIsHTMLScriptElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLScriptElement");
    };
    goog.dom.asserts.debugStringForType_ = function(a2) {
      if (goog.isObject(a2))
        try {
          return a2.constructor.displayName || a2.constructor.name || Object.prototype.toString.call(a2);
        } catch (b) {
          return "<object could not be stringified>";
        }
      else
        return a2 === void 0 ? "undefined" : a2 === null ? "null" : typeof a2;
    };
    goog.dom.asserts.getWindow_ = function(a2) {
      try {
        var b = a2 && a2.ownerDocument, c2 = b && (b.defaultView || b.parentWindow);
        c2 = c2 || goog.global;
        if (c2.Element && c2.Location)
          return c2;
      } catch (d2) {
      }
      return null;
    };
    goog.functions = {};
    goog.functions.constant = function(a2) {
      return function() {
        return a2;
      };
    };
    goog.functions.FALSE = function() {
      return false;
    };
    goog.functions.TRUE = function() {
      return true;
    };
    goog.functions.NULL = function() {
      return null;
    };
    goog.functions.identity = function(a2, b) {
      return a2;
    };
    goog.functions.error = function(a2) {
      return function() {
        throw Error(a2);
      };
    };
    goog.functions.fail = function(a2) {
      return function() {
        throw a2;
      };
    };
    goog.functions.lock = function(a2, b) {
      b = b || 0;
      return function() {
        return a2.apply(this, Array.prototype.slice.call(arguments, 0, b));
      };
    };
    goog.functions.nth = function(a2) {
      return function() {
        return arguments[a2];
      };
    };
    goog.functions.partialRight = function(a2, b) {
      var c2 = Array.prototype.slice.call(arguments, 1);
      return function() {
        var b2 = Array.prototype.slice.call(arguments);
        b2.push.apply(b2, c2);
        return a2.apply(this, b2);
      };
    };
    goog.functions.withReturnValue = function(a2, b) {
      return goog.functions.sequence(a2, goog.functions.constant(b));
    };
    goog.functions.equalTo = function(a2, b) {
      return function(c2) {
        return b ? a2 == c2 : a2 === c2;
      };
    };
    goog.functions.compose = function(a2, b) {
      var c2 = arguments, d2 = c2.length;
      return function() {
        var a3;
        d2 && (a3 = c2[d2 - 1].apply(this, arguments));
        for (var b2 = d2 - 2; 0 <= b2; b2--)
          a3 = c2[b2].call(this, a3);
        return a3;
      };
    };
    goog.functions.sequence = function(a2) {
      var b = arguments, c2 = b.length;
      return function() {
        for (var a3, e2 = 0; e2 < c2; e2++)
          a3 = b[e2].apply(this, arguments);
        return a3;
      };
    };
    goog.functions.and = function(a2) {
      var b = arguments, c2 = b.length;
      return function() {
        for (var a3 = 0; a3 < c2; a3++)
          if (!b[a3].apply(this, arguments))
            return false;
        return true;
      };
    };
    goog.functions.or = function(a2) {
      var b = arguments, c2 = b.length;
      return function() {
        for (var a3 = 0; a3 < c2; a3++)
          if (b[a3].apply(this, arguments))
            return true;
        return false;
      };
    };
    goog.functions.not = function(a2) {
      return function() {
        return !a2.apply(this, arguments);
      };
    };
    goog.functions.create = function(a2, b) {
      var c2 = function() {
      };
      c2.prototype = a2.prototype;
      c2 = new c2();
      a2.apply(c2, Array.prototype.slice.call(arguments, 1));
      return c2;
    };
    goog.functions.CACHE_RETURN_VALUE = true;
    goog.functions.cacheReturnValue = function(a2) {
      var b = false, c2;
      return function() {
        if (!goog.functions.CACHE_RETURN_VALUE)
          return a2();
        b || (c2 = a2(), b = true);
        return c2;
      };
    };
    goog.functions.once = function(a2) {
      var b = a2;
      return function() {
        if (b) {
          var a3 = b;
          b = null;
          a3();
        }
      };
    };
    goog.functions.debounce = function(a2, b, c2) {
      var d2 = 0;
      return function(e2) {
        goog.global.clearTimeout(d2);
        var f = arguments;
        d2 = goog.global.setTimeout(function() {
          a2.apply(c2, f);
        }, b);
      };
    };
    goog.functions.throttle = function(a2, b, c2) {
      var d2 = 0, e2 = false, f = [], g = function() {
        d2 = 0;
        e2 && (e2 = false, h2());
      }, h2 = function() {
        d2 = goog.global.setTimeout(g, b);
        a2.apply(c2, f);
      };
      return function(a3) {
        f = arguments;
        d2 ? e2 = true : h2();
      };
    };
    goog.functions.rateLimit = function(a2, b, c2) {
      var d2 = 0, e2 = function() {
        d2 = 0;
      };
      return function(f) {
        d2 || (d2 = goog.global.setTimeout(e2, b), a2.apply(c2, arguments));
      };
    };
    goog.dom.HtmlElement = function() {
    };
    goog.dom.TagName = function(a2) {
      this.tagName_ = a2;
    };
    goog.dom.TagName.prototype.toString = function() {
      return this.tagName_;
    };
    goog.dom.TagName.A = new goog.dom.TagName("A");
    goog.dom.TagName.ABBR = new goog.dom.TagName("ABBR");
    goog.dom.TagName.ACRONYM = new goog.dom.TagName("ACRONYM");
    goog.dom.TagName.ADDRESS = new goog.dom.TagName("ADDRESS");
    goog.dom.TagName.APPLET = new goog.dom.TagName("APPLET");
    goog.dom.TagName.AREA = new goog.dom.TagName("AREA");
    goog.dom.TagName.ARTICLE = new goog.dom.TagName("ARTICLE");
    goog.dom.TagName.ASIDE = new goog.dom.TagName("ASIDE");
    goog.dom.TagName.AUDIO = new goog.dom.TagName("AUDIO");
    goog.dom.TagName.B = new goog.dom.TagName("B");
    goog.dom.TagName.BASE = new goog.dom.TagName("BASE");
    goog.dom.TagName.BASEFONT = new goog.dom.TagName("BASEFONT");
    goog.dom.TagName.BDI = new goog.dom.TagName("BDI");
    goog.dom.TagName.BDO = new goog.dom.TagName("BDO");
    goog.dom.TagName.BIG = new goog.dom.TagName("BIG");
    goog.dom.TagName.BLOCKQUOTE = new goog.dom.TagName("BLOCKQUOTE");
    goog.dom.TagName.BODY = new goog.dom.TagName("BODY");
    goog.dom.TagName.BR = new goog.dom.TagName("BR");
    goog.dom.TagName.BUTTON = new goog.dom.TagName("BUTTON");
    goog.dom.TagName.CANVAS = new goog.dom.TagName("CANVAS");
    goog.dom.TagName.CAPTION = new goog.dom.TagName("CAPTION");
    goog.dom.TagName.CENTER = new goog.dom.TagName("CENTER");
    goog.dom.TagName.CITE = new goog.dom.TagName("CITE");
    goog.dom.TagName.CODE = new goog.dom.TagName("CODE");
    goog.dom.TagName.COL = new goog.dom.TagName("COL");
    goog.dom.TagName.COLGROUP = new goog.dom.TagName("COLGROUP");
    goog.dom.TagName.COMMAND = new goog.dom.TagName("COMMAND");
    goog.dom.TagName.DATA = new goog.dom.TagName("DATA");
    goog.dom.TagName.DATALIST = new goog.dom.TagName("DATALIST");
    goog.dom.TagName.DD = new goog.dom.TagName("DD");
    goog.dom.TagName.DEL = new goog.dom.TagName("DEL");
    goog.dom.TagName.DETAILS = new goog.dom.TagName("DETAILS");
    goog.dom.TagName.DFN = new goog.dom.TagName("DFN");
    goog.dom.TagName.DIALOG = new goog.dom.TagName("DIALOG");
    goog.dom.TagName.DIR = new goog.dom.TagName("DIR");
    goog.dom.TagName.DIV = new goog.dom.TagName("DIV");
    goog.dom.TagName.DL = new goog.dom.TagName("DL");
    goog.dom.TagName.DT = new goog.dom.TagName("DT");
    goog.dom.TagName.EM = new goog.dom.TagName("EM");
    goog.dom.TagName.EMBED = new goog.dom.TagName("EMBED");
    goog.dom.TagName.FIELDSET = new goog.dom.TagName("FIELDSET");
    goog.dom.TagName.FIGCAPTION = new goog.dom.TagName("FIGCAPTION");
    goog.dom.TagName.FIGURE = new goog.dom.TagName("FIGURE");
    goog.dom.TagName.FONT = new goog.dom.TagName("FONT");
    goog.dom.TagName.FOOTER = new goog.dom.TagName("FOOTER");
    goog.dom.TagName.FORM = new goog.dom.TagName("FORM");
    goog.dom.TagName.FRAME = new goog.dom.TagName("FRAME");
    goog.dom.TagName.FRAMESET = new goog.dom.TagName("FRAMESET");
    goog.dom.TagName.H1 = new goog.dom.TagName("H1");
    goog.dom.TagName.H2 = new goog.dom.TagName("H2");
    goog.dom.TagName.H3 = new goog.dom.TagName("H3");
    goog.dom.TagName.H4 = new goog.dom.TagName("H4");
    goog.dom.TagName.H5 = new goog.dom.TagName("H5");
    goog.dom.TagName.H6 = new goog.dom.TagName("H6");
    goog.dom.TagName.HEAD = new goog.dom.TagName("HEAD");
    goog.dom.TagName.HEADER = new goog.dom.TagName("HEADER");
    goog.dom.TagName.HGROUP = new goog.dom.TagName("HGROUP");
    goog.dom.TagName.HR = new goog.dom.TagName("HR");
    goog.dom.TagName.HTML = new goog.dom.TagName("HTML");
    goog.dom.TagName.I = new goog.dom.TagName("I");
    goog.dom.TagName.IFRAME = new goog.dom.TagName("IFRAME");
    goog.dom.TagName.IMG = new goog.dom.TagName("IMG");
    goog.dom.TagName.INPUT = new goog.dom.TagName("INPUT");
    goog.dom.TagName.INS = new goog.dom.TagName("INS");
    goog.dom.TagName.ISINDEX = new goog.dom.TagName("ISINDEX");
    goog.dom.TagName.KBD = new goog.dom.TagName("KBD");
    goog.dom.TagName.KEYGEN = new goog.dom.TagName("KEYGEN");
    goog.dom.TagName.LABEL = new goog.dom.TagName("LABEL");
    goog.dom.TagName.LEGEND = new goog.dom.TagName("LEGEND");
    goog.dom.TagName.LI = new goog.dom.TagName("LI");
    goog.dom.TagName.LINK = new goog.dom.TagName("LINK");
    goog.dom.TagName.MAIN = new goog.dom.TagName("MAIN");
    goog.dom.TagName.MAP = new goog.dom.TagName("MAP");
    goog.dom.TagName.MARK = new goog.dom.TagName("MARK");
    goog.dom.TagName.MATH = new goog.dom.TagName("MATH");
    goog.dom.TagName.MENU = new goog.dom.TagName("MENU");
    goog.dom.TagName.MENUITEM = new goog.dom.TagName("MENUITEM");
    goog.dom.TagName.META = new goog.dom.TagName("META");
    goog.dom.TagName.METER = new goog.dom.TagName("METER");
    goog.dom.TagName.NAV = new goog.dom.TagName("NAV");
    goog.dom.TagName.NOFRAMES = new goog.dom.TagName("NOFRAMES");
    goog.dom.TagName.NOSCRIPT = new goog.dom.TagName("NOSCRIPT");
    goog.dom.TagName.OBJECT = new goog.dom.TagName("OBJECT");
    goog.dom.TagName.OL = new goog.dom.TagName("OL");
    goog.dom.TagName.OPTGROUP = new goog.dom.TagName("OPTGROUP");
    goog.dom.TagName.OPTION = new goog.dom.TagName("OPTION");
    goog.dom.TagName.OUTPUT = new goog.dom.TagName("OUTPUT");
    goog.dom.TagName.P = new goog.dom.TagName("P");
    goog.dom.TagName.PARAM = new goog.dom.TagName("PARAM");
    goog.dom.TagName.PICTURE = new goog.dom.TagName("PICTURE");
    goog.dom.TagName.PRE = new goog.dom.TagName("PRE");
    goog.dom.TagName.PROGRESS = new goog.dom.TagName("PROGRESS");
    goog.dom.TagName.Q = new goog.dom.TagName("Q");
    goog.dom.TagName.RP = new goog.dom.TagName("RP");
    goog.dom.TagName.RT = new goog.dom.TagName("RT");
    goog.dom.TagName.RTC = new goog.dom.TagName("RTC");
    goog.dom.TagName.RUBY = new goog.dom.TagName("RUBY");
    goog.dom.TagName.S = new goog.dom.TagName("S");
    goog.dom.TagName.SAMP = new goog.dom.TagName("SAMP");
    goog.dom.TagName.SCRIPT = new goog.dom.TagName("SCRIPT");
    goog.dom.TagName.SECTION = new goog.dom.TagName("SECTION");
    goog.dom.TagName.SELECT = new goog.dom.TagName("SELECT");
    goog.dom.TagName.SMALL = new goog.dom.TagName("SMALL");
    goog.dom.TagName.SOURCE = new goog.dom.TagName("SOURCE");
    goog.dom.TagName.SPAN = new goog.dom.TagName("SPAN");
    goog.dom.TagName.STRIKE = new goog.dom.TagName("STRIKE");
    goog.dom.TagName.STRONG = new goog.dom.TagName("STRONG");
    goog.dom.TagName.STYLE = new goog.dom.TagName("STYLE");
    goog.dom.TagName.SUB = new goog.dom.TagName("SUB");
    goog.dom.TagName.SUMMARY = new goog.dom.TagName("SUMMARY");
    goog.dom.TagName.SUP = new goog.dom.TagName("SUP");
    goog.dom.TagName.SVG = new goog.dom.TagName("SVG");
    goog.dom.TagName.TABLE = new goog.dom.TagName("TABLE");
    goog.dom.TagName.TBODY = new goog.dom.TagName("TBODY");
    goog.dom.TagName.TD = new goog.dom.TagName("TD");
    goog.dom.TagName.TEMPLATE = new goog.dom.TagName("TEMPLATE");
    goog.dom.TagName.TEXTAREA = new goog.dom.TagName("TEXTAREA");
    goog.dom.TagName.TFOOT = new goog.dom.TagName("TFOOT");
    goog.dom.TagName.TH = new goog.dom.TagName("TH");
    goog.dom.TagName.THEAD = new goog.dom.TagName("THEAD");
    goog.dom.TagName.TIME = new goog.dom.TagName("TIME");
    goog.dom.TagName.TITLE = new goog.dom.TagName("TITLE");
    goog.dom.TagName.TR = new goog.dom.TagName("TR");
    goog.dom.TagName.TRACK = new goog.dom.TagName("TRACK");
    goog.dom.TagName.TT = new goog.dom.TagName("TT");
    goog.dom.TagName.U = new goog.dom.TagName("U");
    goog.dom.TagName.UL = new goog.dom.TagName("UL");
    goog.dom.TagName.VAR = new goog.dom.TagName("VAR");
    goog.dom.TagName.VIDEO = new goog.dom.TagName("VIDEO");
    goog.dom.TagName.WBR = new goog.dom.TagName("WBR");
    goog.dom.tags = {};
    goog.dom.tags.VOID_TAGS_ = { area: true, base: true, br: true, col: true, command: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true };
    goog.dom.tags.isVoidTag = function(a2) {
      return goog.dom.tags.VOID_TAGS_[a2] === true;
    };
    goog.html = {};
    goog.html.trustedtypes = {};
    goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY = goog.TRUSTED_TYPES_POLICY_NAME ? goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME + "#html") : null;
    goog.string = {};
    goog.string.TypedString = function() {
    };
    goog.string.Const = function(a2, b) {
      this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = a2 === goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_ && b || "";
      this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ = goog.string.Const.TYPE_MARKER_;
    };
    goog.string.Const.prototype.implementsGoogStringTypedString = true;
    goog.string.Const.prototype.getTypedStringValue = function() {
      return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
    };
    goog.string.Const.prototype.toString = function() {
      return "Const{" + this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ + "}";
    };
    goog.string.Const.unwrap = function(a2) {
      if (a2 instanceof goog.string.Const && a2.constructor === goog.string.Const && a2.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ === goog.string.Const.TYPE_MARKER_)
        return a2.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
      goog.asserts.fail("expected object of type Const, got '" + a2 + "'");
      return "type_error:Const";
    };
    goog.string.Const.from = function(a2) {
      return new goog.string.Const(goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_, a2);
    };
    goog.string.Const.TYPE_MARKER_ = {};
    goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_ = {};
    goog.string.Const.EMPTY = goog.string.Const.from("");
    goog.html.SafeScript = function() {
      this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = "";
      this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
    };
    goog.html.SafeScript.prototype.implementsGoogStringTypedString = true;
    goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
    goog.html.SafeScript.fromConstant = function(a2) {
      a2 = goog.string.Const.unwrap(a2);
      return a2.length === 0 ? goog.html.SafeScript.EMPTY : goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.SafeScript.fromConstantAndArgs = function(a2, b) {
      for (var c2 = [], d2 = 1; d2 < arguments.length; d2++)
        c2.push(goog.html.SafeScript.stringify_(arguments[d2]));
      return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("(" + goog.string.Const.unwrap(a2) + ")(" + c2.join(", ") + ");");
    };
    goog.html.SafeScript.fromJson = function(a2) {
      return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(goog.html.SafeScript.stringify_(a2));
    };
    goog.html.SafeScript.prototype.getTypedStringValue = function() {
      return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString();
    };
    goog.DEBUG && (goog.html.SafeScript.prototype.toString = function() {
      return "SafeScript{" + this.privateDoNotAccessOrElseSafeScriptWrappedValue_ + "}";
    });
    goog.html.SafeScript.unwrap = function(a2) {
      return goog.html.SafeScript.unwrapTrustedScript(a2).toString();
    };
    goog.html.SafeScript.unwrapTrustedScript = function(a2) {
      if (a2 instanceof goog.html.SafeScript && a2.constructor === goog.html.SafeScript && a2.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)
        return a2.privateDoNotAccessOrElseSafeScriptWrappedValue_;
      goog.asserts.fail("expected object of type SafeScript, got '" + a2 + "' of type " + goog.typeOf(a2));
      return "type_error:SafeScript";
    };
    goog.html.SafeScript.stringify_ = function(a2) {
      return JSON.stringify(a2).replace(/</g, "\\x3c");
    };
    goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse = function(a2) {
      return new goog.html.SafeScript().initSecurityPrivateDoNotAccessOrElse_(a2);
    };
    goog.html.SafeScript.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(a2) {
      this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY ? goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createScript(a2) : a2;
      return this;
    };
    goog.html.SafeScript.EMPTY = goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("");
    goog.fs = {};
    goog.fs.url = {};
    goog.fs.url.createObjectUrl = function(a2) {
      return goog.fs.url.getUrlObject_().createObjectURL(a2);
    };
    goog.fs.url.revokeObjectUrl = function(a2) {
      goog.fs.url.getUrlObject_().revokeObjectURL(a2);
    };
    goog.fs.url.getUrlObject_ = function() {
      var a2 = goog.fs.url.findUrlObject_();
      if (a2 != null)
        return a2;
      throw Error("This browser doesn't seem to support blob URLs");
    };
    goog.fs.url.findUrlObject_ = function() {
      return goog.isDef(goog.global.URL) && goog.isDef(goog.global.URL.createObjectURL) ? goog.global.URL : goog.isDef(goog.global.webkitURL) && goog.isDef(goog.global.webkitURL.createObjectURL) ? goog.global.webkitURL : goog.isDef(goog.global.createObjectURL) ? goog.global : null;
    };
    goog.fs.url.browserSupportsObjectUrls = function() {
      return goog.fs.url.findUrlObject_() != null;
    };
    goog.i18n = {};
    goog.i18n.bidi = {};
    goog.i18n.bidi.FORCE_RTL = false;
    goog.i18n.bidi.IS_RTL = goog.i18n.bidi.FORCE_RTL || (goog.LOCALE.substring(0, 2).toLowerCase() == "ar" || goog.LOCALE.substring(0, 2).toLowerCase() == "fa" || goog.LOCALE.substring(0, 2).toLowerCase() == "he" || goog.LOCALE.substring(0, 2).toLowerCase() == "iw" || goog.LOCALE.substring(0, 2).toLowerCase() == "ps" || goog.LOCALE.substring(0, 2).toLowerCase() == "sd" || goog.LOCALE.substring(0, 2).toLowerCase() == "ug" || goog.LOCALE.substring(0, 2).toLowerCase() == "ur" || goog.LOCALE.substring(0, 2).toLowerCase() == "yi") && (goog.LOCALE.length == 2 || goog.LOCALE.substring(2, 3) == "-" || goog.LOCALE.substring(2, 3) == "_") || 3 <= goog.LOCALE.length && goog.LOCALE.substring(0, 3).toLowerCase() == "ckb" && (goog.LOCALE.length == 3 || goog.LOCALE.substring(3, 4) == "-" || goog.LOCALE.substring(3, 4) == "_") || 7 <= goog.LOCALE.length && (goog.LOCALE.substring(2, 3) == "-" || goog.LOCALE.substring(2, 3) == "_") && (goog.LOCALE.substring(3, 7).toLowerCase() == "adlm" || goog.LOCALE.substring(3, 7).toLowerCase() == "arab" || goog.LOCALE.substring(3, 7).toLowerCase() == "hebr" || goog.LOCALE.substring(3, 7).toLowerCase() == "nkoo" || goog.LOCALE.substring(3, 7).toLowerCase() == "rohg" || goog.LOCALE.substring(3, 7).toLowerCase() == "thaa") || 8 <= goog.LOCALE.length && (goog.LOCALE.substring(3, 4) == "-" || goog.LOCALE.substring(3, 4) == "_") && (goog.LOCALE.substring(4, 8).toLowerCase() == "adlm" || goog.LOCALE.substring(4, 8).toLowerCase() == "arab" || goog.LOCALE.substring(4, 8).toLowerCase() == "hebr" || goog.LOCALE.substring(4, 8).toLowerCase() == "nkoo" || goog.LOCALE.substring(4, 8).toLowerCase() == "rohg" || goog.LOCALE.substring(4, 8).toLowerCase() == "thaa");
    goog.i18n.bidi.Format = { LRE: "\u202A", RLE: "\u202B", PDF: "\u202C", LRM: "\u200E", RLM: "\u200F" };
    goog.i18n.bidi.Dir = { LTR: 1, RTL: -1, NEUTRAL: 0 };
    goog.i18n.bidi.RIGHT = "right";
    goog.i18n.bidi.LEFT = "left";
    goog.i18n.bidi.I18N_RIGHT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.LEFT : goog.i18n.bidi.RIGHT;
    goog.i18n.bidi.I18N_LEFT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
    goog.i18n.bidi.toDir = function(a2, b) {
      return typeof a2 == "number" ? 0 < a2 ? goog.i18n.bidi.Dir.LTR : 0 > a2 ? goog.i18n.bidi.Dir.RTL : b ? null : goog.i18n.bidi.Dir.NEUTRAL : a2 == null ? null : a2 ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
    };
    goog.i18n.bidi.ltrChars_ = "A-Za-z\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u0300-\u0590\u0900-\u1FFF\u200E\u2C00-\uD801\uD804-\uD839\uD83C-\uDBFF\uF900-\uFB1C\uFE00-\uFE6F\uFEFD-\uFFFF";
    goog.i18n.bidi.rtlChars_ = "\u0591-\u06EF\u06FA-\u08FF\u200F\uD802-\uD803\uD83A-\uD83B\uFB1D-\uFDFF\uFE70-\uFEFC";
    goog.i18n.bidi.htmlSkipReg_ = /<[^>]*>|&[^;]+;/g;
    goog.i18n.bidi.stripHtmlIfNeeded_ = function(a2, b) {
      return b ? a2.replace(goog.i18n.bidi.htmlSkipReg_, "") : a2;
    };
    goog.i18n.bidi.rtlCharReg_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "]");
    goog.i18n.bidi.ltrCharReg_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "]");
    goog.i18n.bidi.hasAnyRtl = function(a2, b) {
      return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a2, b));
    };
    goog.i18n.bidi.hasRtlChar = goog.i18n.bidi.hasAnyRtl;
    goog.i18n.bidi.hasAnyLtr = function(a2, b) {
      return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a2, b));
    };
    goog.i18n.bidi.ltrRe_ = new RegExp("^[" + goog.i18n.bidi.ltrChars_ + "]");
    goog.i18n.bidi.rtlRe_ = new RegExp("^[" + goog.i18n.bidi.rtlChars_ + "]");
    goog.i18n.bidi.isRtlChar = function(a2) {
      return goog.i18n.bidi.rtlRe_.test(a2);
    };
    goog.i18n.bidi.isLtrChar = function(a2) {
      return goog.i18n.bidi.ltrRe_.test(a2);
    };
    goog.i18n.bidi.isNeutralChar = function(a2) {
      return !goog.i18n.bidi.isLtrChar(a2) && !goog.i18n.bidi.isRtlChar(a2);
    };
    goog.i18n.bidi.ltrDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.rtlChars_ + "]*[" + goog.i18n.bidi.ltrChars_ + "]");
    goog.i18n.bidi.rtlDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.ltrChars_ + "]*[" + goog.i18n.bidi.rtlChars_ + "]");
    goog.i18n.bidi.startsWithRtl = function(a2, b) {
      return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a2, b));
    };
    goog.i18n.bidi.isRtlText = goog.i18n.bidi.startsWithRtl;
    goog.i18n.bidi.startsWithLtr = function(a2, b) {
      return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a2, b));
    };
    goog.i18n.bidi.isLtrText = goog.i18n.bidi.startsWithLtr;
    goog.i18n.bidi.isRequiredLtrRe_ = /^http:\/\/.*/;
    goog.i18n.bidi.isNeutralText = function(a2, b) {
      a2 = goog.i18n.bidi.stripHtmlIfNeeded_(a2, b);
      return goog.i18n.bidi.isRequiredLtrRe_.test(a2) || !goog.i18n.bidi.hasAnyLtr(a2) && !goog.i18n.bidi.hasAnyRtl(a2);
    };
    goog.i18n.bidi.ltrExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "][^" + goog.i18n.bidi.rtlChars_ + "]*$");
    goog.i18n.bidi.rtlExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "][^" + goog.i18n.bidi.ltrChars_ + "]*$");
    goog.i18n.bidi.endsWithLtr = function(a2, b) {
      return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a2, b));
    };
    goog.i18n.bidi.isLtrExitText = goog.i18n.bidi.endsWithLtr;
    goog.i18n.bidi.endsWithRtl = function(a2, b) {
      return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a2, b));
    };
    goog.i18n.bidi.isRtlExitText = goog.i18n.bidi.endsWithRtl;
    goog.i18n.bidi.rtlLocalesRe_ = /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;
    goog.i18n.bidi.isRtlLanguage = function(a2) {
      return goog.i18n.bidi.rtlLocalesRe_.test(a2);
    };
    goog.i18n.bidi.bracketGuardTextRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g;
    goog.i18n.bidi.guardBracketInText = function(a2, b) {
      b = (b === void 0 ? goog.i18n.bidi.hasAnyRtl(a2) : b) ? goog.i18n.bidi.Format.RLM : goog.i18n.bidi.Format.LRM;
      return a2.replace(goog.i18n.bidi.bracketGuardTextRe_, b + "$&" + b);
    };
    goog.i18n.bidi.enforceRtlInHtml = function(a2) {
      return a2.charAt(0) == "<" ? a2.replace(/<\w+/, "$& dir=rtl") : "\n<span dir=rtl>" + a2 + "</span>";
    };
    goog.i18n.bidi.enforceRtlInText = function(a2) {
      return goog.i18n.bidi.Format.RLE + a2 + goog.i18n.bidi.Format.PDF;
    };
    goog.i18n.bidi.enforceLtrInHtml = function(a2) {
      return a2.charAt(0) == "<" ? a2.replace(/<\w+/, "$& dir=ltr") : "\n<span dir=ltr>" + a2 + "</span>";
    };
    goog.i18n.bidi.enforceLtrInText = function(a2) {
      return goog.i18n.bidi.Format.LRE + a2 + goog.i18n.bidi.Format.PDF;
    };
    goog.i18n.bidi.dimensionsRe_ = /:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g;
    goog.i18n.bidi.leftRe_ = /left/gi;
    goog.i18n.bidi.rightRe_ = /right/gi;
    goog.i18n.bidi.tempRe_ = /%%%%/g;
    goog.i18n.bidi.mirrorCSS = function(a2) {
      return a2.replace(goog.i18n.bidi.dimensionsRe_, ":$1 $4 $3 $2").replace(goog.i18n.bidi.leftRe_, "%%%%").replace(goog.i18n.bidi.rightRe_, goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_, goog.i18n.bidi.RIGHT);
    };
    goog.i18n.bidi.doubleQuoteSubstituteRe_ = /([\u0591-\u05f2])"/g;
    goog.i18n.bidi.singleQuoteSubstituteRe_ = /([\u0591-\u05f2])'/g;
    goog.i18n.bidi.normalizeHebrewQuote = function(a2) {
      return a2.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_, "$1\u05F4").replace(goog.i18n.bidi.singleQuoteSubstituteRe_, "$1\u05F3");
    };
    goog.i18n.bidi.wordSeparatorRe_ = /\s+/;
    goog.i18n.bidi.hasNumeralsRe_ = /[\d\u06f0-\u06f9]/;
    goog.i18n.bidi.rtlDetectionThreshold_ = 0.4;
    goog.i18n.bidi.estimateDirection = function(a2, b) {
      var c2 = 0, d2 = 0, e2 = false;
      a2 = goog.i18n.bidi.stripHtmlIfNeeded_(a2, b).split(goog.i18n.bidi.wordSeparatorRe_);
      for (b = 0; b < a2.length; b++) {
        var f = a2[b];
        goog.i18n.bidi.startsWithRtl(f) ? (c2++, d2++) : goog.i18n.bidi.isRequiredLtrRe_.test(f) ? e2 = true : goog.i18n.bidi.hasAnyLtr(f) ? d2++ : goog.i18n.bidi.hasNumeralsRe_.test(f) && (e2 = true);
      }
      return d2 == 0 ? e2 ? goog.i18n.bidi.Dir.LTR : goog.i18n.bidi.Dir.NEUTRAL : c2 / d2 > goog.i18n.bidi.rtlDetectionThreshold_ ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
    };
    goog.i18n.bidi.detectRtlDirectionality = function(a2, b) {
      return goog.i18n.bidi.estimateDirection(a2, b) == goog.i18n.bidi.Dir.RTL;
    };
    goog.i18n.bidi.setElementDirAndAlign = function(a2, b) {
      a2 && (b = goog.i18n.bidi.toDir(b)) && (a2.style.textAlign = b == goog.i18n.bidi.Dir.RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT, a2.dir = b == goog.i18n.bidi.Dir.RTL ? "rtl" : "ltr");
    };
    goog.i18n.bidi.setElementDirByTextDirectionality = function(a2, b) {
      switch (goog.i18n.bidi.estimateDirection(b)) {
        case goog.i18n.bidi.Dir.LTR:
          a2.dir = "ltr";
          break;
        case goog.i18n.bidi.Dir.RTL:
          a2.dir = "rtl";
          break;
        default:
          a2.removeAttribute("dir");
      }
    };
    goog.i18n.bidi.DirectionalString = function() {
    };
    goog.html.TrustedResourceUrl = function() {
      this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = "";
      this.trustedURL_ = null;
      this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
    };
    goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString = true;
    goog.html.TrustedResourceUrl.prototype.getTypedStringValue = function() {
      return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_.toString();
    };
    goog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
    goog.html.TrustedResourceUrl.prototype.getDirection = function() {
      return goog.i18n.bidi.Dir.LTR;
    };
    goog.html.TrustedResourceUrl.prototype.cloneWithParams = function(a2, b) {
      var c2 = goog.html.TrustedResourceUrl.unwrap(this);
      c2 = goog.html.TrustedResourceUrl.URL_PARAM_PARSER_.exec(c2);
      var d2 = c2[3] || "";
      return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(c2[1] + goog.html.TrustedResourceUrl.stringifyParams_("?", c2[2] || "", a2) + goog.html.TrustedResourceUrl.stringifyParams_("#", d2, b));
    };
    goog.DEBUG && (goog.html.TrustedResourceUrl.prototype.toString = function() {
      return "TrustedResourceUrl{" + this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ + "}";
    });
    goog.html.TrustedResourceUrl.unwrap = function(a2) {
      return goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(a2).toString();
    };
    goog.html.TrustedResourceUrl.unwrapTrustedScriptURL = function(a2) {
      if (a2 instanceof goog.html.TrustedResourceUrl && a2.constructor === goog.html.TrustedResourceUrl && a2.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)
        return a2.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
      goog.asserts.fail("expected object of type TrustedResourceUrl, got '" + a2 + "' of type " + goog.typeOf(a2));
      return "type_error:TrustedResourceUrl";
    };
    goog.html.TrustedResourceUrl.unwrapTrustedURL = function(a2) {
      return a2.trustedURL_ ? a2.trustedURL_ : goog.html.TrustedResourceUrl.unwrap(a2);
    };
    goog.html.TrustedResourceUrl.format = function(a2, b) {
      var c2 = goog.string.Const.unwrap(a2);
      if (!goog.html.TrustedResourceUrl.BASE_URL_.test(c2))
        throw Error("Invalid TrustedResourceUrl format: " + c2);
      a2 = c2.replace(goog.html.TrustedResourceUrl.FORMAT_MARKER_, function(a3, e2) {
        if (!Object.prototype.hasOwnProperty.call(b, e2))
          throw Error('Found marker, "' + e2 + '", in format string, "' + c2 + '", but no valid label mapping found in args: ' + JSON.stringify(b));
        a3 = b[e2];
        return a3 instanceof goog.string.Const ? goog.string.Const.unwrap(a3) : encodeURIComponent(String(a3));
      });
      return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.TrustedResourceUrl.FORMAT_MARKER_ = /%{(\w+)}/g;
    goog.html.TrustedResourceUrl.BASE_URL_ = /^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i;
    goog.html.TrustedResourceUrl.URL_PARAM_PARSER_ = /^([^?#]*)(\?[^#]*)?(#[\s\S]*)?/;
    goog.html.TrustedResourceUrl.formatWithParams = function(a2, b, c2, d2) {
      return goog.html.TrustedResourceUrl.format(a2, b).cloneWithParams(c2, d2);
    };
    goog.html.TrustedResourceUrl.fromConstant = function(a2) {
      return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a2));
    };
    goog.html.TrustedResourceUrl.fromConstants = function(a2) {
      for (var b = "", c2 = 0; c2 < a2.length; c2++)
        b += goog.string.Const.unwrap(a2[c2]);
      return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b);
    };
    goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
    goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse = function(a2) {
      var b = new goog.html.TrustedResourceUrl();
      b.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY ? goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createScriptURL(a2) : a2;
      goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY && (b.trustedURL_ = goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createURL(a2));
      return b;
    };
    goog.html.TrustedResourceUrl.stringifyParams_ = function(a2, b, c2) {
      if (c2 == null)
        return b;
      if (goog.isString(c2))
        return c2 ? a2 + encodeURIComponent(c2) : "";
      for (var d2 in c2) {
        var e2 = c2[d2];
        e2 = goog.isArray(e2) ? e2 : [e2];
        for (var f = 0; f < e2.length; f++) {
          var g = e2[f];
          g != null && (b || (b = a2), b += (b.length > a2.length ? "&" : "") + encodeURIComponent(d2) + "=" + encodeURIComponent(String(g)));
        }
      }
      return b;
    };
    goog.string.internal = {};
    goog.string.internal.startsWith = function(a2, b) {
      return a2.lastIndexOf(b, 0) == 0;
    };
    goog.string.internal.endsWith = function(a2, b) {
      var c2 = a2.length - b.length;
      return 0 <= c2 && a2.indexOf(b, c2) == c2;
    };
    goog.string.internal.caseInsensitiveStartsWith = function(a2, b) {
      return goog.string.internal.caseInsensitiveCompare(b, a2.substr(0, b.length)) == 0;
    };
    goog.string.internal.caseInsensitiveEndsWith = function(a2, b) {
      return goog.string.internal.caseInsensitiveCompare(b, a2.substr(a2.length - b.length, b.length)) == 0;
    };
    goog.string.internal.caseInsensitiveEquals = function(a2, b) {
      return a2.toLowerCase() == b.toLowerCase();
    };
    goog.string.internal.isEmptyOrWhitespace = function(a2) {
      return /^[\s\xa0]*$/.test(a2);
    };
    goog.string.internal.trim = goog.TRUSTED_SITE && String.prototype.trim ? function(a2) {
      return a2.trim();
    } : function(a2) {
      return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a2)[1];
    };
    goog.string.internal.caseInsensitiveCompare = function(a2, b) {
      a2 = String(a2).toLowerCase();
      b = String(b).toLowerCase();
      return a2 < b ? -1 : a2 == b ? 0 : 1;
    };
    goog.string.internal.newLineToBr = function(a2, b) {
      return a2.replace(/(\r\n|\r|\n)/g, b ? "<br />" : "<br>");
    };
    goog.string.internal.htmlEscape = function(a2, b) {
      if (b)
        a2 = a2.replace(goog.string.internal.AMP_RE_, "&amp;").replace(goog.string.internal.LT_RE_, "&lt;").replace(goog.string.internal.GT_RE_, "&gt;").replace(goog.string.internal.QUOT_RE_, "&quot;").replace(goog.string.internal.SINGLE_QUOTE_RE_, "&#39;").replace(goog.string.internal.NULL_RE_, "&#0;");
      else {
        if (!goog.string.internal.ALL_RE_.test(a2))
          return a2;
        a2.indexOf("&") != -1 && (a2 = a2.replace(goog.string.internal.AMP_RE_, "&amp;"));
        a2.indexOf("<") != -1 && (a2 = a2.replace(goog.string.internal.LT_RE_, "&lt;"));
        a2.indexOf(">") != -1 && (a2 = a2.replace(goog.string.internal.GT_RE_, "&gt;"));
        a2.indexOf('"') != -1 && (a2 = a2.replace(goog.string.internal.QUOT_RE_, "&quot;"));
        a2.indexOf("'") != -1 && (a2 = a2.replace(goog.string.internal.SINGLE_QUOTE_RE_, "&#39;"));
        a2.indexOf("\0") != -1 && (a2 = a2.replace(goog.string.internal.NULL_RE_, "&#0;"));
      }
      return a2;
    };
    goog.string.internal.AMP_RE_ = /&/g;
    goog.string.internal.LT_RE_ = /</g;
    goog.string.internal.GT_RE_ = />/g;
    goog.string.internal.QUOT_RE_ = /"/g;
    goog.string.internal.SINGLE_QUOTE_RE_ = /'/g;
    goog.string.internal.NULL_RE_ = /\x00/g;
    goog.string.internal.ALL_RE_ = /[\x00&<>"']/;
    goog.string.internal.whitespaceEscape = function(a2, b) {
      return goog.string.internal.newLineToBr(a2.replace(/  /g, " &#160;"), b);
    };
    goog.string.internal.contains = function(a2, b) {
      return a2.indexOf(b) != -1;
    };
    goog.string.internal.caseInsensitiveContains = function(a2, b) {
      return goog.string.internal.contains(a2.toLowerCase(), b.toLowerCase());
    };
    goog.string.internal.compareVersions = function(a2, b) {
      var c2 = 0;
      a2 = goog.string.internal.trim(String(a2)).split(".");
      b = goog.string.internal.trim(String(b)).split(".");
      for (var d2 = Math.max(a2.length, b.length), e2 = 0; c2 == 0 && e2 < d2; e2++) {
        var f = a2[e2] || "", g = b[e2] || "";
        do {
          f = /(\d*)(\D*)(.*)/.exec(f) || ["", "", "", ""];
          g = /(\d*)(\D*)(.*)/.exec(g) || ["", "", "", ""];
          if (f[0].length == 0 && g[0].length == 0)
            break;
          c2 = f[1].length == 0 ? 0 : parseInt(f[1], 10);
          var h2 = g[1].length == 0 ? 0 : parseInt(g[1], 10);
          c2 = goog.string.internal.compareElements_(c2, h2) || goog.string.internal.compareElements_(f[2].length == 0, g[2].length == 0) || goog.string.internal.compareElements_(f[2], g[2]);
          f = f[3];
          g = g[3];
        } while (c2 == 0);
      }
      return c2;
    };
    goog.string.internal.compareElements_ = function(a2, b) {
      return a2 < b ? -1 : a2 > b ? 1 : 0;
    };
    goog.html.SafeUrl = function() {
      this.privateDoNotAccessOrElseSafeUrlWrappedValue_ = "";
      this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
    };
    goog.html.SafeUrl.INNOCUOUS_STRING = "about:invalid#zClosurez";
    goog.html.SafeUrl.prototype.implementsGoogStringTypedString = true;
    goog.html.SafeUrl.prototype.getTypedStringValue = function() {
      return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString();
    };
    goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
    goog.html.SafeUrl.prototype.getDirection = function() {
      return goog.i18n.bidi.Dir.LTR;
    };
    goog.DEBUG && (goog.html.SafeUrl.prototype.toString = function() {
      return "SafeUrl{" + this.privateDoNotAccessOrElseSafeUrlWrappedValue_ + "}";
    });
    goog.html.SafeUrl.unwrap = function(a2) {
      return goog.html.SafeUrl.unwrapTrustedURL(a2).toString();
    };
    goog.html.SafeUrl.unwrapTrustedURL = function(a2) {
      if (a2 instanceof goog.html.SafeUrl && a2.constructor === goog.html.SafeUrl && a2.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)
        return a2.privateDoNotAccessOrElseSafeUrlWrappedValue_;
      goog.asserts.fail("expected object of type SafeUrl, got '" + a2 + "' of type " + goog.typeOf(a2));
      return "type_error:SafeUrl";
    };
    goog.html.SafeUrl.fromConstant = function(a2) {
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a2));
    };
    goog.html.SAFE_MIME_TYPE_PATTERN_ = /^(?:audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-wav|wav|webm)|image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\/csv|video\/(?:mpeg|mp4|ogg|webm|quicktime))(?:;\w+=(?:\w+|"[\w;=]+"))*$/i;
    goog.html.SafeUrl.isSafeMimeType = function(a2) {
      return goog.html.SAFE_MIME_TYPE_PATTERN_.test(a2);
    };
    goog.html.SafeUrl.fromBlob = function(a2) {
      a2 = goog.html.SAFE_MIME_TYPE_PATTERN_.test(a2.type) ? goog.fs.url.createObjectUrl(a2) : goog.html.SafeUrl.INNOCUOUS_STRING;
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.DATA_URL_PATTERN_ = /^data:([^,]*);base64,[a-z0-9+\/]+=*$/i;
    goog.html.SafeUrl.fromDataUrl = function(a2) {
      a2 = a2.replace(/(%0A|%0D)/g, "");
      var b = a2.match(goog.html.DATA_URL_PATTERN_);
      b = b && goog.html.SAFE_MIME_TYPE_PATTERN_.test(b[1]);
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b ? a2 : goog.html.SafeUrl.INNOCUOUS_STRING);
    };
    goog.html.SafeUrl.fromTelUrl = function(a2) {
      goog.string.internal.caseInsensitiveStartsWith(a2, "tel:") || (a2 = goog.html.SafeUrl.INNOCUOUS_STRING);
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.SIP_URL_PATTERN_ = /^sip[s]?:[+a-z0-9_.!$%&'*\/=^`{|}~-]+@([a-z0-9-]+\.)+[a-z0-9]{2,63}$/i;
    goog.html.SafeUrl.fromSipUrl = function(a2) {
      goog.html.SIP_URL_PATTERN_.test(decodeURIComponent(a2)) || (a2 = goog.html.SafeUrl.INNOCUOUS_STRING);
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.SafeUrl.fromFacebookMessengerUrl = function(a2) {
      goog.string.internal.caseInsensitiveStartsWith(a2, "fb-messenger://share") || (a2 = goog.html.SafeUrl.INNOCUOUS_STRING);
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.SafeUrl.fromWhatsAppUrl = function(a2) {
      goog.string.internal.caseInsensitiveStartsWith(a2, "whatsapp://send") || (a2 = goog.html.SafeUrl.INNOCUOUS_STRING);
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.SafeUrl.fromSmsUrl = function(a2) {
      goog.string.internal.caseInsensitiveStartsWith(a2, "sms:") && goog.html.SafeUrl.isSmsUrlBodyValid_(a2) || (a2 = goog.html.SafeUrl.INNOCUOUS_STRING);
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.SafeUrl.isSmsUrlBodyValid_ = function(a2) {
      var b = a2.indexOf("#");
      0 < b && (a2 = a2.substring(0, b));
      b = a2.match(/[?&]body=/gi);
      if (!b)
        return true;
      if (1 < b.length)
        return false;
      a2 = a2.match(/[?&]body=([^&]*)/)[1];
      if (!a2)
        return true;
      try {
        decodeURIComponent(a2);
      } catch (c2) {
        return false;
      }
      return /^(?:[a-z0-9\-_.~]|%[0-9a-f]{2})+$/i.test(a2);
    };
    goog.html.SafeUrl.fromSshUrl = function(a2) {
      goog.string.internal.caseInsensitiveStartsWith(a2, "ssh://") || (a2 = goog.html.SafeUrl.INNOCUOUS_STRING);
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.SafeUrl.sanitizeChromeExtensionUrl = function(a2, b) {
      return goog.html.SafeUrl.sanitizeExtensionUrl_(/^chrome-extension:\/\/([^\/]+)\//, a2, b);
    };
    goog.html.SafeUrl.sanitizeFirefoxExtensionUrl = function(a2, b) {
      return goog.html.SafeUrl.sanitizeExtensionUrl_(/^moz-extension:\/\/([^\/]+)\//, a2, b);
    };
    goog.html.SafeUrl.sanitizeEdgeExtensionUrl = function(a2, b) {
      return goog.html.SafeUrl.sanitizeExtensionUrl_(/^ms-browser-extension:\/\/([^\/]+)\//, a2, b);
    };
    goog.html.SafeUrl.sanitizeExtensionUrl_ = function(a2, b, c2) {
      (a2 = a2.exec(b)) ? (a2 = a2[1], (c2 instanceof goog.string.Const ? [goog.string.Const.unwrap(c2)] : c2.map(function(a3) {
        return goog.string.Const.unwrap(a3);
      })).indexOf(a2) == -1 && (b = goog.html.SafeUrl.INNOCUOUS_STRING)) : b = goog.html.SafeUrl.INNOCUOUS_STRING;
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b);
    };
    goog.html.SafeUrl.fromTrustedResourceUrl = function(a2) {
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.html.TrustedResourceUrl.unwrap(a2));
    };
    goog.html.SAFE_URL_PATTERN_ = /^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;
    goog.html.SafeUrl.SAFE_URL_PATTERN = goog.html.SAFE_URL_PATTERN_;
    goog.html.SafeUrl.sanitize = function(a2) {
      if (a2 instanceof goog.html.SafeUrl)
        return a2;
      a2 = typeof a2 == "object" && a2.implementsGoogStringTypedString ? a2.getTypedStringValue() : String(a2);
      goog.html.SAFE_URL_PATTERN_.test(a2) || (a2 = goog.html.SafeUrl.INNOCUOUS_STRING);
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.SafeUrl.sanitizeAssertUnchanged = function(a2, b) {
      if (a2 instanceof goog.html.SafeUrl)
        return a2;
      a2 = typeof a2 == "object" && a2.implementsGoogStringTypedString ? a2.getTypedStringValue() : String(a2);
      if (b && /^data:/i.test(a2) && (b = goog.html.SafeUrl.fromDataUrl(a2), b.getTypedStringValue() == a2))
        return b;
      goog.asserts.assert(goog.html.SAFE_URL_PATTERN_.test(a2), "%s does not match the safe URL pattern", a2) || (a2 = goog.html.SafeUrl.INNOCUOUS_STRING);
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
    goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse = function(a2) {
      var b = new goog.html.SafeUrl();
      b.privateDoNotAccessOrElseSafeUrlWrappedValue_ = goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY ? goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createURL(a2) : a2;
      return b;
    };
    goog.html.SafeUrl.ABOUT_BLANK = goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse("about:blank");
    goog.html.SafeStyle = function() {
      this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = "";
      this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
    };
    goog.html.SafeStyle.prototype.implementsGoogStringTypedString = true;
    goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
    goog.html.SafeStyle.fromConstant = function(a2) {
      a2 = goog.string.Const.unwrap(a2);
      if (a2.length === 0)
        return goog.html.SafeStyle.EMPTY;
      goog.asserts.assert(goog.string.internal.endsWith(a2, ";"), "Last character of style string is not ';': " + a2);
      goog.asserts.assert(goog.string.internal.contains(a2, ":"), `Style string must contain at least one ':', to specify a "name: value" pair: ` + a2);
      return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.SafeStyle.prototype.getTypedStringValue = function() {
      return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;
    };
    goog.DEBUG && (goog.html.SafeStyle.prototype.toString = function() {
      return "SafeStyle{" + this.privateDoNotAccessOrElseSafeStyleWrappedValue_ + "}";
    });
    goog.html.SafeStyle.unwrap = function(a2) {
      if (a2 instanceof goog.html.SafeStyle && a2.constructor === goog.html.SafeStyle && a2.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)
        return a2.privateDoNotAccessOrElseSafeStyleWrappedValue_;
      goog.asserts.fail("expected object of type SafeStyle, got '" + a2 + "' of type " + goog.typeOf(a2));
      return "type_error:SafeStyle";
    };
    goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse = function(a2) {
      return new goog.html.SafeStyle().initSecurityPrivateDoNotAccessOrElse_(a2);
    };
    goog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(a2) {
      this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = a2;
      return this;
    };
    goog.html.SafeStyle.EMPTY = goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse("");
    goog.html.SafeStyle.INNOCUOUS_STRING = "zClosurez";
    goog.html.SafeStyle.create = function(a2) {
      var b = "", c2;
      for (c2 in a2) {
        if (!/^[-_a-zA-Z0-9]+$/.test(c2))
          throw Error("Name allows only [-_a-zA-Z0-9], got: " + c2);
        var d2 = a2[c2];
        d2 != null && (d2 = goog.isArray(d2) ? goog.array.map(d2, goog.html.SafeStyle.sanitizePropertyValue_).join(" ") : goog.html.SafeStyle.sanitizePropertyValue_(d2), b += c2 + ":" + d2 + ";");
      }
      return b ? goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b) : goog.html.SafeStyle.EMPTY;
    };
    goog.html.SafeStyle.sanitizePropertyValue_ = function(a2) {
      if (a2 instanceof goog.html.SafeUrl)
        return 'url("' + goog.html.SafeUrl.unwrap(a2).replace(/</g, "%3c").replace(/[\\"]/g, "\\$&") + '")';
      a2 = a2 instanceof goog.string.Const ? goog.string.Const.unwrap(a2) : goog.html.SafeStyle.sanitizePropertyValueString_(String(a2));
      if (/[{;}]/.test(a2))
        throw new goog.asserts.AssertionError("Value does not allow [{;}], got: %s.", [a2]);
      return a2;
    };
    goog.html.SafeStyle.sanitizePropertyValueString_ = function(a2) {
      var b = a2.replace(goog.html.SafeStyle.FUNCTIONS_RE_, "$1").replace(goog.html.SafeStyle.FUNCTIONS_RE_, "$1").replace(goog.html.SafeStyle.URL_RE_, "url");
      if (goog.html.SafeStyle.VALUE_RE_.test(b)) {
        if (goog.html.SafeStyle.COMMENT_RE_.test(a2))
          return goog.asserts.fail("String value disallows comments, got: " + a2), goog.html.SafeStyle.INNOCUOUS_STRING;
        if (!goog.html.SafeStyle.hasBalancedQuotes_(a2))
          return goog.asserts.fail("String value requires balanced quotes, got: " + a2), goog.html.SafeStyle.INNOCUOUS_STRING;
        if (!goog.html.SafeStyle.hasBalancedSquareBrackets_(a2))
          return goog.asserts.fail("String value requires balanced square brackets and one identifier per pair of brackets, got: " + a2), goog.html.SafeStyle.INNOCUOUS_STRING;
      } else
        return goog.asserts.fail("String value allows only " + goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ + " and simple functions, got: " + a2), goog.html.SafeStyle.INNOCUOUS_STRING;
      return goog.html.SafeStyle.sanitizeUrl_(a2);
    };
    goog.html.SafeStyle.hasBalancedQuotes_ = function(a2) {
      for (var b = true, c2 = true, d2 = 0; d2 < a2.length; d2++) {
        var e2 = a2.charAt(d2);
        e2 == "'" && c2 ? b = !b : e2 == '"' && b && (c2 = !c2);
      }
      return b && c2;
    };
    goog.html.SafeStyle.hasBalancedSquareBrackets_ = function(a2) {
      for (var b = true, c2 = /^[-_a-zA-Z0-9]$/, d2 = 0; d2 < a2.length; d2++) {
        var e2 = a2.charAt(d2);
        if (e2 == "]") {
          if (b)
            return false;
          b = true;
        } else if (e2 == "[") {
          if (!b)
            return false;
          b = false;
        } else if (!b && !c2.test(e2))
          return false;
      }
      return b;
    };
    goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ = `[-,."'%_!# a-zA-Z0-9\\[\\]]`;
    goog.html.SafeStyle.VALUE_RE_ = new RegExp("^" + goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ + "+$");
    goog.html.SafeStyle.URL_RE_ = /\b(url\([ \t\n]*)('[ -&(-\[\]-~]*'|"[ !#-\[\]-~]*"|[!#-&*-\[\]-~]*)([ \t\n]*\))/g;
    goog.html.SafeStyle.FUNCTIONS_RE_ = /\b(hsl|hsla|rgb|rgba|matrix|calc|minmax|fit-content|repeat|(rotate|scale|translate)(X|Y|Z|3d)?)\([-+*/0-9a-z.%\[\], ]+\)/g;
    goog.html.SafeStyle.COMMENT_RE_ = /\/\*/;
    goog.html.SafeStyle.sanitizeUrl_ = function(a2) {
      return a2.replace(goog.html.SafeStyle.URL_RE_, function(a3, c2, d2, e2) {
        var b = "";
        d2 = d2.replace(/^(['"])(.*)\1$/, function(a4, c3, d3) {
          b = c3;
          return d3;
        });
        a3 = goog.html.SafeUrl.sanitize(d2).getTypedStringValue();
        return c2 + b + a3 + b + e2;
      });
    };
    goog.html.SafeStyle.concat = function(a2) {
      var b = "", c2 = function(a3) {
        goog.isArray(a3) ? goog.array.forEach(a3, c2) : b += goog.html.SafeStyle.unwrap(a3);
      };
      goog.array.forEach(arguments, c2);
      return b ? goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b) : goog.html.SafeStyle.EMPTY;
    };
    goog.html.SafeStyleSheet = function() {
      this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = "";
      this.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
    };
    goog.html.SafeStyleSheet.prototype.implementsGoogStringTypedString = true;
    goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
    goog.html.SafeStyleSheet.createRule = function(a2, b) {
      if (goog.string.internal.contains(a2, "<"))
        throw Error("Selector does not allow '<', got: " + a2);
      var c2 = a2.replace(/('|")((?!\1)[^\r\n\f\\]|\\[\s\S])*\1/g, "");
      if (!/^[-_a-zA-Z0-9#.:* ,>+~[\]()=^$|]+$/.test(c2))
        throw Error("Selector allows only [-_a-zA-Z0-9#.:* ,>+~[\\]()=^$|] and strings, got: " + a2);
      if (!goog.html.SafeStyleSheet.hasBalancedBrackets_(c2))
        throw Error("() and [] in selector must be balanced, got: " + a2);
      b instanceof goog.html.SafeStyle || (b = goog.html.SafeStyle.create(b));
      a2 = a2 + "{" + goog.html.SafeStyle.unwrap(b).replace(/</g, "\\3C ") + "}";
      return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.SafeStyleSheet.hasBalancedBrackets_ = function(a2) {
      for (var b = { "(": ")", "[": "]" }, c2 = [], d2 = 0; d2 < a2.length; d2++) {
        var e2 = a2[d2];
        if (b[e2])
          c2.push(b[e2]);
        else if (goog.object.contains(b, e2) && c2.pop() != e2)
          return false;
      }
      return c2.length == 0;
    };
    goog.html.SafeStyleSheet.concat = function(a2) {
      var b = "", c2 = function(a3) {
        goog.isArray(a3) ? goog.array.forEach(a3, c2) : b += goog.html.SafeStyleSheet.unwrap(a3);
      };
      goog.array.forEach(arguments, c2);
      return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b);
    };
    goog.html.SafeStyleSheet.fromConstant = function(a2) {
      a2 = goog.string.Const.unwrap(a2);
      if (a2.length === 0)
        return goog.html.SafeStyleSheet.EMPTY;
      goog.asserts.assert(!goog.string.internal.contains(a2, "<"), "Forbidden '<' character in style sheet string: " + a2);
      return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.SafeStyleSheet.prototype.getTypedStringValue = function() {
      return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
    };
    goog.DEBUG && (goog.html.SafeStyleSheet.prototype.toString = function() {
      return "SafeStyleSheet{" + this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ + "}";
    });
    goog.html.SafeStyleSheet.unwrap = function(a2) {
      if (a2 instanceof goog.html.SafeStyleSheet && a2.constructor === goog.html.SafeStyleSheet && a2.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)
        return a2.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
      goog.asserts.fail("expected object of type SafeStyleSheet, got '" + a2 + "' of type " + goog.typeOf(a2));
      return "type_error:SafeStyleSheet";
    };
    goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse = function(a2) {
      return new goog.html.SafeStyleSheet().initSecurityPrivateDoNotAccessOrElse_(a2);
    };
    goog.html.SafeStyleSheet.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(a2) {
      this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = a2;
      return this;
    };
    goog.html.SafeStyleSheet.EMPTY = goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse("");
    goog.labs = {};
    goog.labs.userAgent = {};
    goog.labs.userAgent.util = {};
    goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
      var a2 = goog.labs.userAgent.util.getNavigator_();
      return a2 && (a2 = a2.userAgent) ? a2 : "";
    };
    goog.labs.userAgent.util.getNavigator_ = function() {
      return goog.global.navigator;
    };
    goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
    goog.labs.userAgent.util.setUserAgent = function(a2) {
      goog.labs.userAgent.util.userAgent_ = a2 || goog.labs.userAgent.util.getNativeUserAgentString_();
    };
    goog.labs.userAgent.util.getUserAgent = function() {
      return goog.labs.userAgent.util.userAgent_;
    };
    goog.labs.userAgent.util.matchUserAgent = function(a2) {
      var b = goog.labs.userAgent.util.getUserAgent();
      return goog.string.internal.contains(b, a2);
    };
    goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(a2) {
      var b = goog.labs.userAgent.util.getUserAgent();
      return goog.string.internal.caseInsensitiveContains(b, a2);
    };
    goog.labs.userAgent.util.extractVersionTuples = function(a2) {
      for (var b = /(\w[\w ]+)\/([^\s]+)\s*(?:\((.*?)\))?/g, c2 = [], d2; d2 = b.exec(a2); )
        c2.push([d2[1], d2[2], d2[3] || void 0]);
      return c2;
    };
    goog.labs.userAgent.browser = {};
    goog.labs.userAgent.browser.matchOpera_ = function() {
      return goog.labs.userAgent.util.matchUserAgent("Opera");
    };
    goog.labs.userAgent.browser.matchIE_ = function() {
      return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
    };
    goog.labs.userAgent.browser.matchEdgeHtml_ = function() {
      return goog.labs.userAgent.util.matchUserAgent("Edge");
    };
    goog.labs.userAgent.browser.matchEdgeChromium_ = function() {
      return goog.labs.userAgent.util.matchUserAgent("Edg/");
    };
    goog.labs.userAgent.browser.matchOperaChromium_ = function() {
      return goog.labs.userAgent.util.matchUserAgent("OPR");
    };
    goog.labs.userAgent.browser.matchFirefox_ = function() {
      return goog.labs.userAgent.util.matchUserAgent("Firefox") || goog.labs.userAgent.util.matchUserAgent("FxiOS");
    };
    goog.labs.userAgent.browser.matchSafari_ = function() {
      return goog.labs.userAgent.util.matchUserAgent("Safari") && !(goog.labs.userAgent.browser.matchChrome_() || goog.labs.userAgent.browser.matchCoast_() || goog.labs.userAgent.browser.matchOpera_() || goog.labs.userAgent.browser.matchEdgeHtml_() || goog.labs.userAgent.browser.matchEdgeChromium_() || goog.labs.userAgent.browser.matchOperaChromium_() || goog.labs.userAgent.browser.matchFirefox_() || goog.labs.userAgent.browser.isSilk() || goog.labs.userAgent.util.matchUserAgent("Android"));
    };
    goog.labs.userAgent.browser.matchCoast_ = function() {
      return goog.labs.userAgent.util.matchUserAgent("Coast");
    };
    goog.labs.userAgent.browser.matchIosWebview_ = function() {
      return (goog.labs.userAgent.util.matchUserAgent("iPad") || goog.labs.userAgent.util.matchUserAgent("iPhone")) && !goog.labs.userAgent.browser.matchSafari_() && !goog.labs.userAgent.browser.matchChrome_() && !goog.labs.userAgent.browser.matchCoast_() && !goog.labs.userAgent.browser.matchFirefox_() && goog.labs.userAgent.util.matchUserAgent("AppleWebKit");
    };
    goog.labs.userAgent.browser.matchChrome_ = function() {
      return (goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS")) && !goog.labs.userAgent.browser.matchEdgeHtml_();
    };
    goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
      return goog.labs.userAgent.util.matchUserAgent("Android") && !(goog.labs.userAgent.browser.isChrome() || goog.labs.userAgent.browser.isFirefox() || goog.labs.userAgent.browser.isOpera() || goog.labs.userAgent.browser.isSilk());
    };
    goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
    goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
    goog.labs.userAgent.browser.isEdge = goog.labs.userAgent.browser.matchEdgeHtml_;
    goog.labs.userAgent.browser.isEdgeChromium = goog.labs.userAgent.browser.matchEdgeChromium_;
    goog.labs.userAgent.browser.isOperaChromium = goog.labs.userAgent.browser.matchOperaChromium_;
    goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
    goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
    goog.labs.userAgent.browser.isCoast = goog.labs.userAgent.browser.matchCoast_;
    goog.labs.userAgent.browser.isIosWebview = goog.labs.userAgent.browser.matchIosWebview_;
    goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
    goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
    goog.labs.userAgent.browser.isSilk = function() {
      return goog.labs.userAgent.util.matchUserAgent("Silk");
    };
    goog.labs.userAgent.browser.getVersion = function() {
      function a2(a3) {
        a3 = goog.array.find(a3, d2);
        return c2[a3] || "";
      }
      var b = goog.labs.userAgent.util.getUserAgent();
      if (goog.labs.userAgent.browser.isIE())
        return goog.labs.userAgent.browser.getIEVersion_(b);
      b = goog.labs.userAgent.util.extractVersionTuples(b);
      var c2 = {};
      goog.array.forEach(b, function(a3) {
        c2[a3[0]] = a3[1];
      });
      var d2 = goog.partial(goog.object.containsKey, c2);
      return goog.labs.userAgent.browser.isOpera() ? a2(["Version", "Opera"]) : goog.labs.userAgent.browser.isEdge() ? a2(["Edge"]) : goog.labs.userAgent.browser.isEdgeChromium() ? a2(["Edg"]) : goog.labs.userAgent.browser.isChrome() ? a2(["Chrome", "CriOS"]) : (b = b[2]) && b[1] || "";
    };
    goog.labs.userAgent.browser.isVersionOrHigher = function(a2) {
      return 0 <= goog.string.internal.compareVersions(goog.labs.userAgent.browser.getVersion(), a2);
    };
    goog.labs.userAgent.browser.getIEVersion_ = function(a2) {
      var b = /rv: *([\d\.]*)/.exec(a2);
      if (b && b[1])
        return b[1];
      b = "";
      var c2 = /MSIE +([\d\.]+)/.exec(a2);
      if (c2 && c2[1])
        if (a2 = /Trident\/(\d.\d)/.exec(a2), c2[1] == "7.0")
          if (a2 && a2[1])
            switch (a2[1]) {
              case "4.0":
                b = "8.0";
                break;
              case "5.0":
                b = "9.0";
                break;
              case "6.0":
                b = "10.0";
                break;
              case "7.0":
                b = "11.0";
            }
          else
            b = "7.0";
        else
          b = c2[1];
      return b;
    };
    goog.html.SafeHtml = function() {
      this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
      this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
      this.dir_ = null;
    };
    goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString = true;
    goog.html.SafeHtml.prototype.getDirection = function() {
      return this.dir_;
    };
    goog.html.SafeHtml.prototype.implementsGoogStringTypedString = true;
    goog.html.SafeHtml.prototype.getTypedStringValue = function() {
      return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString();
    };
    goog.DEBUG && (goog.html.SafeHtml.prototype.toString = function() {
      return "SafeHtml{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
    });
    goog.html.SafeHtml.unwrap = function(a2) {
      return goog.html.SafeHtml.unwrapTrustedHTML(a2).toString();
    };
    goog.html.SafeHtml.unwrapTrustedHTML = function(a2) {
      if (a2 instanceof goog.html.SafeHtml && a2.constructor === goog.html.SafeHtml && a2.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)
        return a2.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
      goog.asserts.fail("expected object of type SafeHtml, got '" + a2 + "' of type " + goog.typeOf(a2));
      return "type_error:SafeHtml";
    };
    goog.html.SafeHtml.htmlEscape = function(a2) {
      if (a2 instanceof goog.html.SafeHtml)
        return a2;
      var b = typeof a2 == "object", c2 = null;
      b && a2.implementsGoogI18nBidiDirectionalString && (c2 = a2.getDirection());
      a2 = b && a2.implementsGoogStringTypedString ? a2.getTypedStringValue() : String(a2);
      return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.htmlEscape(a2), c2);
    };
    goog.html.SafeHtml.htmlEscapePreservingNewlines = function(a2) {
      if (a2 instanceof goog.html.SafeHtml)
        return a2;
      a2 = goog.html.SafeHtml.htmlEscape(a2);
      return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.newLineToBr(goog.html.SafeHtml.unwrap(a2)), a2.getDirection());
    };
    goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces = function(a2) {
      if (a2 instanceof goog.html.SafeHtml)
        return a2;
      a2 = goog.html.SafeHtml.htmlEscape(a2);
      return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.whitespaceEscape(goog.html.SafeHtml.unwrap(a2)), a2.getDirection());
    };
    goog.html.SafeHtml.from = goog.html.SafeHtml.htmlEscape;
    goog.html.SafeHtml.VALID_NAMES_IN_TAG_ = /^[a-zA-Z0-9-]+$/;
    goog.html.SafeHtml.URL_ATTRIBUTES_ = { action: true, cite: true, data: true, formaction: true, href: true, manifest: true, poster: true, src: true };
    goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_ = { APPLET: true, BASE: true, EMBED: true, IFRAME: true, LINK: true, MATH: true, META: true, OBJECT: true, SCRIPT: true, STYLE: true, SVG: true, TEMPLATE: true };
    goog.html.SafeHtml.create = function(a2, b, c2) {
      goog.html.SafeHtml.verifyTagName(String(a2));
      return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(String(a2), b, c2);
    };
    goog.html.SafeHtml.verifyTagName = function(a2) {
      if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(a2))
        throw Error("Invalid tag name <" + a2 + ">.");
      if (a2.toUpperCase() in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_)
        throw Error("Tag name <" + a2 + "> is not allowed for SafeHtml.");
    };
    goog.html.SafeHtml.createIframe = function(a2, b, c2, d2) {
      a2 && goog.html.TrustedResourceUrl.unwrap(a2);
      var e2 = {};
      e2.src = a2 || null;
      e2.srcdoc = b && goog.html.SafeHtml.unwrap(b);
      a2 = goog.html.SafeHtml.combineAttributes(e2, { sandbox: "" }, c2);
      return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe", a2, d2);
    };
    goog.html.SafeHtml.createSandboxIframe = function(a2, b, c2, d2) {
      if (!goog.html.SafeHtml.canUseSandboxIframe())
        throw Error("The browser does not support sandboxed iframes.");
      var e2 = {};
      e2.src = a2 ? goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a2)) : null;
      e2.srcdoc = b || null;
      e2.sandbox = "";
      a2 = goog.html.SafeHtml.combineAttributes(e2, {}, c2);
      return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe", a2, d2);
    };
    goog.html.SafeHtml.canUseSandboxIframe = function() {
      return goog.global.HTMLIFrameElement && "sandbox" in goog.global.HTMLIFrameElement.prototype;
    };
    goog.html.SafeHtml.createScriptSrc = function(a2, b) {
      goog.html.TrustedResourceUrl.unwrap(a2);
      a2 = goog.html.SafeHtml.combineAttributes({ src: a2 }, {}, b);
      return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script", a2);
    };
    goog.html.SafeHtml.createScript = function(a2, b) {
      for (var c2 in b) {
        var d2 = c2.toLowerCase();
        if (d2 == "language" || d2 == "src" || d2 == "text" || d2 == "type")
          throw Error('Cannot set "' + d2 + '" attribute');
      }
      c2 = "";
      a2 = goog.array.concat(a2);
      for (d2 = 0; d2 < a2.length; d2++)
        c2 += goog.html.SafeScript.unwrap(a2[d2]);
      a2 = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c2, goog.i18n.bidi.Dir.NEUTRAL);
      return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script", b, a2);
    };
    goog.html.SafeHtml.createStyle = function(a2, b) {
      b = goog.html.SafeHtml.combineAttributes({ type: "text/css" }, {}, b);
      var c2 = "";
      a2 = goog.array.concat(a2);
      for (var d2 = 0; d2 < a2.length; d2++)
        c2 += goog.html.SafeStyleSheet.unwrap(a2[d2]);
      a2 = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c2, goog.i18n.bidi.Dir.NEUTRAL);
      return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("style", b, a2);
    };
    goog.html.SafeHtml.createMetaRefresh = function(a2, b) {
      a2 = goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a2));
      (goog.labs.userAgent.browser.isIE() || goog.labs.userAgent.browser.isEdge()) && goog.string.internal.contains(a2, ";") && (a2 = "'" + a2.replace(/'/g, "%27") + "'");
      return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("meta", { "http-equiv": "refresh", content: (b || 0) + "; url=" + a2 });
    };
    goog.html.SafeHtml.getAttrNameAndValue_ = function(a2, b, c2) {
      if (c2 instanceof goog.string.Const)
        c2 = goog.string.Const.unwrap(c2);
      else if (b.toLowerCase() == "style")
        c2 = goog.html.SafeHtml.getStyleValue_(c2);
      else {
        if (/^on/i.test(b))
          throw Error('Attribute "' + b + '" requires goog.string.Const value, "' + c2 + '" given.');
        if (b.toLowerCase() in goog.html.SafeHtml.URL_ATTRIBUTES_)
          if (c2 instanceof goog.html.TrustedResourceUrl)
            c2 = goog.html.TrustedResourceUrl.unwrap(c2);
          else if (c2 instanceof goog.html.SafeUrl)
            c2 = goog.html.SafeUrl.unwrap(c2);
          else if (goog.isString(c2))
            c2 = goog.html.SafeUrl.sanitize(c2).getTypedStringValue();
          else
            throw Error('Attribute "' + b + '" on tag "' + a2 + '" requires goog.html.SafeUrl, goog.string.Const, or string, value "' + c2 + '" given.');
      }
      c2.implementsGoogStringTypedString && (c2 = c2.getTypedStringValue());
      goog.asserts.assert(goog.isString(c2) || goog.isNumber(c2), "String or number value expected, got " + typeof c2 + " with value: " + c2);
      return b + '="' + goog.string.internal.htmlEscape(String(c2)) + '"';
    };
    goog.html.SafeHtml.getStyleValue_ = function(a2) {
      if (!goog.isObject(a2))
        throw Error('The "style" attribute requires goog.html.SafeStyle or map of style properties, ' + typeof a2 + " given: " + a2);
      a2 instanceof goog.html.SafeStyle || (a2 = goog.html.SafeStyle.create(a2));
      return goog.html.SafeStyle.unwrap(a2);
    };
    goog.html.SafeHtml.createWithDir = function(a2, b, c2, d2) {
      b = goog.html.SafeHtml.create(b, c2, d2);
      b.dir_ = a2;
      return b;
    };
    goog.html.SafeHtml.join = function(a2, b) {
      a2 = goog.html.SafeHtml.htmlEscape(a2);
      var c2 = a2.getDirection(), d2 = [], e2 = function(a3) {
        goog.isArray(a3) ? goog.array.forEach(a3, e2) : (a3 = goog.html.SafeHtml.htmlEscape(a3), d2.push(goog.html.SafeHtml.unwrap(a3)), a3 = a3.getDirection(), c2 == goog.i18n.bidi.Dir.NEUTRAL ? c2 = a3 : a3 != goog.i18n.bidi.Dir.NEUTRAL && c2 != a3 && (c2 = null));
      };
      goog.array.forEach(b, e2);
      return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(d2.join(goog.html.SafeHtml.unwrap(a2)), c2);
    };
    goog.html.SafeHtml.concat = function(a2) {
      return goog.html.SafeHtml.join(goog.html.SafeHtml.EMPTY, Array.prototype.slice.call(arguments));
    };
    goog.html.SafeHtml.concatWithDir = function(a2, b) {
      var c2 = goog.html.SafeHtml.concat(goog.array.slice(arguments, 1));
      c2.dir_ = a2;
      return c2;
    };
    goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
    goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse = function(a2, b) {
      return new goog.html.SafeHtml().initSecurityPrivateDoNotAccessOrElse_(a2, b);
    };
    goog.html.SafeHtml.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(a2, b) {
      this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY ? goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createHTML(a2) : a2;
      this.dir_ = b;
      return this;
    };
    goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse = function(a2, b, c2) {
      var d2 = null;
      var e2 = "<" + a2 + goog.html.SafeHtml.stringifyAttributes(a2, b);
      goog.isDefAndNotNull(c2) ? goog.isArray(c2) || (c2 = [c2]) : c2 = [];
      goog.dom.tags.isVoidTag(a2.toLowerCase()) ? (goog.asserts.assert(!c2.length, "Void tag <" + a2 + "> does not allow content."), e2 += ">") : (d2 = goog.html.SafeHtml.concat(c2), e2 += ">" + goog.html.SafeHtml.unwrap(d2) + "</" + a2 + ">", d2 = d2.getDirection());
      (a2 = b && b.dir) && (d2 = /^(ltr|rtl|auto)$/i.test(a2) ? goog.i18n.bidi.Dir.NEUTRAL : null);
      return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(e2, d2);
    };
    goog.html.SafeHtml.stringifyAttributes = function(a2, b) {
      var c2 = "";
      if (b)
        for (var d2 in b) {
          if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(d2))
            throw Error('Invalid attribute name "' + d2 + '".');
          var e2 = b[d2];
          goog.isDefAndNotNull(e2) && (c2 += " " + goog.html.SafeHtml.getAttrNameAndValue_(a2, d2, e2));
        }
      return c2;
    };
    goog.html.SafeHtml.combineAttributes = function(a2, b, c2) {
      var d2 = {}, e2;
      for (e2 in a2)
        goog.asserts.assert(e2.toLowerCase() == e2, "Must be lower case"), d2[e2] = a2[e2];
      for (e2 in b)
        goog.asserts.assert(e2.toLowerCase() == e2, "Must be lower case"), d2[e2] = b[e2];
      for (e2 in c2) {
        var f = e2.toLowerCase();
        if (f in a2)
          throw Error('Cannot override "' + f + '" attribute, got "' + e2 + '" with value "' + c2[e2] + '"');
        f in b && delete d2[f];
        d2[e2] = c2[e2];
      }
      return d2;
    };
    goog.html.SafeHtml.DOCTYPE_HTML = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<!DOCTYPE html>", goog.i18n.bidi.Dir.NEUTRAL);
    goog.html.SafeHtml.EMPTY = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("", goog.i18n.bidi.Dir.NEUTRAL);
    goog.html.SafeHtml.BR = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<br>", goog.i18n.bidi.Dir.NEUTRAL);
    goog.html.uncheckedconversions = {};
    goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract = function(a2, b, c2) {
      goog.asserts.assertString(goog.string.Const.unwrap(a2), "must provide justification");
      goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a2)), "must provide non-empty justification");
      return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(b, c2 || null);
    };
    goog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract = function(a2, b) {
      goog.asserts.assertString(goog.string.Const.unwrap(a2), "must provide justification");
      goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a2)), "must provide non-empty justification");
      return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(b);
    };
    goog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract = function(a2, b) {
      goog.asserts.assertString(goog.string.Const.unwrap(a2), "must provide justification");
      goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a2)), "must provide non-empty justification");
      return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b);
    };
    goog.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract = function(a2, b) {
      goog.asserts.assertString(goog.string.Const.unwrap(a2), "must provide justification");
      goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a2)), "must provide non-empty justification");
      return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b);
    };
    goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract = function(a2, b) {
      goog.asserts.assertString(goog.string.Const.unwrap(a2), "must provide justification");
      goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a2)), "must provide non-empty justification");
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b);
    };
    goog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract = function(a2, b) {
      goog.asserts.assertString(goog.string.Const.unwrap(a2), "must provide justification");
      goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a2)), "must provide non-empty justification");
      return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b);
    };
    goog.dom.safe = {};
    goog.dom.safe.InsertAdjacentHtmlPosition = { AFTERBEGIN: "afterbegin", AFTEREND: "afterend", BEFOREBEGIN: "beforebegin", BEFOREEND: "beforeend" };
    goog.dom.safe.insertAdjacentHtml = function(a2, b, c2) {
      a2.insertAdjacentHTML(b, goog.html.SafeHtml.unwrapTrustedHTML(c2));
    };
    goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_ = { MATH: true, SCRIPT: true, STYLE: true, SVG: true, TEMPLATE: true };
    goog.dom.safe.isInnerHtmlCleanupRecursive_ = goog.functions.cacheReturnValue(function() {
      if (goog.DEBUG && typeof document === "undefined")
        return false;
      var a2 = document.createElement("div"), b = document.createElement("div");
      b.appendChild(document.createElement("div"));
      a2.appendChild(b);
      if (goog.DEBUG && !a2.firstChild)
        return false;
      b = a2.firstChild.firstChild;
      a2.innerHTML = goog.html.SafeHtml.unwrapTrustedHTML(goog.html.SafeHtml.EMPTY);
      return !b.parentElement;
    });
    goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse = function(a2, b) {
      if (goog.dom.safe.isInnerHtmlCleanupRecursive_())
        for (; a2.lastChild; )
          a2.removeChild(a2.lastChild);
      a2.innerHTML = goog.html.SafeHtml.unwrapTrustedHTML(b);
    };
    goog.dom.safe.setInnerHtml = function(a2, b) {
      if (goog.asserts.ENABLE_ASSERTS) {
        var c2 = a2.tagName.toUpperCase();
        if (goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[c2])
          throw Error("goog.dom.safe.setInnerHtml cannot be used to set content of " + a2.tagName + ".");
      }
      goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse(a2, b);
    };
    goog.dom.safe.setOuterHtml = function(a2, b) {
      a2.outerHTML = goog.html.SafeHtml.unwrapTrustedHTML(b);
    };
    goog.dom.safe.setFormElementAction = function(a2, b) {
      b = b instanceof goog.html.SafeUrl ? b : goog.html.SafeUrl.sanitizeAssertUnchanged(b);
      goog.dom.asserts.assertIsHTMLFormElement(a2).action = goog.html.SafeUrl.unwrapTrustedURL(b);
    };
    goog.dom.safe.setButtonFormAction = function(a2, b) {
      b = b instanceof goog.html.SafeUrl ? b : goog.html.SafeUrl.sanitizeAssertUnchanged(b);
      goog.dom.asserts.assertIsHTMLButtonElement(a2).formAction = goog.html.SafeUrl.unwrapTrustedURL(b);
    };
    goog.dom.safe.setInputFormAction = function(a2, b) {
      b = b instanceof goog.html.SafeUrl ? b : goog.html.SafeUrl.sanitizeAssertUnchanged(b);
      goog.dom.asserts.assertIsHTMLInputElement(a2).formAction = goog.html.SafeUrl.unwrapTrustedURL(b);
    };
    goog.dom.safe.setStyle = function(a2, b) {
      a2.style.cssText = goog.html.SafeStyle.unwrap(b);
    };
    goog.dom.safe.documentWrite = function(a2, b) {
      a2.write(goog.html.SafeHtml.unwrapTrustedHTML(b));
    };
    goog.dom.safe.setAnchorHref = function(a2, b) {
      goog.dom.asserts.assertIsHTMLAnchorElement(a2);
      b = b instanceof goog.html.SafeUrl ? b : goog.html.SafeUrl.sanitizeAssertUnchanged(b);
      a2.href = goog.html.SafeUrl.unwrapTrustedURL(b);
    };
    goog.dom.safe.setImageSrc = function(a2, b) {
      goog.dom.asserts.assertIsHTMLImageElement(a2);
      if (!(b instanceof goog.html.SafeUrl)) {
        var c2 = /^data:image\//i.test(b);
        b = goog.html.SafeUrl.sanitizeAssertUnchanged(b, c2);
      }
      a2.src = goog.html.SafeUrl.unwrapTrustedURL(b);
    };
    goog.dom.safe.setAudioSrc = function(a2, b) {
      goog.dom.asserts.assertIsHTMLAudioElement(a2);
      if (!(b instanceof goog.html.SafeUrl)) {
        var c2 = /^data:audio\//i.test(b);
        b = goog.html.SafeUrl.sanitizeAssertUnchanged(b, c2);
      }
      a2.src = goog.html.SafeUrl.unwrapTrustedURL(b);
    };
    goog.dom.safe.setVideoSrc = function(a2, b) {
      goog.dom.asserts.assertIsHTMLVideoElement(a2);
      if (!(b instanceof goog.html.SafeUrl)) {
        var c2 = /^data:video\//i.test(b);
        b = goog.html.SafeUrl.sanitizeAssertUnchanged(b, c2);
      }
      a2.src = goog.html.SafeUrl.unwrapTrustedURL(b);
    };
    goog.dom.safe.setEmbedSrc = function(a2, b) {
      goog.dom.asserts.assertIsHTMLEmbedElement(a2);
      a2.src = goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b);
    };
    goog.dom.safe.setFrameSrc = function(a2, b) {
      goog.dom.asserts.assertIsHTMLFrameElement(a2);
      a2.src = goog.html.TrustedResourceUrl.unwrapTrustedURL(b);
    };
    goog.dom.safe.setIframeSrc = function(a2, b) {
      goog.dom.asserts.assertIsHTMLIFrameElement(a2);
      a2.src = goog.html.TrustedResourceUrl.unwrapTrustedURL(b);
    };
    goog.dom.safe.setIframeSrcdoc = function(a2, b) {
      goog.dom.asserts.assertIsHTMLIFrameElement(a2);
      a2.srcdoc = goog.html.SafeHtml.unwrapTrustedHTML(b);
    };
    goog.dom.safe.setLinkHrefAndRel = function(a2, b, c2) {
      goog.dom.asserts.assertIsHTMLLinkElement(a2);
      a2.rel = c2;
      goog.string.internal.caseInsensitiveContains(c2, "stylesheet") ? (goog.asserts.assert(b instanceof goog.html.TrustedResourceUrl, 'URL must be TrustedResourceUrl because "rel" contains "stylesheet"'), a2.href = goog.html.TrustedResourceUrl.unwrapTrustedURL(b)) : a2.href = b instanceof goog.html.TrustedResourceUrl ? goog.html.TrustedResourceUrl.unwrapTrustedURL(b) : b instanceof goog.html.SafeUrl ? goog.html.SafeUrl.unwrapTrustedURL(b) : goog.html.SafeUrl.unwrapTrustedURL(goog.html.SafeUrl.sanitizeAssertUnchanged(b));
    };
    goog.dom.safe.setObjectData = function(a2, b) {
      goog.dom.asserts.assertIsHTMLObjectElement(a2);
      a2.data = goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b);
    };
    goog.dom.safe.setScriptSrc = function(a2, b) {
      goog.dom.asserts.assertIsHTMLScriptElement(a2);
      a2.src = goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b);
      (b = goog.getScriptNonce()) && a2.setAttribute("nonce", b);
    };
    goog.dom.safe.setScriptContent = function(a2, b) {
      goog.dom.asserts.assertIsHTMLScriptElement(a2);
      a2.text = goog.html.SafeScript.unwrapTrustedScript(b);
      (b = goog.getScriptNonce()) && a2.setAttribute("nonce", b);
    };
    goog.dom.safe.setLocationHref = function(a2, b) {
      goog.dom.asserts.assertIsLocation(a2);
      b = b instanceof goog.html.SafeUrl ? b : goog.html.SafeUrl.sanitizeAssertUnchanged(b);
      a2.href = goog.html.SafeUrl.unwrapTrustedURL(b);
    };
    goog.dom.safe.assignLocation = function(a2, b) {
      goog.dom.asserts.assertIsLocation(a2);
      b = b instanceof goog.html.SafeUrl ? b : goog.html.SafeUrl.sanitizeAssertUnchanged(b);
      a2.assign(goog.html.SafeUrl.unwrapTrustedURL(b));
    };
    goog.dom.safe.replaceLocation = function(a2, b) {
      goog.dom.asserts.assertIsLocation(a2);
      b = b instanceof goog.html.SafeUrl ? b : goog.html.SafeUrl.sanitizeAssertUnchanged(b);
      a2.replace(goog.html.SafeUrl.unwrapTrustedURL(b));
    };
    goog.dom.safe.openInWindow = function(a2, b, c2, d2, e2) {
      a2 = a2 instanceof goog.html.SafeUrl ? a2 : goog.html.SafeUrl.sanitizeAssertUnchanged(a2);
      return (b || goog.global).open(goog.html.SafeUrl.unwrapTrustedURL(a2), c2 ? goog.string.Const.unwrap(c2) : "", d2, e2);
    };
    goog.dom.safe.parseFromStringHtml = function(a2, b) {
      return goog.dom.safe.parseFromString(a2, b, "text/html");
    };
    goog.dom.safe.parseFromString = function(a2, b, c2) {
      return a2.parseFromString(goog.html.SafeHtml.unwrapTrustedHTML(b), c2);
    };
    goog.dom.safe.createImageFromBlob = function(a2) {
      if (!/^image\/.*/g.test(a2.type))
        throw Error("goog.dom.safe.createImageFromBlob only accepts MIME type image/.*.");
      var b = goog.global.URL.createObjectURL(a2);
      a2 = new goog.global.Image();
      a2.onload = function() {
        goog.global.URL.revokeObjectURL(b);
      };
      goog.dom.safe.setImageSrc(a2, goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Image blob URL."), b));
      return a2;
    };
    goog.string.DETECT_DOUBLE_ESCAPING = false;
    goog.string.FORCE_NON_DOM_HTML_UNESCAPING = false;
    goog.string.Unicode = { NBSP: "\xA0" };
    goog.string.startsWith = goog.string.internal.startsWith;
    goog.string.endsWith = goog.string.internal.endsWith;
    goog.string.caseInsensitiveStartsWith = goog.string.internal.caseInsensitiveStartsWith;
    goog.string.caseInsensitiveEndsWith = goog.string.internal.caseInsensitiveEndsWith;
    goog.string.caseInsensitiveEquals = goog.string.internal.caseInsensitiveEquals;
    goog.string.subs = function(a2, b) {
      for (var c2 = a2.split("%s"), d2 = "", e2 = Array.prototype.slice.call(arguments, 1); e2.length && 1 < c2.length; )
        d2 += c2.shift() + e2.shift();
      return d2 + c2.join("%s");
    };
    goog.string.collapseWhitespace = function(a2) {
      return a2.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
    };
    goog.string.isEmptyOrWhitespace = goog.string.internal.isEmptyOrWhitespace;
    goog.string.isEmptyString = function(a2) {
      return a2.length == 0;
    };
    goog.string.isEmpty = goog.string.isEmptyOrWhitespace;
    goog.string.isEmptyOrWhitespaceSafe = function(a2) {
      return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(a2));
    };
    goog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;
    goog.string.isBreakingWhitespace = function(a2) {
      return !/[^\t\n\r ]/.test(a2);
    };
    goog.string.isAlpha = function(a2) {
      return !/[^a-zA-Z]/.test(a2);
    };
    goog.string.isNumeric = function(a2) {
      return !/[^0-9]/.test(a2);
    };
    goog.string.isAlphaNumeric = function(a2) {
      return !/[^a-zA-Z0-9]/.test(a2);
    };
    goog.string.isSpace = function(a2) {
      return a2 == " ";
    };
    goog.string.isUnicodeChar = function(a2) {
      return a2.length == 1 && " " <= a2 && "~" >= a2 || "\x80" <= a2 && "\uFFFD" >= a2;
    };
    goog.string.stripNewlines = function(a2) {
      return a2.replace(/(\r\n|\r|\n)+/g, " ");
    };
    goog.string.canonicalizeNewlines = function(a2) {
      return a2.replace(/(\r\n|\r|\n)/g, "\n");
    };
    goog.string.normalizeWhitespace = function(a2) {
      return a2.replace(/\xa0|\s/g, " ");
    };
    goog.string.normalizeSpaces = function(a2) {
      return a2.replace(/\xa0|[ \t]+/g, " ");
    };
    goog.string.collapseBreakingSpaces = function(a2) {
      return a2.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
    };
    goog.string.trim = goog.string.internal.trim;
    goog.string.trimLeft = function(a2) {
      return a2.replace(/^[\s\xa0]+/, "");
    };
    goog.string.trimRight = function(a2) {
      return a2.replace(/[\s\xa0]+$/, "");
    };
    goog.string.caseInsensitiveCompare = goog.string.internal.caseInsensitiveCompare;
    goog.string.numberAwareCompare_ = function(a2, b, c2) {
      if (a2 == b)
        return 0;
      if (!a2)
        return -1;
      if (!b)
        return 1;
      for (var d2 = a2.toLowerCase().match(c2), e2 = b.toLowerCase().match(c2), f = Math.min(d2.length, e2.length), g = 0; g < f; g++) {
        c2 = d2[g];
        var h2 = e2[g];
        if (c2 != h2)
          return a2 = parseInt(c2, 10), !isNaN(a2) && (b = parseInt(h2, 10), !isNaN(b) && a2 - b) ? a2 - b : c2 < h2 ? -1 : 1;
      }
      return d2.length != e2.length ? d2.length - e2.length : a2 < b ? -1 : 1;
    };
    goog.string.intAwareCompare = function(a2, b) {
      return goog.string.numberAwareCompare_(a2, b, /\d+|\D+/g);
    };
    goog.string.floatAwareCompare = function(a2, b) {
      return goog.string.numberAwareCompare_(a2, b, /\d+|\.\d+|\D+/g);
    };
    goog.string.numerateCompare = goog.string.floatAwareCompare;
    goog.string.urlEncode = function(a2) {
      return encodeURIComponent(String(a2));
    };
    goog.string.urlDecode = function(a2) {
      return decodeURIComponent(a2.replace(/\+/g, " "));
    };
    goog.string.newLineToBr = goog.string.internal.newLineToBr;
    goog.string.htmlEscape = function(a2, b) {
      a2 = goog.string.internal.htmlEscape(a2, b);
      goog.string.DETECT_DOUBLE_ESCAPING && (a2 = a2.replace(goog.string.E_RE_, "&#101;"));
      return a2;
    };
    goog.string.E_RE_ = /e/g;
    goog.string.unescapeEntities = function(a2) {
      return goog.string.contains(a2, "&") ? !goog.string.FORCE_NON_DOM_HTML_UNESCAPING && "document" in goog.global ? goog.string.unescapeEntitiesUsingDom_(a2) : goog.string.unescapePureXmlEntities_(a2) : a2;
    };
    goog.string.unescapeEntitiesWithDocument = function(a2, b) {
      return goog.string.contains(a2, "&") ? goog.string.unescapeEntitiesUsingDom_(a2, b) : a2;
    };
    goog.string.unescapeEntitiesUsingDom_ = function(a2, b) {
      var c2 = { "&amp;": "&", "&lt;": "<", "&gt;": ">", "&quot;": '"' };
      var d2 = b ? b.createElement("div") : goog.global.document.createElement("div");
      return a2.replace(goog.string.HTML_ENTITY_PATTERN_, function(a3, b2) {
        var e2 = c2[a3];
        if (e2)
          return e2;
        b2.charAt(0) == "#" && (b2 = Number("0" + b2.substr(1)), isNaN(b2) || (e2 = String.fromCharCode(b2)));
        e2 || (goog.dom.safe.setInnerHtml(d2, goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Single HTML entity."), a3 + " ")), e2 = d2.firstChild.nodeValue.slice(0, -1));
        return c2[a3] = e2;
      });
    };
    goog.string.unescapePureXmlEntities_ = function(a2) {
      return a2.replace(/&([^;]+);/g, function(a3, c2) {
        switch (c2) {
          case "amp":
            return "&";
          case "lt":
            return "<";
          case "gt":
            return ">";
          case "quot":
            return '"';
          default:
            return c2.charAt(0) != "#" || (c2 = Number("0" + c2.substr(1)), isNaN(c2)) ? a3 : String.fromCharCode(c2);
        }
      });
    };
    goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
    goog.string.whitespaceEscape = function(a2, b) {
      return goog.string.newLineToBr(a2.replace(/  /g, " &#160;"), b);
    };
    goog.string.preserveSpaces = function(a2) {
      return a2.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
    };
    goog.string.stripQuotes = function(a2, b) {
      for (var c2 = b.length, d2 = 0; d2 < c2; d2++) {
        var e2 = c2 == 1 ? b : b.charAt(d2);
        if (a2.charAt(0) == e2 && a2.charAt(a2.length - 1) == e2)
          return a2.substring(1, a2.length - 1);
      }
      return a2;
    };
    goog.string.truncate = function(a2, b, c2) {
      c2 && (a2 = goog.string.unescapeEntities(a2));
      a2.length > b && (a2 = a2.substring(0, b - 3) + "...");
      c2 && (a2 = goog.string.htmlEscape(a2));
      return a2;
    };
    goog.string.truncateMiddle = function(a2, b, c2, d2) {
      c2 && (a2 = goog.string.unescapeEntities(a2));
      if (d2 && a2.length > b) {
        d2 > b && (d2 = b);
        var e2 = a2.length - d2;
        a2 = a2.substring(0, b - d2) + "..." + a2.substring(e2);
      } else
        a2.length > b && (d2 = Math.floor(b / 2), e2 = a2.length - d2, a2 = a2.substring(0, d2 + b % 2) + "..." + a2.substring(e2));
      c2 && (a2 = goog.string.htmlEscape(a2));
      return a2;
    };
    goog.string.specialEscapeChars_ = { "\0": "\\0", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "	": "\\t", "\v": "\\x0B", '"': '\\"', "\\": "\\\\", "<": "\\u003C" };
    goog.string.jsEscapeCache_ = { "'": "\\'" };
    goog.string.quote = function(a2) {
      a2 = String(a2);
      for (var b = ['"'], c2 = 0; c2 < a2.length; c2++) {
        var d2 = a2.charAt(c2), e2 = d2.charCodeAt(0);
        b[c2 + 1] = goog.string.specialEscapeChars_[d2] || (31 < e2 && 127 > e2 ? d2 : goog.string.escapeChar(d2));
      }
      b.push('"');
      return b.join("");
    };
    goog.string.escapeString = function(a2) {
      for (var b = [], c2 = 0; c2 < a2.length; c2++)
        b[c2] = goog.string.escapeChar(a2.charAt(c2));
      return b.join("");
    };
    goog.string.escapeChar = function(a2) {
      if (a2 in goog.string.jsEscapeCache_)
        return goog.string.jsEscapeCache_[a2];
      if (a2 in goog.string.specialEscapeChars_)
        return goog.string.jsEscapeCache_[a2] = goog.string.specialEscapeChars_[a2];
      var b = a2.charCodeAt(0);
      if (31 < b && 127 > b)
        var c2 = a2;
      else {
        if (256 > b) {
          if (c2 = "\\x", 16 > b || 256 < b)
            c2 += "0";
        } else
          c2 = "\\u", 4096 > b && (c2 += "0");
        c2 += b.toString(16).toUpperCase();
      }
      return goog.string.jsEscapeCache_[a2] = c2;
    };
    goog.string.contains = goog.string.internal.contains;
    goog.string.caseInsensitiveContains = goog.string.internal.caseInsensitiveContains;
    goog.string.countOf = function(a2, b) {
      return a2 && b ? a2.split(b).length - 1 : 0;
    };
    goog.string.removeAt = function(a2, b, c2) {
      var d2 = a2;
      0 <= b && b < a2.length && 0 < c2 && (d2 = a2.substr(0, b) + a2.substr(b + c2, a2.length - b - c2));
      return d2;
    };
    goog.string.remove = function(a2, b) {
      return a2.replace(b, "");
    };
    goog.string.removeAll = function(a2, b) {
      b = new RegExp(goog.string.regExpEscape(b), "g");
      return a2.replace(b, "");
    };
    goog.string.replaceAll = function(a2, b, c2) {
      b = new RegExp(goog.string.regExpEscape(b), "g");
      return a2.replace(b, c2.replace(/\$/g, "$$$$"));
    };
    goog.string.regExpEscape = function(a2) {
      return String(a2).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
    };
    goog.string.repeat = String.prototype.repeat ? function(a2, b) {
      return a2.repeat(b);
    } : function(a2, b) {
      return Array(b + 1).join(a2);
    };
    goog.string.padNumber = function(a2, b, c2) {
      a2 = goog.isDef(c2) ? a2.toFixed(c2) : String(a2);
      c2 = a2.indexOf(".");
      c2 == -1 && (c2 = a2.length);
      return goog.string.repeat("0", Math.max(0, b - c2)) + a2;
    };
    goog.string.makeSafe = function(a2) {
      return a2 == null ? "" : String(a2);
    };
    goog.string.buildString = function(a2) {
      return Array.prototype.join.call(arguments, "");
    };
    goog.string.getRandomString = function() {
      return Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ goog.now()).toString(36);
    };
    goog.string.compareVersions = goog.string.internal.compareVersions;
    goog.string.hashCode = function(a2) {
      for (var b = 0, c2 = 0; c2 < a2.length; ++c2)
        b = 31 * b + a2.charCodeAt(c2) >>> 0;
      return b;
    };
    goog.string.uniqueStringCounter_ = 2147483648 * Math.random() | 0;
    goog.string.createUniqueString = function() {
      return "goog_" + goog.string.uniqueStringCounter_++;
    };
    goog.string.toNumber = function(a2) {
      var b = Number(a2);
      return b == 0 && goog.string.isEmptyOrWhitespace(a2) ? NaN : b;
    };
    goog.string.isLowerCamelCase = function(a2) {
      return /^[a-z]+([A-Z][a-z]*)*$/.test(a2);
    };
    goog.string.isUpperCamelCase = function(a2) {
      return /^([A-Z][a-z]*)+$/.test(a2);
    };
    goog.string.toCamelCase = function(a2) {
      return String(a2).replace(/\-([a-z])/g, function(a3, c2) {
        return c2.toUpperCase();
      });
    };
    goog.string.toSelectorCase = function(a2) {
      return String(a2).replace(/([A-Z])/g, "-$1").toLowerCase();
    };
    goog.string.toTitleCase = function(a2, b) {
      b = goog.isString(b) ? goog.string.regExpEscape(b) : "\\s";
      return a2.replace(new RegExp("(^" + (b ? "|[" + b + "]+" : "") + ")([a-z])", "g"), function(a3, b2, e2) {
        return b2 + e2.toUpperCase();
      });
    };
    goog.string.capitalize = function(a2) {
      return String(a2.charAt(0)).toUpperCase() + String(a2.substr(1)).toLowerCase();
    };
    goog.string.parseInt = function(a2) {
      isFinite(a2) && (a2 = String(a2));
      return goog.isString(a2) ? /^\s*-?0x/i.test(a2) ? parseInt(a2, 16) : parseInt(a2, 10) : NaN;
    };
    goog.string.splitLimit = function(a2, b, c2) {
      a2 = a2.split(b);
      for (var d2 = []; 0 < c2 && a2.length; )
        d2.push(a2.shift()), c2--;
      a2.length && d2.push(a2.join(b));
      return d2;
    };
    goog.string.lastComponent = function(a2, b) {
      if (b)
        typeof b == "string" && (b = [b]);
      else
        return a2;
      for (var c2 = -1, d2 = 0; d2 < b.length; d2++)
        if (b[d2] != "") {
          var e2 = a2.lastIndexOf(b[d2]);
          e2 > c2 && (c2 = e2);
        }
      return c2 == -1 ? a2 : a2.slice(c2 + 1);
    };
    goog.string.editDistance = function(a2, b) {
      var c2 = [], d2 = [];
      if (a2 == b)
        return 0;
      if (!a2.length || !b.length)
        return Math.max(a2.length, b.length);
      for (var e2 = 0; e2 < b.length + 1; e2++)
        c2[e2] = e2;
      for (e2 = 0; e2 < a2.length; e2++) {
        d2[0] = e2 + 1;
        for (var f = 0; f < b.length; f++)
          d2[f + 1] = Math.min(d2[f] + 1, c2[f + 1] + 1, c2[f] + Number(a2[e2] != b[f]));
        for (f = 0; f < c2.length; f++)
          c2[f] = d2[f];
      }
      return d2[b.length];
    };
    goog.labs.userAgent.engine = {};
    goog.labs.userAgent.engine.isPresto = function() {
      return goog.labs.userAgent.util.matchUserAgent("Presto");
    };
    goog.labs.userAgent.engine.isTrident = function() {
      return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
    };
    goog.labs.userAgent.engine.isEdge = function() {
      return goog.labs.userAgent.util.matchUserAgent("Edge");
    };
    goog.labs.userAgent.engine.isWebKit = function() {
      return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit") && !goog.labs.userAgent.engine.isEdge();
    };
    goog.labs.userAgent.engine.isGecko = function() {
      return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident() && !goog.labs.userAgent.engine.isEdge();
    };
    goog.labs.userAgent.engine.getVersion = function() {
      var a2 = goog.labs.userAgent.util.getUserAgent();
      if (a2) {
        a2 = goog.labs.userAgent.util.extractVersionTuples(a2);
        var b = goog.labs.userAgent.engine.getEngineTuple_(a2);
        if (b)
          return b[0] == "Gecko" ? goog.labs.userAgent.engine.getVersionForKey_(a2, "Firefox") : b[1];
        a2 = a2[0];
        var c2;
        if (a2 && (c2 = a2[2]) && (c2 = /Trident\/([^\s;]+)/.exec(c2)))
          return c2[1];
      }
      return "";
    };
    goog.labs.userAgent.engine.getEngineTuple_ = function(a2) {
      if (!goog.labs.userAgent.engine.isEdge())
        return a2[1];
      for (var b = 0; b < a2.length; b++) {
        var c2 = a2[b];
        if (c2[0] == "Edge")
          return c2;
      }
    };
    goog.labs.userAgent.engine.isVersionOrHigher = function(a2) {
      return 0 <= goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), a2);
    };
    goog.labs.userAgent.engine.getVersionForKey_ = function(a2, b) {
      return (a2 = goog.array.find(a2, function(a3) {
        return b == a3[0];
      })) && a2[1] || "";
    };
    goog.labs.userAgent.platform = {};
    goog.labs.userAgent.platform.isAndroid = function() {
      return goog.labs.userAgent.util.matchUserAgent("Android");
    };
    goog.labs.userAgent.platform.isIpod = function() {
      return goog.labs.userAgent.util.matchUserAgent("iPod");
    };
    goog.labs.userAgent.platform.isIphone = function() {
      return goog.labs.userAgent.util.matchUserAgent("iPhone") && !goog.labs.userAgent.util.matchUserAgent("iPod") && !goog.labs.userAgent.util.matchUserAgent("iPad");
    };
    goog.labs.userAgent.platform.isIpad = function() {
      return goog.labs.userAgent.util.matchUserAgent("iPad");
    };
    goog.labs.userAgent.platform.isIos = function() {
      return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpad() || goog.labs.userAgent.platform.isIpod();
    };
    goog.labs.userAgent.platform.isMacintosh = function() {
      return goog.labs.userAgent.util.matchUserAgent("Macintosh");
    };
    goog.labs.userAgent.platform.isLinux = function() {
      return goog.labs.userAgent.util.matchUserAgent("Linux");
    };
    goog.labs.userAgent.platform.isWindows = function() {
      return goog.labs.userAgent.util.matchUserAgent("Windows");
    };
    goog.labs.userAgent.platform.isChromeOS = function() {
      return goog.labs.userAgent.util.matchUserAgent("CrOS");
    };
    goog.labs.userAgent.platform.isChromecast = function() {
      return goog.labs.userAgent.util.matchUserAgent("CrKey");
    };
    goog.labs.userAgent.platform.isKaiOS = function() {
      return goog.labs.userAgent.util.matchUserAgentIgnoreCase("KaiOS");
    };
    goog.labs.userAgent.platform.isGo2Phone = function() {
      return goog.labs.userAgent.util.matchUserAgentIgnoreCase("GAFP");
    };
    goog.labs.userAgent.platform.getVersion = function() {
      var a2 = goog.labs.userAgent.util.getUserAgent(), b = "";
      goog.labs.userAgent.platform.isWindows() ? (b = /Windows (?:NT|Phone) ([0-9.]+)/, b = (a2 = b.exec(a2)) ? a2[1] : "0.0") : goog.labs.userAgent.platform.isIos() ? (b = /(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/, b = (a2 = b.exec(a2)) && a2[1].replace(/_/g, ".")) : goog.labs.userAgent.platform.isMacintosh() ? (b = /Mac OS X ([0-9_.]+)/, b = (a2 = b.exec(a2)) ? a2[1].replace(/_/g, ".") : "10") : goog.labs.userAgent.platform.isKaiOS() ? (b = /(?:KaiOS)\/(\S+)/i, b = (a2 = b.exec(a2)) && a2[1]) : goog.labs.userAgent.platform.isAndroid() ? (b = /Android\s+([^\);]+)(\)|;)/, b = (a2 = b.exec(a2)) && a2[1]) : goog.labs.userAgent.platform.isChromeOS() && (b = /(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/, b = (a2 = b.exec(a2)) && a2[1]);
      return b || "";
    };
    goog.labs.userAgent.platform.isVersionOrHigher = function(a2) {
      return 0 <= goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(), a2);
    };
    goog.reflect = {};
    goog.reflect.object = function(a2, b) {
      return b;
    };
    goog.reflect.objectProperty = function(a2, b) {
      return a2;
    };
    goog.reflect.sinkValue = function(a2) {
      goog.reflect.sinkValue[" "](a2);
      return a2;
    };
    goog.reflect.sinkValue[" "] = goog.nullFunction;
    goog.reflect.canAccessProperty = function(a2, b) {
      try {
        return goog.reflect.sinkValue(a2[b]), true;
      } catch (c2) {
      }
      return false;
    };
    goog.reflect.cache = function(a2, b, c2, d2) {
      d2 = d2 ? d2(b) : b;
      return Object.prototype.hasOwnProperty.call(a2, d2) ? a2[d2] : a2[d2] = c2(b);
    };
    goog.userAgent = {};
    goog.userAgent.ASSUME_IE = false;
    goog.userAgent.ASSUME_EDGE = false;
    goog.userAgent.ASSUME_GECKO = false;
    goog.userAgent.ASSUME_WEBKIT = false;
    goog.userAgent.ASSUME_MOBILE_WEBKIT = false;
    goog.userAgent.ASSUME_OPERA = false;
    goog.userAgent.ASSUME_ANY_VERSION = false;
    goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
    goog.userAgent.getUserAgentString = function() {
      return goog.labs.userAgent.util.getUserAgent();
    };
    goog.userAgent.getNavigatorTyped = function() {
      return goog.global.navigator || null;
    };
    goog.userAgent.getNavigator = function() {
      return goog.userAgent.getNavigatorTyped();
    };
    goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
    goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
    goog.userAgent.EDGE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_EDGE : goog.labs.userAgent.engine.isEdge();
    goog.userAgent.EDGE_OR_IE = goog.userAgent.EDGE || goog.userAgent.IE;
    goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
    goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
    goog.userAgent.isMobile_ = function() {
      return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
    };
    goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
    goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
    goog.userAgent.determinePlatform_ = function() {
      var a2 = goog.userAgent.getNavigatorTyped();
      return a2 && a2.platform || "";
    };
    goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
    goog.userAgent.ASSUME_MAC = false;
    goog.userAgent.ASSUME_WINDOWS = false;
    goog.userAgent.ASSUME_LINUX = false;
    goog.userAgent.ASSUME_X11 = false;
    goog.userAgent.ASSUME_ANDROID = false;
    goog.userAgent.ASSUME_IPHONE = false;
    goog.userAgent.ASSUME_IPAD = false;
    goog.userAgent.ASSUME_IPOD = false;
    goog.userAgent.ASSUME_KAIOS = false;
    goog.userAgent.ASSUME_GO2PHONE = false;
    goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD || goog.userAgent.ASSUME_IPOD;
    goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.labs.userAgent.platform.isMacintosh();
    goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.labs.userAgent.platform.isWindows();
    goog.userAgent.isLegacyLinux_ = function() {
      return goog.labs.userAgent.platform.isLinux() || goog.labs.userAgent.platform.isChromeOS();
    };
    goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.isLegacyLinux_();
    goog.userAgent.isX11_ = function() {
      var a2 = goog.userAgent.getNavigatorTyped();
      return !!a2 && goog.string.contains(a2.appVersion || "", "X11");
    };
    goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.isX11_();
    goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.labs.userAgent.platform.isAndroid();
    goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.labs.userAgent.platform.isIphone();
    goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
    goog.userAgent.IPOD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPOD : goog.labs.userAgent.platform.isIpod();
    goog.userAgent.IOS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD || goog.userAgent.ASSUME_IPOD : goog.labs.userAgent.platform.isIos();
    goog.userAgent.KAIOS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_KAIOS : goog.labs.userAgent.platform.isKaiOS();
    goog.userAgent.GO2PHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_GO2PHONE : goog.labs.userAgent.platform.isGo2Phone();
    goog.userAgent.determineVersion_ = function() {
      var a2 = "", b = goog.userAgent.getVersionRegexResult_();
      b && (a2 = b ? b[1] : "");
      return goog.userAgent.IE && (b = goog.userAgent.getDocumentMode_(), b != null && b > parseFloat(a2)) ? String(b) : a2;
    };
    goog.userAgent.getVersionRegexResult_ = function() {
      var a2 = goog.userAgent.getUserAgentString();
      if (goog.userAgent.GECKO)
        return /rv:([^\);]+)(\)|;)/.exec(a2);
      if (goog.userAgent.EDGE)
        return /Edge\/([\d\.]+)/.exec(a2);
      if (goog.userAgent.IE)
        return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a2);
      if (goog.userAgent.WEBKIT)
        return /WebKit\/(\S+)/.exec(a2);
      if (goog.userAgent.OPERA)
        return /(?:Version)[ \/]?(\S+)/.exec(a2);
    };
    goog.userAgent.getDocumentMode_ = function() {
      var a2 = goog.global.document;
      return a2 ? a2.documentMode : void 0;
    };
    goog.userAgent.VERSION = goog.userAgent.determineVersion_();
    goog.userAgent.compare = function(a2, b) {
      return goog.string.compareVersions(a2, b);
    };
    goog.userAgent.isVersionOrHigherCache_ = {};
    goog.userAgent.isVersionOrHigher = function(a2) {
      return goog.userAgent.ASSUME_ANY_VERSION || goog.reflect.cache(goog.userAgent.isVersionOrHigherCache_, a2, function() {
        return 0 <= goog.string.compareVersions(goog.userAgent.VERSION, a2);
      });
    };
    goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
    goog.userAgent.isDocumentModeOrHigher = function(a2) {
      return Number(goog.userAgent.DOCUMENT_MODE) >= a2;
    };
    goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
    goog.userAgent.DOCUMENT_MODE = function() {
      if (goog.global.document && goog.userAgent.IE)
        return goog.userAgent.getDocumentMode_();
    }();
    goog.userAgent.product = {};
    goog.userAgent.product.ASSUME_FIREFOX = false;
    goog.userAgent.product.ASSUME_IPHONE = false;
    goog.userAgent.product.ASSUME_IPAD = false;
    goog.userAgent.product.ASSUME_ANDROID = false;
    goog.userAgent.product.ASSUME_CHROME = false;
    goog.userAgent.product.ASSUME_SAFARI = false;
    goog.userAgent.product.PRODUCT_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_OPERA || goog.userAgent.product.ASSUME_FIREFOX || goog.userAgent.product.ASSUME_IPHONE || goog.userAgent.product.ASSUME_IPAD || goog.userAgent.product.ASSUME_ANDROID || goog.userAgent.product.ASSUME_CHROME || goog.userAgent.product.ASSUME_SAFARI;
    goog.userAgent.product.OPERA = goog.userAgent.OPERA;
    goog.userAgent.product.IE = goog.userAgent.IE;
    goog.userAgent.product.EDGE = goog.userAgent.EDGE;
    goog.userAgent.product.FIREFOX = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_FIREFOX : goog.labs.userAgent.browser.isFirefox();
    goog.userAgent.product.isIphoneOrIpod_ = function() {
      return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpod();
    };
    goog.userAgent.product.IPHONE = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_IPHONE : goog.userAgent.product.isIphoneOrIpod_();
    goog.userAgent.product.IPAD = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
    goog.userAgent.product.ANDROID = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_ANDROID : goog.labs.userAgent.browser.isAndroidBrowser();
    goog.userAgent.product.CHROME = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_CHROME : goog.labs.userAgent.browser.isChrome();
    goog.userAgent.product.isSafariDesktop_ = function() {
      return goog.labs.userAgent.browser.isSafari() && !goog.labs.userAgent.platform.isIos();
    };
    goog.userAgent.product.SAFARI = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_SAFARI : goog.userAgent.product.isSafariDesktop_();
    goog.crypt.base64 = {};
    goog.crypt.base64.DEFAULT_ALPHABET_COMMON_ = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    goog.crypt.base64.ENCODED_VALS = goog.crypt.base64.DEFAULT_ALPHABET_COMMON_ + "+/=";
    goog.crypt.base64.ENCODED_VALS_WEBSAFE = goog.crypt.base64.DEFAULT_ALPHABET_COMMON_ + "-_.";
    goog.crypt.base64.Alphabet = { DEFAULT: 0, NO_PADDING: 1, WEBSAFE: 2, WEBSAFE_DOT_PADDING: 3, WEBSAFE_NO_PADDING: 4 };
    goog.crypt.base64.paddingChars_ = "=.";
    goog.crypt.base64.isPadding_ = function(a2) {
      return goog.string.contains(goog.crypt.base64.paddingChars_, a2);
    };
    goog.crypt.base64.byteToCharMaps_ = {};
    goog.crypt.base64.charToByteMap_ = null;
    goog.crypt.base64.ASSUME_NATIVE_SUPPORT_ = goog.userAgent.GECKO || goog.userAgent.WEBKIT && !goog.userAgent.product.SAFARI || goog.userAgent.OPERA;
    goog.crypt.base64.HAS_NATIVE_ENCODE_ = goog.crypt.base64.ASSUME_NATIVE_SUPPORT_ || typeof goog.global.btoa == "function";
    goog.crypt.base64.HAS_NATIVE_DECODE_ = goog.crypt.base64.ASSUME_NATIVE_SUPPORT_ || !goog.userAgent.product.SAFARI && !goog.userAgent.IE && typeof goog.global.atob == "function";
    goog.crypt.base64.encodeByteArray = function(a2, b) {
      goog.asserts.assert(goog.isArrayLike(a2), "encodeByteArray takes an array as a parameter");
      b === void 0 && (b = goog.crypt.base64.Alphabet.DEFAULT);
      goog.crypt.base64.init_();
      b = goog.crypt.base64.byteToCharMaps_[b];
      for (var c2 = [], d2 = 0; d2 < a2.length; d2 += 3) {
        var e2 = a2[d2], f = d2 + 1 < a2.length, g = f ? a2[d2 + 1] : 0, h2 = d2 + 2 < a2.length, k = h2 ? a2[d2 + 2] : 0, l2 = e2 >> 2;
        e2 = (e2 & 3) << 4 | g >> 4;
        g = (g & 15) << 2 | k >> 6;
        k &= 63;
        h2 || (k = 64, f || (g = 64));
        c2.push(b[l2], b[e2], b[g] || "", b[k] || "");
      }
      return c2.join("");
    };
    goog.crypt.base64.encodeString = function(a2, b) {
      return goog.crypt.base64.HAS_NATIVE_ENCODE_ && !b ? goog.global.btoa(a2) : goog.crypt.base64.encodeByteArray(goog.crypt.stringToByteArray(a2), b);
    };
    goog.crypt.base64.decodeString = function(a2, b) {
      if (goog.crypt.base64.HAS_NATIVE_DECODE_ && !b)
        return goog.global.atob(a2);
      var c2 = "";
      goog.crypt.base64.decodeStringInternal_(a2, function(a3) {
        c2 += String.fromCharCode(a3);
      });
      return c2;
    };
    goog.crypt.base64.decodeStringToByteArray = function(a2, b) {
      var c2 = [];
      goog.crypt.base64.decodeStringInternal_(a2, function(a3) {
        c2.push(a3);
      });
      return c2;
    };
    goog.crypt.base64.decodeStringToUint8Array = function(a2) {
      goog.asserts.assert(!goog.userAgent.IE || goog.userAgent.isVersionOrHigher("10"), "Browser does not support typed arrays");
      var b = a2.length, c2 = 3 * b / 4;
      c2 % 3 ? c2 = Math.floor(c2) : goog.crypt.base64.isPadding_(a2[b - 1]) && (c2 = goog.crypt.base64.isPadding_(a2[b - 2]) ? c2 - 2 : c2 - 1);
      var d2 = new Uint8Array(c2), e2 = 0;
      goog.crypt.base64.decodeStringInternal_(a2, function(a3) {
        d2[e2++] = a3;
      });
      return d2.subarray(0, e2);
    };
    goog.crypt.base64.decodeStringInternal_ = function(a2, b) {
      function c2(b2) {
        for (; d2 < a2.length; ) {
          var c3 = a2.charAt(d2++), e3 = goog.crypt.base64.charToByteMap_[c3];
          if (e3 != null)
            return e3;
          if (!goog.string.isEmptyOrWhitespace(c3))
            throw Error("Unknown base64 encoding at char: " + c3);
        }
        return b2;
      }
      goog.crypt.base64.init_();
      for (var d2 = 0; ; ) {
        var e2 = c2(-1), f = c2(0), g = c2(64), h2 = c2(64);
        if (h2 === 64 && e2 === -1)
          break;
        b(e2 << 2 | f >> 4);
        g != 64 && (b(f << 4 & 240 | g >> 2), h2 != 64 && b(g << 6 & 192 | h2));
      }
    };
    goog.crypt.base64.init_ = function() {
      if (!goog.crypt.base64.charToByteMap_) {
        goog.crypt.base64.charToByteMap_ = {};
        for (var a2 = goog.crypt.base64.DEFAULT_ALPHABET_COMMON_.split(""), b = ["+/=", "+/", "-_=", "-_.", "-_"], c2 = 0; 5 > c2; c2++) {
          var d2 = a2.concat(b[c2].split(""));
          goog.crypt.base64.byteToCharMaps_[c2] = d2;
          for (var e2 = 0; e2 < d2.length; e2++) {
            var f = d2[e2], g = goog.crypt.base64.charToByteMap_[f];
            g === void 0 ? goog.crypt.base64.charToByteMap_[f] = e2 : goog.asserts.assert(g === e2);
          }
        }
      }
    };
    jspb.utils = {};
    jspb.utils.split64Low = 0;
    jspb.utils.split64High = 0;
    jspb.utils.splitUint64 = function(a2) {
      var b = a2 >>> 0;
      a2 = Math.floor((a2 - b) / jspb.BinaryConstants.TWO_TO_32) >>> 0;
      jspb.utils.split64Low = b;
      jspb.utils.split64High = a2;
    };
    jspb.utils.splitInt64 = function(a2) {
      var b = 0 > a2;
      a2 = Math.abs(a2);
      var c2 = a2 >>> 0;
      a2 = Math.floor((a2 - c2) / jspb.BinaryConstants.TWO_TO_32);
      a2 >>>= 0;
      b && (a2 = ~a2 >>> 0, c2 = (~c2 >>> 0) + 1, 4294967295 < c2 && (c2 = 0, a2++, 4294967295 < a2 && (a2 = 0)));
      jspb.utils.split64Low = c2;
      jspb.utils.split64High = a2;
    };
    jspb.utils.splitZigzag64 = function(a2) {
      var b = 0 > a2;
      a2 = 2 * Math.abs(a2);
      jspb.utils.splitUint64(a2);
      a2 = jspb.utils.split64Low;
      var c2 = jspb.utils.split64High;
      b && (a2 == 0 ? c2 == 0 ? c2 = a2 = 4294967295 : (c2--, a2 = 4294967295) : a2--);
      jspb.utils.split64Low = a2;
      jspb.utils.split64High = c2;
    };
    jspb.utils.splitFloat32 = function(a2) {
      var b = 0 > a2 ? 1 : 0;
      a2 = b ? -a2 : a2;
      if (a2 === 0)
        0 < 1 / a2 ? (jspb.utils.split64High = 0, jspb.utils.split64Low = 0) : (jspb.utils.split64High = 0, jspb.utils.split64Low = 2147483648);
      else if (isNaN(a2))
        jspb.utils.split64High = 0, jspb.utils.split64Low = 2147483647;
      else if (a2 > jspb.BinaryConstants.FLOAT32_MAX)
        jspb.utils.split64High = 0, jspb.utils.split64Low = (b << 31 | 2139095040) >>> 0;
      else if (a2 < jspb.BinaryConstants.FLOAT32_MIN)
        a2 = Math.round(a2 / Math.pow(2, -149)), jspb.utils.split64High = 0, jspb.utils.split64Low = (b << 31 | a2) >>> 0;
      else {
        var c2 = Math.floor(Math.log(a2) / Math.LN2);
        a2 *= Math.pow(2, -c2);
        a2 = Math.round(a2 * jspb.BinaryConstants.TWO_TO_23) & 8388607;
        jspb.utils.split64High = 0;
        jspb.utils.split64Low = (b << 31 | c2 + 127 << 23 | a2) >>> 0;
      }
    };
    jspb.utils.splitFloat64 = function(a2) {
      var b = 0 > a2 ? 1 : 0;
      a2 = b ? -a2 : a2;
      if (a2 === 0)
        jspb.utils.split64High = 0 < 1 / a2 ? 0 : 2147483648, jspb.utils.split64Low = 0;
      else if (isNaN(a2))
        jspb.utils.split64High = 2147483647, jspb.utils.split64Low = 4294967295;
      else if (a2 > jspb.BinaryConstants.FLOAT64_MAX)
        jspb.utils.split64High = (b << 31 | 2146435072) >>> 0, jspb.utils.split64Low = 0;
      else if (a2 < jspb.BinaryConstants.FLOAT64_MIN) {
        var c2 = a2 / Math.pow(2, -1074);
        a2 = c2 / jspb.BinaryConstants.TWO_TO_32;
        jspb.utils.split64High = (b << 31 | a2) >>> 0;
        jspb.utils.split64Low = c2 >>> 0;
      } else {
        c2 = a2;
        var d2 = 0;
        if (2 <= c2)
          for (; 2 <= c2 && 1023 > d2; )
            d2++, c2 /= 2;
        else
          for (; 1 > c2 && -1022 < d2; )
            c2 *= 2, d2--;
        c2 = a2 * Math.pow(2, -d2);
        a2 = c2 * jspb.BinaryConstants.TWO_TO_20 & 1048575;
        c2 = c2 * jspb.BinaryConstants.TWO_TO_52 >>> 0;
        jspb.utils.split64High = (b << 31 | d2 + 1023 << 20 | a2) >>> 0;
        jspb.utils.split64Low = c2;
      }
    };
    jspb.utils.splitHash64 = function(a2) {
      var b = a2.charCodeAt(0), c2 = a2.charCodeAt(1), d2 = a2.charCodeAt(2), e2 = a2.charCodeAt(3), f = a2.charCodeAt(4), g = a2.charCodeAt(5), h2 = a2.charCodeAt(6);
      a2 = a2.charCodeAt(7);
      jspb.utils.split64Low = b + (c2 << 8) + (d2 << 16) + (e2 << 24) >>> 0;
      jspb.utils.split64High = f + (g << 8) + (h2 << 16) + (a2 << 24) >>> 0;
    };
    jspb.utils.joinUint64 = function(a2, b) {
      return b * jspb.BinaryConstants.TWO_TO_32 + (a2 >>> 0);
    };
    jspb.utils.joinInt64 = function(a2, b) {
      var c2 = b & 2147483648;
      c2 && (a2 = ~a2 + 1 >>> 0, b = ~b >>> 0, a2 == 0 && (b = b + 1 >>> 0));
      a2 = jspb.utils.joinUint64(a2, b);
      return c2 ? -a2 : a2;
    };
    jspb.utils.toZigzag64 = function(a2, b, c2) {
      var d2 = b >> 31;
      return c2(a2 << 1 ^ d2, (b << 1 | a2 >>> 31) ^ d2);
    };
    jspb.utils.joinZigzag64 = function(a2, b) {
      return jspb.utils.fromZigzag64(a2, b, jspb.utils.joinInt64);
    };
    jspb.utils.fromZigzag64 = function(a2, b, c2) {
      var d2 = -(a2 & 1);
      return c2((a2 >>> 1 | b << 31) ^ d2, b >>> 1 ^ d2);
    };
    jspb.utils.joinFloat32 = function(a2, b) {
      b = 2 * (a2 >> 31) + 1;
      var c2 = a2 >>> 23 & 255;
      a2 &= 8388607;
      return c2 == 255 ? a2 ? NaN : Infinity * b : c2 == 0 ? b * Math.pow(2, -149) * a2 : b * Math.pow(2, c2 - 150) * (a2 + Math.pow(2, 23));
    };
    jspb.utils.joinFloat64 = function(a2, b) {
      var c2 = 2 * (b >> 31) + 1, d2 = b >>> 20 & 2047;
      a2 = jspb.BinaryConstants.TWO_TO_32 * (b & 1048575) + a2;
      return d2 == 2047 ? a2 ? NaN : Infinity * c2 : d2 == 0 ? c2 * Math.pow(2, -1074) * a2 : c2 * Math.pow(2, d2 - 1075) * (a2 + jspb.BinaryConstants.TWO_TO_52);
    };
    jspb.utils.joinHash64 = function(a2, b) {
      return String.fromCharCode(a2 >>> 0 & 255, a2 >>> 8 & 255, a2 >>> 16 & 255, a2 >>> 24 & 255, b >>> 0 & 255, b >>> 8 & 255, b >>> 16 & 255, b >>> 24 & 255);
    };
    jspb.utils.DIGITS = "0123456789abcdef".split("");
    jspb.utils.ZERO_CHAR_CODE_ = 48;
    jspb.utils.A_CHAR_CODE_ = 97;
    jspb.utils.joinUnsignedDecimalString = function(a2, b) {
      function c2(a3, b2) {
        a3 = a3 ? String(a3) : "";
        return b2 ? "0000000".slice(a3.length) + a3 : a3;
      }
      if (2097151 >= b)
        return "" + jspb.utils.joinUint64(a2, b);
      var d2 = (a2 >>> 24 | b << 8) >>> 0 & 16777215;
      b = b >> 16 & 65535;
      a2 = (a2 & 16777215) + 6777216 * d2 + 6710656 * b;
      d2 += 8147497 * b;
      b *= 2;
      1e7 <= a2 && (d2 += Math.floor(a2 / 1e7), a2 %= 1e7);
      1e7 <= d2 && (b += Math.floor(d2 / 1e7), d2 %= 1e7);
      return c2(b, 0) + c2(d2, b) + c2(a2, 1);
    };
    jspb.utils.joinSignedDecimalString = function(a2, b) {
      var c2 = b & 2147483648;
      c2 && (a2 = ~a2 + 1 >>> 0, b = ~b + (a2 == 0 ? 1 : 0) >>> 0);
      a2 = jspb.utils.joinUnsignedDecimalString(a2, b);
      return c2 ? "-" + a2 : a2;
    };
    jspb.utils.hash64ToDecimalString = function(a2, b) {
      jspb.utils.splitHash64(a2);
      a2 = jspb.utils.split64Low;
      var c2 = jspb.utils.split64High;
      return b ? jspb.utils.joinSignedDecimalString(a2, c2) : jspb.utils.joinUnsignedDecimalString(a2, c2);
    };
    jspb.utils.hash64ArrayToDecimalStrings = function(a2, b) {
      for (var c2 = Array(a2.length), d2 = 0; d2 < a2.length; d2++)
        c2[d2] = jspb.utils.hash64ToDecimalString(a2[d2], b);
      return c2;
    };
    jspb.utils.decimalStringToHash64 = function(a2) {
      function b(a3, b2) {
        for (var c3 = 0; 8 > c3 && (a3 !== 1 || 0 < b2); c3++)
          b2 = a3 * e2[c3] + b2, e2[c3] = b2 & 255, b2 >>>= 8;
      }
      function c2() {
        for (var a3 = 0; 8 > a3; a3++)
          e2[a3] = ~e2[a3] & 255;
      }
      goog.asserts.assert(0 < a2.length);
      var d2 = false;
      a2[0] === "-" && (d2 = true, a2 = a2.slice(1));
      for (var e2 = [0, 0, 0, 0, 0, 0, 0, 0], f = 0; f < a2.length; f++)
        b(10, a2.charCodeAt(f) - jspb.utils.ZERO_CHAR_CODE_);
      d2 && (c2(), b(1, 1));
      return goog.crypt.byteArrayToString(e2);
    };
    jspb.utils.splitDecimalString = function(a2) {
      jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a2));
    };
    jspb.utils.toHexDigit_ = function(a2) {
      return String.fromCharCode(10 > a2 ? jspb.utils.ZERO_CHAR_CODE_ + a2 : jspb.utils.A_CHAR_CODE_ - 10 + a2);
    };
    jspb.utils.fromHexCharCode_ = function(a2) {
      return a2 >= jspb.utils.A_CHAR_CODE_ ? a2 - jspb.utils.A_CHAR_CODE_ + 10 : a2 - jspb.utils.ZERO_CHAR_CODE_;
    };
    jspb.utils.hash64ToHexString = function(a2) {
      var b = Array(18);
      b[0] = "0";
      b[1] = "x";
      for (var c2 = 0; 8 > c2; c2++) {
        var d2 = a2.charCodeAt(7 - c2);
        b[2 * c2 + 2] = jspb.utils.toHexDigit_(d2 >> 4);
        b[2 * c2 + 3] = jspb.utils.toHexDigit_(d2 & 15);
      }
      return b.join("");
    };
    jspb.utils.hexStringToHash64 = function(a2) {
      a2 = a2.toLowerCase();
      goog.asserts.assert(a2.length == 18);
      goog.asserts.assert(a2[0] == "0");
      goog.asserts.assert(a2[1] == "x");
      for (var b = "", c2 = 0; 8 > c2; c2++) {
        var d2 = jspb.utils.fromHexCharCode_(a2.charCodeAt(2 * c2 + 2)), e2 = jspb.utils.fromHexCharCode_(a2.charCodeAt(2 * c2 + 3));
        b = String.fromCharCode(16 * d2 + e2) + b;
      }
      return b;
    };
    jspb.utils.hash64ToNumber = function(a2, b) {
      jspb.utils.splitHash64(a2);
      a2 = jspb.utils.split64Low;
      var c2 = jspb.utils.split64High;
      return b ? jspb.utils.joinInt64(a2, c2) : jspb.utils.joinUint64(a2, c2);
    };
    jspb.utils.numberToHash64 = function(a2) {
      jspb.utils.splitInt64(a2);
      return jspb.utils.joinHash64(jspb.utils.split64Low, jspb.utils.split64High);
    };
    jspb.utils.countVarints = function(a2, b, c2) {
      for (var d2 = 0, e2 = b; e2 < c2; e2++)
        d2 += a2[e2] >> 7;
      return c2 - b - d2;
    };
    jspb.utils.countVarintFields = function(a2, b, c2, d2) {
      var e2 = 0;
      d2 = 8 * d2 + jspb.BinaryConstants.WireType.VARINT;
      if (128 > d2)
        for (; b < c2 && a2[b++] == d2; )
          for (e2++; ; ) {
            var f = a2[b++];
            if ((f & 128) == 0)
              break;
          }
      else
        for (; b < c2; ) {
          for (f = d2; 128 < f; ) {
            if (a2[b] != (f & 127 | 128))
              return e2;
            b++;
            f >>= 7;
          }
          if (a2[b++] != f)
            break;
          for (e2++; f = a2[b++], (f & 128) != 0; )
            ;
        }
      return e2;
    };
    jspb.utils.countFixedFields_ = function(a2, b, c2, d2, e2) {
      var f = 0;
      if (128 > d2)
        for (; b < c2 && a2[b++] == d2; )
          f++, b += e2;
      else
        for (; b < c2; ) {
          for (var g = d2; 128 < g; ) {
            if (a2[b++] != (g & 127 | 128))
              return f;
            g >>= 7;
          }
          if (a2[b++] != g)
            break;
          f++;
          b += e2;
        }
      return f;
    };
    jspb.utils.countFixed32Fields = function(a2, b, c2, d2) {
      return jspb.utils.countFixedFields_(a2, b, c2, 8 * d2 + jspb.BinaryConstants.WireType.FIXED32, 4);
    };
    jspb.utils.countFixed64Fields = function(a2, b, c2, d2) {
      return jspb.utils.countFixedFields_(a2, b, c2, 8 * d2 + jspb.BinaryConstants.WireType.FIXED64, 8);
    };
    jspb.utils.countDelimitedFields = function(a2, b, c2, d2) {
      var e2 = 0;
      for (d2 = 8 * d2 + jspb.BinaryConstants.WireType.DELIMITED; b < c2; ) {
        for (var f = d2; 128 < f; ) {
          if (a2[b++] != (f & 127 | 128))
            return e2;
          f >>= 7;
        }
        if (a2[b++] != f)
          break;
        e2++;
        for (var g = 0, h2 = 1; f = a2[b++], g += (f & 127) * h2, h2 *= 128, (f & 128) != 0; )
          ;
        b += g;
      }
      return e2;
    };
    jspb.utils.debugBytesToTextFormat = function(a2) {
      var b = '"';
      if (a2) {
        a2 = jspb.utils.byteSourceToUint8Array(a2);
        for (var c2 = 0; c2 < a2.length; c2++)
          b += "\\x", 16 > a2[c2] && (b += "0"), b += a2[c2].toString(16);
      }
      return b + '"';
    };
    jspb.utils.debugScalarToTextFormat = function(a2) {
      return typeof a2 === "string" ? goog.string.quote(a2) : a2.toString();
    };
    jspb.utils.stringToByteArray = function(a2) {
      for (var b = new Uint8Array(a2.length), c2 = 0; c2 < a2.length; c2++) {
        var d2 = a2.charCodeAt(c2);
        if (255 < d2)
          throw Error("Conversion error: string contains codepoint outside of byte range");
        b[c2] = d2;
      }
      return b;
    };
    jspb.utils.byteSourceToUint8Array = function(a2) {
      if (a2.constructor === Uint8Array)
        return a2;
      if (a2.constructor === ArrayBuffer || typeof Buffer != "undefined" && a2.constructor === Buffer || a2.constructor === Array)
        return new Uint8Array(a2);
      if (a2.constructor === String)
        return goog.crypt.base64.decodeStringToUint8Array(a2);
      goog.asserts.fail("Type not convertible to Uint8Array.");
      return new Uint8Array(0);
    };
    jspb.BinaryDecoder = function(a2, b, c2) {
      this.bytes_ = null;
      this.cursor_ = this.end_ = this.start_ = 0;
      this.error_ = false;
      a2 && this.setBlock(a2, b, c2);
    };
    jspb.BinaryDecoder.instanceCache_ = [];
    jspb.BinaryDecoder.alloc = function(a2, b, c2) {
      if (jspb.BinaryDecoder.instanceCache_.length) {
        var d2 = jspb.BinaryDecoder.instanceCache_.pop();
        a2 && d2.setBlock(a2, b, c2);
        return d2;
      }
      return new jspb.BinaryDecoder(a2, b, c2);
    };
    jspb.BinaryDecoder.prototype.free = function() {
      this.clear();
      100 > jspb.BinaryDecoder.instanceCache_.length && jspb.BinaryDecoder.instanceCache_.push(this);
    };
    jspb.BinaryDecoder.prototype.clone = function() {
      return jspb.BinaryDecoder.alloc(this.bytes_, this.start_, this.end_ - this.start_);
    };
    jspb.BinaryDecoder.prototype.clear = function() {
      this.bytes_ = null;
      this.cursor_ = this.end_ = this.start_ = 0;
      this.error_ = false;
    };
    jspb.BinaryDecoder.prototype.getBuffer = function() {
      return this.bytes_;
    };
    jspb.BinaryDecoder.prototype.setBlock = function(a2, b, c2) {
      this.bytes_ = jspb.utils.byteSourceToUint8Array(a2);
      this.start_ = b !== void 0 ? b : 0;
      this.end_ = c2 !== void 0 ? this.start_ + c2 : this.bytes_.length;
      this.cursor_ = this.start_;
    };
    jspb.BinaryDecoder.prototype.getEnd = function() {
      return this.end_;
    };
    jspb.BinaryDecoder.prototype.setEnd = function(a2) {
      this.end_ = a2;
    };
    jspb.BinaryDecoder.prototype.reset = function() {
      this.cursor_ = this.start_;
    };
    jspb.BinaryDecoder.prototype.getCursor = function() {
      return this.cursor_;
    };
    jspb.BinaryDecoder.prototype.setCursor = function(a2) {
      this.cursor_ = a2;
    };
    jspb.BinaryDecoder.prototype.advance = function(a2) {
      this.cursor_ += a2;
      goog.asserts.assert(this.cursor_ <= this.end_);
    };
    jspb.BinaryDecoder.prototype.atEnd = function() {
      return this.cursor_ == this.end_;
    };
    jspb.BinaryDecoder.prototype.pastEnd = function() {
      return this.cursor_ > this.end_;
    };
    jspb.BinaryDecoder.prototype.getError = function() {
      return this.error_ || 0 > this.cursor_ || this.cursor_ > this.end_;
    };
    jspb.BinaryDecoder.prototype.readSplitVarint64 = function(a2) {
      for (var b = 128, c2 = 0, d2 = 0, e2 = 0; 4 > e2 && 128 <= b; e2++)
        b = this.bytes_[this.cursor_++], c2 |= (b & 127) << 7 * e2;
      128 <= b && (b = this.bytes_[this.cursor_++], c2 |= (b & 127) << 28, d2 |= (b & 127) >> 4);
      if (128 <= b)
        for (e2 = 0; 5 > e2 && 128 <= b; e2++)
          b = this.bytes_[this.cursor_++], d2 |= (b & 127) << 7 * e2 + 3;
      if (128 > b)
        return a2(c2 >>> 0, d2 >>> 0);
      goog.asserts.fail("Failed to read varint, encoding is invalid.");
      this.error_ = true;
    };
    jspb.BinaryDecoder.prototype.readSplitZigzagVarint64 = function(a2) {
      return this.readSplitVarint64(function(b, c2) {
        return jspb.utils.fromZigzag64(b, c2, a2);
      });
    };
    jspb.BinaryDecoder.prototype.readSplitFixed64 = function(a2) {
      var b = this.bytes_, c2 = this.cursor_;
      this.cursor_ += 8;
      for (var d2 = 0, e2 = 0, f = c2 + 7; f >= c2; f--)
        d2 = d2 << 8 | b[f], e2 = e2 << 8 | b[f + 4];
      return a2(d2, e2);
    };
    jspb.BinaryDecoder.prototype.skipVarint = function() {
      for (; this.bytes_[this.cursor_] & 128; )
        this.cursor_++;
      this.cursor_++;
    };
    jspb.BinaryDecoder.prototype.unskipVarint = function(a2) {
      for (; 128 < a2; )
        this.cursor_--, a2 >>>= 7;
      this.cursor_--;
    };
    jspb.BinaryDecoder.prototype.readUnsignedVarint32 = function() {
      var a2 = this.bytes_;
      var b = a2[this.cursor_ + 0];
      var c2 = b & 127;
      if (128 > b)
        return this.cursor_ += 1, goog.asserts.assert(this.cursor_ <= this.end_), c2;
      b = a2[this.cursor_ + 1];
      c2 |= (b & 127) << 7;
      if (128 > b)
        return this.cursor_ += 2, goog.asserts.assert(this.cursor_ <= this.end_), c2;
      b = a2[this.cursor_ + 2];
      c2 |= (b & 127) << 14;
      if (128 > b)
        return this.cursor_ += 3, goog.asserts.assert(this.cursor_ <= this.end_), c2;
      b = a2[this.cursor_ + 3];
      c2 |= (b & 127) << 21;
      if (128 > b)
        return this.cursor_ += 4, goog.asserts.assert(this.cursor_ <= this.end_), c2;
      b = a2[this.cursor_ + 4];
      c2 |= (b & 15) << 28;
      if (128 > b)
        return this.cursor_ += 5, goog.asserts.assert(this.cursor_ <= this.end_), c2 >>> 0;
      this.cursor_ += 5;
      128 <= a2[this.cursor_++] && 128 <= a2[this.cursor_++] && 128 <= a2[this.cursor_++] && 128 <= a2[this.cursor_++] && 128 <= a2[this.cursor_++] && goog.asserts.assert(false);
      goog.asserts.assert(this.cursor_ <= this.end_);
      return c2;
    };
    jspb.BinaryDecoder.prototype.readSignedVarint32 = jspb.BinaryDecoder.prototype.readUnsignedVarint32;
    jspb.BinaryDecoder.prototype.readUnsignedVarint32String = function() {
      return this.readUnsignedVarint32().toString();
    };
    jspb.BinaryDecoder.prototype.readSignedVarint32String = function() {
      return this.readSignedVarint32().toString();
    };
    jspb.BinaryDecoder.prototype.readZigzagVarint32 = function() {
      var a2 = this.readUnsignedVarint32();
      return a2 >>> 1 ^ -(a2 & 1);
    };
    jspb.BinaryDecoder.prototype.readUnsignedVarint64 = function() {
      return this.readSplitVarint64(jspb.utils.joinUint64);
    };
    jspb.BinaryDecoder.prototype.readUnsignedVarint64String = function() {
      return this.readSplitVarint64(jspb.utils.joinUnsignedDecimalString);
    };
    jspb.BinaryDecoder.prototype.readSignedVarint64 = function() {
      return this.readSplitVarint64(jspb.utils.joinInt64);
    };
    jspb.BinaryDecoder.prototype.readSignedVarint64String = function() {
      return this.readSplitVarint64(jspb.utils.joinSignedDecimalString);
    };
    jspb.BinaryDecoder.prototype.readZigzagVarint64 = function() {
      return this.readSplitVarint64(jspb.utils.joinZigzag64);
    };
    jspb.BinaryDecoder.prototype.readZigzagVarintHash64 = function() {
      return this.readSplitZigzagVarint64(jspb.utils.joinHash64);
    };
    jspb.BinaryDecoder.prototype.readZigzagVarint64String = function() {
      return this.readSplitZigzagVarint64(jspb.utils.joinSignedDecimalString);
    };
    jspb.BinaryDecoder.prototype.readUint8 = function() {
      var a2 = this.bytes_[this.cursor_ + 0];
      this.cursor_ += 1;
      goog.asserts.assert(this.cursor_ <= this.end_);
      return a2;
    };
    jspb.BinaryDecoder.prototype.readUint16 = function() {
      var a2 = this.bytes_[this.cursor_ + 0], b = this.bytes_[this.cursor_ + 1];
      this.cursor_ += 2;
      goog.asserts.assert(this.cursor_ <= this.end_);
      return a2 << 0 | b << 8;
    };
    jspb.BinaryDecoder.prototype.readUint32 = function() {
      var a2 = this.bytes_[this.cursor_ + 0], b = this.bytes_[this.cursor_ + 1], c2 = this.bytes_[this.cursor_ + 2], d2 = this.bytes_[this.cursor_ + 3];
      this.cursor_ += 4;
      goog.asserts.assert(this.cursor_ <= this.end_);
      return (a2 << 0 | b << 8 | c2 << 16 | d2 << 24) >>> 0;
    };
    jspb.BinaryDecoder.prototype.readUint64 = function() {
      var a2 = this.readUint32(), b = this.readUint32();
      return jspb.utils.joinUint64(a2, b);
    };
    jspb.BinaryDecoder.prototype.readUint64String = function() {
      var a2 = this.readUint32(), b = this.readUint32();
      return jspb.utils.joinUnsignedDecimalString(a2, b);
    };
    jspb.BinaryDecoder.prototype.readInt8 = function() {
      var a2 = this.bytes_[this.cursor_ + 0];
      this.cursor_ += 1;
      goog.asserts.assert(this.cursor_ <= this.end_);
      return a2 << 24 >> 24;
    };
    jspb.BinaryDecoder.prototype.readInt16 = function() {
      var a2 = this.bytes_[this.cursor_ + 0], b = this.bytes_[this.cursor_ + 1];
      this.cursor_ += 2;
      goog.asserts.assert(this.cursor_ <= this.end_);
      return (a2 << 0 | b << 8) << 16 >> 16;
    };
    jspb.BinaryDecoder.prototype.readInt32 = function() {
      var a2 = this.bytes_[this.cursor_ + 0], b = this.bytes_[this.cursor_ + 1], c2 = this.bytes_[this.cursor_ + 2], d2 = this.bytes_[this.cursor_ + 3];
      this.cursor_ += 4;
      goog.asserts.assert(this.cursor_ <= this.end_);
      return a2 << 0 | b << 8 | c2 << 16 | d2 << 24;
    };
    jspb.BinaryDecoder.prototype.readInt64 = function() {
      var a2 = this.readUint32(), b = this.readUint32();
      return jspb.utils.joinInt64(a2, b);
    };
    jspb.BinaryDecoder.prototype.readInt64String = function() {
      var a2 = this.readUint32(), b = this.readUint32();
      return jspb.utils.joinSignedDecimalString(a2, b);
    };
    jspb.BinaryDecoder.prototype.readFloat = function() {
      var a2 = this.readUint32();
      return jspb.utils.joinFloat32(a2, 0);
    };
    jspb.BinaryDecoder.prototype.readDouble = function() {
      var a2 = this.readUint32(), b = this.readUint32();
      return jspb.utils.joinFloat64(a2, b);
    };
    jspb.BinaryDecoder.prototype.readBool = function() {
      return !!this.bytes_[this.cursor_++];
    };
    jspb.BinaryDecoder.prototype.readEnum = function() {
      return this.readSignedVarint32();
    };
    jspb.BinaryDecoder.prototype.readString = function(a2) {
      var b = this.bytes_, c2 = this.cursor_;
      a2 = c2 + a2;
      for (var d2 = [], e2 = ""; c2 < a2; ) {
        var f = b[c2++];
        if (128 > f)
          d2.push(f);
        else if (192 > f)
          continue;
        else if (224 > f) {
          var g = b[c2++];
          d2.push((f & 31) << 6 | g & 63);
        } else if (240 > f) {
          g = b[c2++];
          var h2 = b[c2++];
          d2.push((f & 15) << 12 | (g & 63) << 6 | h2 & 63);
        } else if (248 > f) {
          g = b[c2++];
          h2 = b[c2++];
          var k = b[c2++];
          f = (f & 7) << 18 | (g & 63) << 12 | (h2 & 63) << 6 | k & 63;
          f -= 65536;
          d2.push((f >> 10 & 1023) + 55296, (f & 1023) + 56320);
        }
        8192 <= d2.length && (e2 += String.fromCharCode.apply(null, d2), d2.length = 0);
      }
      e2 += goog.crypt.byteArrayToString(d2);
      this.cursor_ = c2;
      return e2;
    };
    jspb.BinaryDecoder.prototype.readStringWithLength = function() {
      var a2 = this.readUnsignedVarint32();
      return this.readString(a2);
    };
    jspb.BinaryDecoder.prototype.readBytes = function(a2) {
      if (0 > a2 || this.cursor_ + a2 > this.bytes_.length)
        return this.error_ = true, goog.asserts.fail("Invalid byte length!"), new Uint8Array(0);
      var b = this.bytes_.subarray(this.cursor_, this.cursor_ + a2);
      this.cursor_ += a2;
      goog.asserts.assert(this.cursor_ <= this.end_);
      return b;
    };
    jspb.BinaryDecoder.prototype.readVarintHash64 = function() {
      return this.readSplitVarint64(jspb.utils.joinHash64);
    };
    jspb.BinaryDecoder.prototype.readFixedHash64 = function() {
      var a2 = this.bytes_, b = this.cursor_, c2 = a2[b + 0], d2 = a2[b + 1], e2 = a2[b + 2], f = a2[b + 3], g = a2[b + 4], h2 = a2[b + 5], k = a2[b + 6];
      a2 = a2[b + 7];
      this.cursor_ += 8;
      return String.fromCharCode(c2, d2, e2, f, g, h2, k, a2);
    };
    jspb.BinaryReader = function(a2, b, c2) {
      this.decoder_ = jspb.BinaryDecoder.alloc(a2, b, c2);
      this.fieldCursor_ = this.decoder_.getCursor();
      this.nextField_ = jspb.BinaryConstants.INVALID_FIELD_NUMBER;
      this.nextWireType_ = jspb.BinaryConstants.WireType.INVALID;
      this.error_ = false;
      this.readCallbacks_ = null;
    };
    jspb.BinaryReader.instanceCache_ = [];
    jspb.BinaryReader.alloc = function(a2, b, c2) {
      if (jspb.BinaryReader.instanceCache_.length) {
        var d2 = jspb.BinaryReader.instanceCache_.pop();
        a2 && d2.decoder_.setBlock(a2, b, c2);
        return d2;
      }
      return new jspb.BinaryReader(a2, b, c2);
    };
    jspb.BinaryReader.prototype.alloc = jspb.BinaryReader.alloc;
    jspb.BinaryReader.prototype.free = function() {
      this.decoder_.clear();
      this.nextField_ = jspb.BinaryConstants.INVALID_FIELD_NUMBER;
      this.nextWireType_ = jspb.BinaryConstants.WireType.INVALID;
      this.error_ = false;
      this.readCallbacks_ = null;
      100 > jspb.BinaryReader.instanceCache_.length && jspb.BinaryReader.instanceCache_.push(this);
    };
    jspb.BinaryReader.prototype.getFieldCursor = function() {
      return this.fieldCursor_;
    };
    jspb.BinaryReader.prototype.getCursor = function() {
      return this.decoder_.getCursor();
    };
    jspb.BinaryReader.prototype.getBuffer = function() {
      return this.decoder_.getBuffer();
    };
    jspb.BinaryReader.prototype.getFieldNumber = function() {
      return this.nextField_;
    };
    jspb.BinaryReader.prototype.getWireType = function() {
      return this.nextWireType_;
    };
    jspb.BinaryReader.prototype.isDelimited = function() {
      return this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED;
    };
    jspb.BinaryReader.prototype.isEndGroup = function() {
      return this.nextWireType_ == jspb.BinaryConstants.WireType.END_GROUP;
    };
    jspb.BinaryReader.prototype.getError = function() {
      return this.error_ || this.decoder_.getError();
    };
    jspb.BinaryReader.prototype.setBlock = function(a2, b, c2) {
      this.decoder_.setBlock(a2, b, c2);
      this.nextField_ = jspb.BinaryConstants.INVALID_FIELD_NUMBER;
      this.nextWireType_ = jspb.BinaryConstants.WireType.INVALID;
    };
    jspb.BinaryReader.prototype.reset = function() {
      this.decoder_.reset();
      this.nextField_ = jspb.BinaryConstants.INVALID_FIELD_NUMBER;
      this.nextWireType_ = jspb.BinaryConstants.WireType.INVALID;
    };
    jspb.BinaryReader.prototype.advance = function(a2) {
      this.decoder_.advance(a2);
    };
    jspb.BinaryReader.prototype.nextField = function() {
      if (this.decoder_.atEnd())
        return false;
      if (this.getError())
        return goog.asserts.fail("Decoder hit an error"), false;
      this.fieldCursor_ = this.decoder_.getCursor();
      var a2 = this.decoder_.readUnsignedVarint32(), b = a2 >>> 3;
      a2 &= 7;
      if (a2 != jspb.BinaryConstants.WireType.VARINT && a2 != jspb.BinaryConstants.WireType.FIXED32 && a2 != jspb.BinaryConstants.WireType.FIXED64 && a2 != jspb.BinaryConstants.WireType.DELIMITED && a2 != jspb.BinaryConstants.WireType.START_GROUP && a2 != jspb.BinaryConstants.WireType.END_GROUP)
        return goog.asserts.fail("Invalid wire type: %s (at position %s)", a2, this.fieldCursor_), this.error_ = true, false;
      this.nextField_ = b;
      this.nextWireType_ = a2;
      return true;
    };
    jspb.BinaryReader.prototype.unskipHeader = function() {
      this.decoder_.unskipVarint(this.nextField_ << 3 | this.nextWireType_);
    };
    jspb.BinaryReader.prototype.skipMatchingFields = function() {
      var a2 = this.nextField_;
      for (this.unskipHeader(); this.nextField() && this.getFieldNumber() == a2; )
        this.skipField();
      this.decoder_.atEnd() || this.unskipHeader();
    };
    jspb.BinaryReader.prototype.skipVarintField = function() {
      this.nextWireType_ != jspb.BinaryConstants.WireType.VARINT ? (goog.asserts.fail("Invalid wire type for skipVarintField"), this.skipField()) : this.decoder_.skipVarint();
    };
    jspb.BinaryReader.prototype.skipDelimitedField = function() {
      if (this.nextWireType_ != jspb.BinaryConstants.WireType.DELIMITED)
        goog.asserts.fail("Invalid wire type for skipDelimitedField"), this.skipField();
      else {
        var a2 = this.decoder_.readUnsignedVarint32();
        this.decoder_.advance(a2);
      }
    };
    jspb.BinaryReader.prototype.skipFixed32Field = function() {
      this.nextWireType_ != jspb.BinaryConstants.WireType.FIXED32 ? (goog.asserts.fail("Invalid wire type for skipFixed32Field"), this.skipField()) : this.decoder_.advance(4);
    };
    jspb.BinaryReader.prototype.skipFixed64Field = function() {
      this.nextWireType_ != jspb.BinaryConstants.WireType.FIXED64 ? (goog.asserts.fail("Invalid wire type for skipFixed64Field"), this.skipField()) : this.decoder_.advance(8);
    };
    jspb.BinaryReader.prototype.skipGroup = function() {
      var a2 = this.nextField_;
      do {
        if (!this.nextField()) {
          goog.asserts.fail("Unmatched start-group tag: stream EOF");
          this.error_ = true;
          break;
        }
        if (this.nextWireType_ == jspb.BinaryConstants.WireType.END_GROUP) {
          this.nextField_ != a2 && (goog.asserts.fail("Unmatched end-group tag"), this.error_ = true);
          break;
        }
        this.skipField();
      } while (1);
    };
    jspb.BinaryReader.prototype.skipField = function() {
      switch (this.nextWireType_) {
        case jspb.BinaryConstants.WireType.VARINT:
          this.skipVarintField();
          break;
        case jspb.BinaryConstants.WireType.FIXED64:
          this.skipFixed64Field();
          break;
        case jspb.BinaryConstants.WireType.DELIMITED:
          this.skipDelimitedField();
          break;
        case jspb.BinaryConstants.WireType.FIXED32:
          this.skipFixed32Field();
          break;
        case jspb.BinaryConstants.WireType.START_GROUP:
          this.skipGroup();
          break;
        default:
          goog.asserts.fail("Invalid wire encoding for field.");
      }
    };
    jspb.BinaryReader.prototype.registerReadCallback = function(a2, b) {
      this.readCallbacks_ === null && (this.readCallbacks_ = {});
      goog.asserts.assert(!this.readCallbacks_[a2]);
      this.readCallbacks_[a2] = b;
    };
    jspb.BinaryReader.prototype.runReadCallback = function(a2) {
      goog.asserts.assert(this.readCallbacks_ !== null);
      a2 = this.readCallbacks_[a2];
      goog.asserts.assert(a2);
      return a2(this);
    };
    jspb.BinaryReader.prototype.readAny = function(a2) {
      this.nextWireType_ = jspb.BinaryConstants.FieldTypeToWireType(a2);
      var b = jspb.BinaryConstants.FieldType;
      switch (a2) {
        case b.DOUBLE:
          return this.readDouble();
        case b.FLOAT:
          return this.readFloat();
        case b.INT64:
          return this.readInt64();
        case b.UINT64:
          return this.readUint64();
        case b.INT32:
          return this.readInt32();
        case b.FIXED64:
          return this.readFixed64();
        case b.FIXED32:
          return this.readFixed32();
        case b.BOOL:
          return this.readBool();
        case b.STRING:
          return this.readString();
        case b.GROUP:
          goog.asserts.fail("Group field type not supported in readAny()");
        case b.MESSAGE:
          goog.asserts.fail("Message field type not supported in readAny()");
        case b.BYTES:
          return this.readBytes();
        case b.UINT32:
          return this.readUint32();
        case b.ENUM:
          return this.readEnum();
        case b.SFIXED32:
          return this.readSfixed32();
        case b.SFIXED64:
          return this.readSfixed64();
        case b.SINT32:
          return this.readSint32();
        case b.SINT64:
          return this.readSint64();
        case b.FHASH64:
          return this.readFixedHash64();
        case b.VHASH64:
          return this.readVarintHash64();
        default:
          goog.asserts.fail("Invalid field type in readAny()");
      }
      return 0;
    };
    jspb.BinaryReader.prototype.readMessage = function(a2, b) {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
      var c2 = this.decoder_.getEnd(), d2 = this.decoder_.readUnsignedVarint32();
      d2 = this.decoder_.getCursor() + d2;
      this.decoder_.setEnd(d2);
      b(a2, this);
      this.decoder_.setCursor(d2);
      this.decoder_.setEnd(c2);
    };
    jspb.BinaryReader.prototype.readGroup = function(a2, b, c2) {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.START_GROUP);
      goog.asserts.assert(this.nextField_ == a2);
      c2(b, this);
      this.error_ || this.nextWireType_ == jspb.BinaryConstants.WireType.END_GROUP || (goog.asserts.fail("Group submessage did not end with an END_GROUP tag"), this.error_ = true);
    };
    jspb.BinaryReader.prototype.getFieldDecoder = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
      var a2 = this.decoder_.readUnsignedVarint32(), b = this.decoder_.getCursor(), c2 = b + a2;
      a2 = jspb.BinaryDecoder.alloc(this.decoder_.getBuffer(), b, a2);
      this.decoder_.setCursor(c2);
      return a2;
    };
    jspb.BinaryReader.prototype.readInt32 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readSignedVarint32();
    };
    jspb.BinaryReader.prototype.readInt32String = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readSignedVarint32String();
    };
    jspb.BinaryReader.prototype.readInt64 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readSignedVarint64();
    };
    jspb.BinaryReader.prototype.readInt64String = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readSignedVarint64String();
    };
    jspb.BinaryReader.prototype.readUint32 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readUnsignedVarint32();
    };
    jspb.BinaryReader.prototype.readUint32String = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readUnsignedVarint32String();
    };
    jspb.BinaryReader.prototype.readUint64 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readUnsignedVarint64();
    };
    jspb.BinaryReader.prototype.readUint64String = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readUnsignedVarint64String();
    };
    jspb.BinaryReader.prototype.readSint32 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readZigzagVarint32();
    };
    jspb.BinaryReader.prototype.readSint64 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readZigzagVarint64();
    };
    jspb.BinaryReader.prototype.readSint64String = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readZigzagVarint64String();
    };
    jspb.BinaryReader.prototype.readFixed32 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED32);
      return this.decoder_.readUint32();
    };
    jspb.BinaryReader.prototype.readFixed64 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
      return this.decoder_.readUint64();
    };
    jspb.BinaryReader.prototype.readFixed64String = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
      return this.decoder_.readUint64String();
    };
    jspb.BinaryReader.prototype.readSfixed32 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED32);
      return this.decoder_.readInt32();
    };
    jspb.BinaryReader.prototype.readSfixed32String = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED32);
      return this.decoder_.readInt32().toString();
    };
    jspb.BinaryReader.prototype.readSfixed64 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
      return this.decoder_.readInt64();
    };
    jspb.BinaryReader.prototype.readSfixed64String = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
      return this.decoder_.readInt64String();
    };
    jspb.BinaryReader.prototype.readFloat = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED32);
      return this.decoder_.readFloat();
    };
    jspb.BinaryReader.prototype.readDouble = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
      return this.decoder_.readDouble();
    };
    jspb.BinaryReader.prototype.readBool = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return !!this.decoder_.readUnsignedVarint32();
    };
    jspb.BinaryReader.prototype.readEnum = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readSignedVarint64();
    };
    jspb.BinaryReader.prototype.readString = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
      var a2 = this.decoder_.readUnsignedVarint32();
      return this.decoder_.readString(a2);
    };
    jspb.BinaryReader.prototype.readBytes = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
      var a2 = this.decoder_.readUnsignedVarint32();
      return this.decoder_.readBytes(a2);
    };
    jspb.BinaryReader.prototype.readVarintHash64 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readVarintHash64();
    };
    jspb.BinaryReader.prototype.readSintHash64 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readZigzagVarintHash64();
    };
    jspb.BinaryReader.prototype.readSplitVarint64 = function(a2) {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readSplitVarint64(a2);
    };
    jspb.BinaryReader.prototype.readSplitZigzagVarint64 = function(a2) {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readSplitVarint64(function(b, c2) {
        return jspb.utils.fromZigzag64(b, c2, a2);
      });
    };
    jspb.BinaryReader.prototype.readFixedHash64 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
      return this.decoder_.readFixedHash64();
    };
    jspb.BinaryReader.prototype.readSplitFixed64 = function(a2) {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
      return this.decoder_.readSplitFixed64(a2);
    };
    jspb.BinaryReader.prototype.readPackedField_ = function(a2) {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
      var b = this.decoder_.readUnsignedVarint32();
      b = this.decoder_.getCursor() + b;
      for (var c2 = []; this.decoder_.getCursor() < b; )
        c2.push(a2.call(this.decoder_));
      return c2;
    };
    jspb.BinaryReader.prototype.readPackedInt32 = function() {
      return this.readPackedField_(this.decoder_.readSignedVarint32);
    };
    jspb.BinaryReader.prototype.readPackedInt32String = function() {
      return this.readPackedField_(this.decoder_.readSignedVarint32String);
    };
    jspb.BinaryReader.prototype.readPackedInt64 = function() {
      return this.readPackedField_(this.decoder_.readSignedVarint64);
    };
    jspb.BinaryReader.prototype.readPackedInt64String = function() {
      return this.readPackedField_(this.decoder_.readSignedVarint64String);
    };
    jspb.BinaryReader.prototype.readPackedUint32 = function() {
      return this.readPackedField_(this.decoder_.readUnsignedVarint32);
    };
    jspb.BinaryReader.prototype.readPackedUint32String = function() {
      return this.readPackedField_(this.decoder_.readUnsignedVarint32String);
    };
    jspb.BinaryReader.prototype.readPackedUint64 = function() {
      return this.readPackedField_(this.decoder_.readUnsignedVarint64);
    };
    jspb.BinaryReader.prototype.readPackedUint64String = function() {
      return this.readPackedField_(this.decoder_.readUnsignedVarint64String);
    };
    jspb.BinaryReader.prototype.readPackedSint32 = function() {
      return this.readPackedField_(this.decoder_.readZigzagVarint32);
    };
    jspb.BinaryReader.prototype.readPackedSint64 = function() {
      return this.readPackedField_(this.decoder_.readZigzagVarint64);
    };
    jspb.BinaryReader.prototype.readPackedSint64String = function() {
      return this.readPackedField_(this.decoder_.readZigzagVarint64String);
    };
    jspb.BinaryReader.prototype.readPackedFixed32 = function() {
      return this.readPackedField_(this.decoder_.readUint32);
    };
    jspb.BinaryReader.prototype.readPackedFixed64 = function() {
      return this.readPackedField_(this.decoder_.readUint64);
    };
    jspb.BinaryReader.prototype.readPackedFixed64String = function() {
      return this.readPackedField_(this.decoder_.readUint64String);
    };
    jspb.BinaryReader.prototype.readPackedSfixed32 = function() {
      return this.readPackedField_(this.decoder_.readInt32);
    };
    jspb.BinaryReader.prototype.readPackedSfixed64 = function() {
      return this.readPackedField_(this.decoder_.readInt64);
    };
    jspb.BinaryReader.prototype.readPackedSfixed64String = function() {
      return this.readPackedField_(this.decoder_.readInt64String);
    };
    jspb.BinaryReader.prototype.readPackedFloat = function() {
      return this.readPackedField_(this.decoder_.readFloat);
    };
    jspb.BinaryReader.prototype.readPackedDouble = function() {
      return this.readPackedField_(this.decoder_.readDouble);
    };
    jspb.BinaryReader.prototype.readPackedBool = function() {
      return this.readPackedField_(this.decoder_.readBool);
    };
    jspb.BinaryReader.prototype.readPackedEnum = function() {
      return this.readPackedField_(this.decoder_.readEnum);
    };
    jspb.BinaryReader.prototype.readPackedVarintHash64 = function() {
      return this.readPackedField_(this.decoder_.readVarintHash64);
    };
    jspb.BinaryReader.prototype.readPackedFixedHash64 = function() {
      return this.readPackedField_(this.decoder_.readFixedHash64);
    };
    jspb.BinaryEncoder = function() {
      this.buffer_ = [];
    };
    jspb.BinaryEncoder.prototype.length = function() {
      return this.buffer_.length;
    };
    jspb.BinaryEncoder.prototype.end = function() {
      var a2 = this.buffer_;
      this.buffer_ = [];
      return a2;
    };
    jspb.BinaryEncoder.prototype.writeSplitVarint64 = function(a2, b) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(b == Math.floor(b));
      goog.asserts.assert(0 <= a2 && a2 < jspb.BinaryConstants.TWO_TO_32);
      for (goog.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_32); 0 < b || 127 < a2; )
        this.buffer_.push(a2 & 127 | 128), a2 = (a2 >>> 7 | b << 25) >>> 0, b >>>= 7;
      this.buffer_.push(a2);
    };
    jspb.BinaryEncoder.prototype.writeSplitFixed64 = function(a2, b) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(b == Math.floor(b));
      goog.asserts.assert(0 <= a2 && a2 < jspb.BinaryConstants.TWO_TO_32);
      goog.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_32);
      this.writeUint32(a2);
      this.writeUint32(b);
    };
    jspb.BinaryEncoder.prototype.writeUnsignedVarint32 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      for (goog.asserts.assert(0 <= a2 && a2 < jspb.BinaryConstants.TWO_TO_32); 127 < a2; )
        this.buffer_.push(a2 & 127 | 128), a2 >>>= 7;
      this.buffer_.push(a2);
    };
    jspb.BinaryEncoder.prototype.writeSignedVarint32 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(a2 >= -jspb.BinaryConstants.TWO_TO_31 && a2 < jspb.BinaryConstants.TWO_TO_31);
      if (0 <= a2)
        this.writeUnsignedVarint32(a2);
      else {
        for (var b = 0; 9 > b; b++)
          this.buffer_.push(a2 & 127 | 128), a2 >>= 7;
        this.buffer_.push(1);
      }
    };
    jspb.BinaryEncoder.prototype.writeUnsignedVarint64 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(0 <= a2 && a2 < jspb.BinaryConstants.TWO_TO_64);
      jspb.utils.splitInt64(a2);
      this.writeSplitVarint64(jspb.utils.split64Low, jspb.utils.split64High);
    };
    jspb.BinaryEncoder.prototype.writeSignedVarint64 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(a2 >= -jspb.BinaryConstants.TWO_TO_63 && a2 < jspb.BinaryConstants.TWO_TO_63);
      jspb.utils.splitInt64(a2);
      this.writeSplitVarint64(jspb.utils.split64Low, jspb.utils.split64High);
    };
    jspb.BinaryEncoder.prototype.writeZigzagVarint32 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(a2 >= -jspb.BinaryConstants.TWO_TO_31 && a2 < jspb.BinaryConstants.TWO_TO_31);
      this.writeUnsignedVarint32((a2 << 1 ^ a2 >> 31) >>> 0);
    };
    jspb.BinaryEncoder.prototype.writeZigzagVarint64 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(a2 >= -jspb.BinaryConstants.TWO_TO_63 && a2 < jspb.BinaryConstants.TWO_TO_63);
      jspb.utils.splitZigzag64(a2);
      this.writeSplitVarint64(jspb.utils.split64Low, jspb.utils.split64High);
    };
    jspb.BinaryEncoder.prototype.writeZigzagVarint64String = function(a2) {
      this.writeZigzagVarintHash64(jspb.utils.decimalStringToHash64(a2));
    };
    jspb.BinaryEncoder.prototype.writeZigzagVarintHash64 = function(a2) {
      var b = this;
      jspb.utils.splitHash64(a2);
      jspb.utils.toZigzag64(jspb.utils.split64Low, jspb.utils.split64High, function(a3, d2) {
        b.writeSplitVarint64(a3 >>> 0, d2 >>> 0);
      });
    };
    jspb.BinaryEncoder.prototype.writeUint8 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(0 <= a2 && 256 > a2);
      this.buffer_.push(a2 >>> 0 & 255);
    };
    jspb.BinaryEncoder.prototype.writeUint16 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(0 <= a2 && 65536 > a2);
      this.buffer_.push(a2 >>> 0 & 255);
      this.buffer_.push(a2 >>> 8 & 255);
    };
    jspb.BinaryEncoder.prototype.writeUint32 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(0 <= a2 && a2 < jspb.BinaryConstants.TWO_TO_32);
      this.buffer_.push(a2 >>> 0 & 255);
      this.buffer_.push(a2 >>> 8 & 255);
      this.buffer_.push(a2 >>> 16 & 255);
      this.buffer_.push(a2 >>> 24 & 255);
    };
    jspb.BinaryEncoder.prototype.writeUint64 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(0 <= a2 && a2 < jspb.BinaryConstants.TWO_TO_64);
      jspb.utils.splitUint64(a2);
      this.writeUint32(jspb.utils.split64Low);
      this.writeUint32(jspb.utils.split64High);
    };
    jspb.BinaryEncoder.prototype.writeInt8 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(-128 <= a2 && 128 > a2);
      this.buffer_.push(a2 >>> 0 & 255);
    };
    jspb.BinaryEncoder.prototype.writeInt16 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(-32768 <= a2 && 32768 > a2);
      this.buffer_.push(a2 >>> 0 & 255);
      this.buffer_.push(a2 >>> 8 & 255);
    };
    jspb.BinaryEncoder.prototype.writeInt32 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(a2 >= -jspb.BinaryConstants.TWO_TO_31 && a2 < jspb.BinaryConstants.TWO_TO_31);
      this.buffer_.push(a2 >>> 0 & 255);
      this.buffer_.push(a2 >>> 8 & 255);
      this.buffer_.push(a2 >>> 16 & 255);
      this.buffer_.push(a2 >>> 24 & 255);
    };
    jspb.BinaryEncoder.prototype.writeInt64 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(a2 >= -jspb.BinaryConstants.TWO_TO_63 && a2 < jspb.BinaryConstants.TWO_TO_63);
      jspb.utils.splitInt64(a2);
      this.writeSplitFixed64(jspb.utils.split64Low, jspb.utils.split64High);
    };
    jspb.BinaryEncoder.prototype.writeInt64String = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(+a2 >= -jspb.BinaryConstants.TWO_TO_63 && +a2 < jspb.BinaryConstants.TWO_TO_63);
      jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a2));
      this.writeSplitFixed64(jspb.utils.split64Low, jspb.utils.split64High);
    };
    jspb.BinaryEncoder.prototype.writeFloat = function(a2) {
      goog.asserts.assert(a2 === Infinity || a2 === -Infinity || isNaN(a2) || a2 >= -jspb.BinaryConstants.FLOAT32_MAX && a2 <= jspb.BinaryConstants.FLOAT32_MAX);
      jspb.utils.splitFloat32(a2);
      this.writeUint32(jspb.utils.split64Low);
    };
    jspb.BinaryEncoder.prototype.writeDouble = function(a2) {
      goog.asserts.assert(a2 === Infinity || a2 === -Infinity || isNaN(a2) || a2 >= -jspb.BinaryConstants.FLOAT64_MAX && a2 <= jspb.BinaryConstants.FLOAT64_MAX);
      jspb.utils.splitFloat64(a2);
      this.writeUint32(jspb.utils.split64Low);
      this.writeUint32(jspb.utils.split64High);
    };
    jspb.BinaryEncoder.prototype.writeBool = function(a2) {
      goog.asserts.assert(typeof a2 === "boolean" || typeof a2 === "number");
      this.buffer_.push(a2 ? 1 : 0);
    };
    jspb.BinaryEncoder.prototype.writeEnum = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(a2 >= -jspb.BinaryConstants.TWO_TO_31 && a2 < jspb.BinaryConstants.TWO_TO_31);
      this.writeSignedVarint32(a2);
    };
    jspb.BinaryEncoder.prototype.writeBytes = function(a2) {
      this.buffer_.push.apply(this.buffer_, a2);
    };
    jspb.BinaryEncoder.prototype.writeVarintHash64 = function(a2) {
      jspb.utils.splitHash64(a2);
      this.writeSplitVarint64(jspb.utils.split64Low, jspb.utils.split64High);
    };
    jspb.BinaryEncoder.prototype.writeFixedHash64 = function(a2) {
      jspb.utils.splitHash64(a2);
      this.writeUint32(jspb.utils.split64Low);
      this.writeUint32(jspb.utils.split64High);
    };
    jspb.BinaryEncoder.prototype.writeString = function(a2) {
      for (var b = this.buffer_.length, c2 = 0; c2 < a2.length; c2++) {
        var d2 = a2.charCodeAt(c2);
        if (128 > d2)
          this.buffer_.push(d2);
        else if (2048 > d2)
          this.buffer_.push(d2 >> 6 | 192), this.buffer_.push(d2 & 63 | 128);
        else if (65536 > d2)
          if (55296 <= d2 && 56319 >= d2 && c2 + 1 < a2.length) {
            var e2 = a2.charCodeAt(c2 + 1);
            56320 <= e2 && 57343 >= e2 && (d2 = 1024 * (d2 - 55296) + e2 - 56320 + 65536, this.buffer_.push(d2 >> 18 | 240), this.buffer_.push(d2 >> 12 & 63 | 128), this.buffer_.push(d2 >> 6 & 63 | 128), this.buffer_.push(d2 & 63 | 128), c2++);
          } else
            this.buffer_.push(d2 >> 12 | 224), this.buffer_.push(d2 >> 6 & 63 | 128), this.buffer_.push(d2 & 63 | 128);
      }
      return this.buffer_.length - b;
    };
    jspb.arith = {};
    jspb.arith.UInt64 = function(a2, b) {
      this.lo = a2;
      this.hi = b;
    };
    jspb.arith.UInt64.prototype.cmp = function(a2) {
      return this.hi < a2.hi || this.hi == a2.hi && this.lo < a2.lo ? -1 : this.hi == a2.hi && this.lo == a2.lo ? 0 : 1;
    };
    jspb.arith.UInt64.prototype.rightShift = function() {
      return new jspb.arith.UInt64((this.lo >>> 1 | (this.hi & 1) << 31) >>> 0, this.hi >>> 1 >>> 0);
    };
    jspb.arith.UInt64.prototype.leftShift = function() {
      return new jspb.arith.UInt64(this.lo << 1 >>> 0, (this.hi << 1 | this.lo >>> 31) >>> 0);
    };
    jspb.arith.UInt64.prototype.msb = function() {
      return !!(this.hi & 2147483648);
    };
    jspb.arith.UInt64.prototype.lsb = function() {
      return !!(this.lo & 1);
    };
    jspb.arith.UInt64.prototype.zero = function() {
      return this.lo == 0 && this.hi == 0;
    };
    jspb.arith.UInt64.prototype.add = function(a2) {
      return new jspb.arith.UInt64((this.lo + a2.lo & 4294967295) >>> 0 >>> 0, ((this.hi + a2.hi & 4294967295) >>> 0) + (4294967296 <= this.lo + a2.lo ? 1 : 0) >>> 0);
    };
    jspb.arith.UInt64.prototype.sub = function(a2) {
      return new jspb.arith.UInt64((this.lo - a2.lo & 4294967295) >>> 0 >>> 0, ((this.hi - a2.hi & 4294967295) >>> 0) - (0 > this.lo - a2.lo ? 1 : 0) >>> 0);
    };
    jspb.arith.UInt64.mul32x32 = function(a2, b) {
      var c2 = a2 & 65535;
      a2 >>>= 16;
      var d2 = b & 65535, e2 = b >>> 16;
      b = c2 * d2 + 65536 * (c2 * e2 & 65535) + 65536 * (a2 * d2 & 65535);
      for (c2 = a2 * e2 + (c2 * e2 >>> 16) + (a2 * d2 >>> 16); 4294967296 <= b; )
        b -= 4294967296, c2 += 1;
      return new jspb.arith.UInt64(b >>> 0, c2 >>> 0);
    };
    jspb.arith.UInt64.prototype.mul = function(a2) {
      var b = jspb.arith.UInt64.mul32x32(this.lo, a2);
      a2 = jspb.arith.UInt64.mul32x32(this.hi, a2);
      a2.hi = a2.lo;
      a2.lo = 0;
      return b.add(a2);
    };
    jspb.arith.UInt64.prototype.div = function(a2) {
      if (a2 == 0)
        return [];
      var b = new jspb.arith.UInt64(0, 0), c2 = new jspb.arith.UInt64(this.lo, this.hi);
      a2 = new jspb.arith.UInt64(a2, 0);
      for (var d2 = new jspb.arith.UInt64(1, 0); !a2.msb(); )
        a2 = a2.leftShift(), d2 = d2.leftShift();
      for (; !d2.zero(); )
        0 >= a2.cmp(c2) && (b = b.add(d2), c2 = c2.sub(a2)), a2 = a2.rightShift(), d2 = d2.rightShift();
      return [b, c2];
    };
    jspb.arith.UInt64.prototype.toString = function() {
      for (var a2 = "", b = this; !b.zero(); ) {
        b = b.div(10);
        var c2 = b[0];
        a2 = b[1].lo + a2;
        b = c2;
      }
      a2 == "" && (a2 = "0");
      return a2;
    };
    jspb.arith.UInt64.fromString = function(a2) {
      for (var b = new jspb.arith.UInt64(0, 0), c2 = new jspb.arith.UInt64(0, 0), d2 = 0; d2 < a2.length; d2++) {
        if ("0" > a2[d2] || "9" < a2[d2])
          return null;
        var e2 = parseInt(a2[d2], 10);
        c2.lo = e2;
        b = b.mul(10).add(c2);
      }
      return b;
    };
    jspb.arith.UInt64.prototype.clone = function() {
      return new jspb.arith.UInt64(this.lo, this.hi);
    };
    jspb.arith.Int64 = function(a2, b) {
      this.lo = a2;
      this.hi = b;
    };
    jspb.arith.Int64.prototype.add = function(a2) {
      return new jspb.arith.Int64((this.lo + a2.lo & 4294967295) >>> 0 >>> 0, ((this.hi + a2.hi & 4294967295) >>> 0) + (4294967296 <= this.lo + a2.lo ? 1 : 0) >>> 0);
    };
    jspb.arith.Int64.prototype.sub = function(a2) {
      return new jspb.arith.Int64((this.lo - a2.lo & 4294967295) >>> 0 >>> 0, ((this.hi - a2.hi & 4294967295) >>> 0) - (0 > this.lo - a2.lo ? 1 : 0) >>> 0);
    };
    jspb.arith.Int64.prototype.clone = function() {
      return new jspb.arith.Int64(this.lo, this.hi);
    };
    jspb.arith.Int64.prototype.toString = function() {
      var a2 = (this.hi & 2147483648) != 0, b = new jspb.arith.UInt64(this.lo, this.hi);
      a2 && (b = new jspb.arith.UInt64(0, 0).sub(b));
      return (a2 ? "-" : "") + b.toString();
    };
    jspb.arith.Int64.fromString = function(a2) {
      var b = 0 < a2.length && a2[0] == "-";
      b && (a2 = a2.substring(1));
      a2 = jspb.arith.UInt64.fromString(a2);
      if (a2 === null)
        return null;
      b && (a2 = new jspb.arith.UInt64(0, 0).sub(a2));
      return new jspb.arith.Int64(a2.lo, a2.hi);
    };
    jspb.BinaryWriter = function() {
      this.blocks_ = [];
      this.totalLength_ = 0;
      this.encoder_ = new jspb.BinaryEncoder();
      this.bookmarks_ = [];
    };
    jspb.BinaryWriter.prototype.appendUint8Array_ = function(a2) {
      var b = this.encoder_.end();
      this.blocks_.push(b);
      this.blocks_.push(a2);
      this.totalLength_ += b.length + a2.length;
    };
    jspb.BinaryWriter.prototype.beginDelimited_ = function(a2) {
      this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.DELIMITED);
      a2 = this.encoder_.end();
      this.blocks_.push(a2);
      this.totalLength_ += a2.length;
      a2.push(this.totalLength_);
      return a2;
    };
    jspb.BinaryWriter.prototype.endDelimited_ = function(a2) {
      var b = a2.pop();
      b = this.totalLength_ + this.encoder_.length() - b;
      for (goog.asserts.assert(0 <= b); 127 < b; )
        a2.push(b & 127 | 128), b >>>= 7, this.totalLength_++;
      a2.push(b);
      this.totalLength_++;
    };
    jspb.BinaryWriter.prototype.writeSerializedMessage = function(a2, b, c2) {
      this.appendUint8Array_(a2.subarray(b, c2));
    };
    jspb.BinaryWriter.prototype.maybeWriteSerializedMessage = function(a2, b, c2) {
      a2 != null && b != null && c2 != null && this.writeSerializedMessage(a2, b, c2);
    };
    jspb.BinaryWriter.prototype.reset = function() {
      this.blocks_ = [];
      this.encoder_.end();
      this.totalLength_ = 0;
      this.bookmarks_ = [];
    };
    jspb.BinaryWriter.prototype.getResultBuffer = function() {
      goog.asserts.assert(this.bookmarks_.length == 0);
      for (var a2 = new Uint8Array(this.totalLength_ + this.encoder_.length()), b = this.blocks_, c2 = b.length, d2 = 0, e2 = 0; e2 < c2; e2++) {
        var f = b[e2];
        a2.set(f, d2);
        d2 += f.length;
      }
      b = this.encoder_.end();
      a2.set(b, d2);
      d2 += b.length;
      goog.asserts.assert(d2 == a2.length);
      this.blocks_ = [a2];
      return a2;
    };
    jspb.BinaryWriter.prototype.getResultBase64String = function(a2) {
      return goog.crypt.base64.encodeByteArray(this.getResultBuffer(), a2);
    };
    jspb.BinaryWriter.prototype.beginSubMessage = function(a2) {
      this.bookmarks_.push(this.beginDelimited_(a2));
    };
    jspb.BinaryWriter.prototype.endSubMessage = function() {
      goog.asserts.assert(0 <= this.bookmarks_.length);
      this.endDelimited_(this.bookmarks_.pop());
    };
    jspb.BinaryWriter.prototype.writeFieldHeader_ = function(a2, b) {
      goog.asserts.assert(1 <= a2 && a2 == Math.floor(a2));
      this.encoder_.writeUnsignedVarint32(8 * a2 + b);
    };
    jspb.BinaryWriter.prototype.writeAny = function(a2, b, c2) {
      var d2 = jspb.BinaryConstants.FieldType;
      switch (a2) {
        case d2.DOUBLE:
          this.writeDouble(b, c2);
          break;
        case d2.FLOAT:
          this.writeFloat(b, c2);
          break;
        case d2.INT64:
          this.writeInt64(b, c2);
          break;
        case d2.UINT64:
          this.writeUint64(b, c2);
          break;
        case d2.INT32:
          this.writeInt32(b, c2);
          break;
        case d2.FIXED64:
          this.writeFixed64(b, c2);
          break;
        case d2.FIXED32:
          this.writeFixed32(b, c2);
          break;
        case d2.BOOL:
          this.writeBool(b, c2);
          break;
        case d2.STRING:
          this.writeString(b, c2);
          break;
        case d2.GROUP:
          goog.asserts.fail("Group field type not supported in writeAny()");
          break;
        case d2.MESSAGE:
          goog.asserts.fail("Message field type not supported in writeAny()");
          break;
        case d2.BYTES:
          this.writeBytes(b, c2);
          break;
        case d2.UINT32:
          this.writeUint32(b, c2);
          break;
        case d2.ENUM:
          this.writeEnum(b, c2);
          break;
        case d2.SFIXED32:
          this.writeSfixed32(b, c2);
          break;
        case d2.SFIXED64:
          this.writeSfixed64(b, c2);
          break;
        case d2.SINT32:
          this.writeSint32(b, c2);
          break;
        case d2.SINT64:
          this.writeSint64(b, c2);
          break;
        case d2.FHASH64:
          this.writeFixedHash64(b, c2);
          break;
        case d2.VHASH64:
          this.writeVarintHash64(b, c2);
          break;
        default:
          goog.asserts.fail("Invalid field type in writeAny()");
      }
    };
    jspb.BinaryWriter.prototype.writeUnsignedVarint32_ = function(a2, b) {
      b != null && (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeUnsignedVarint32(b));
    };
    jspb.BinaryWriter.prototype.writeSignedVarint32_ = function(a2, b) {
      b != null && (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSignedVarint32(b));
    };
    jspb.BinaryWriter.prototype.writeUnsignedVarint64_ = function(a2, b) {
      b != null && (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeUnsignedVarint64(b));
    };
    jspb.BinaryWriter.prototype.writeSignedVarint64_ = function(a2, b) {
      b != null && (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSignedVarint64(b));
    };
    jspb.BinaryWriter.prototype.writeZigzagVarint32_ = function(a2, b) {
      b != null && (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeZigzagVarint32(b));
    };
    jspb.BinaryWriter.prototype.writeZigzagVarint64_ = function(a2, b) {
      b != null && (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeZigzagVarint64(b));
    };
    jspb.BinaryWriter.prototype.writeZigzagVarint64String_ = function(a2, b) {
      b != null && (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeZigzagVarint64String(b));
    };
    jspb.BinaryWriter.prototype.writeZigzagVarintHash64_ = function(a2, b) {
      b != null && (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeZigzagVarintHash64(b));
    };
    jspb.BinaryWriter.prototype.writeInt32 = function(a2, b) {
      b != null && (goog.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_31 && b < jspb.BinaryConstants.TWO_TO_31), this.writeSignedVarint32_(a2, b));
    };
    jspb.BinaryWriter.prototype.writeInt32String = function(a2, b) {
      b != null && (b = parseInt(b, 10), goog.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_31 && b < jspb.BinaryConstants.TWO_TO_31), this.writeSignedVarint32_(a2, b));
    };
    jspb.BinaryWriter.prototype.writeInt64 = function(a2, b) {
      b != null && (goog.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_63 && b < jspb.BinaryConstants.TWO_TO_63), this.writeSignedVarint64_(a2, b));
    };
    jspb.BinaryWriter.prototype.writeInt64String = function(a2, b) {
      b != null && (b = jspb.arith.Int64.fromString(b), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSplitVarint64(b.lo, b.hi));
    };
    jspb.BinaryWriter.prototype.writeUint32 = function(a2, b) {
      b != null && (goog.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_32), this.writeUnsignedVarint32_(a2, b));
    };
    jspb.BinaryWriter.prototype.writeUint32String = function(a2, b) {
      b != null && (b = parseInt(b, 10), goog.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_32), this.writeUnsignedVarint32_(a2, b));
    };
    jspb.BinaryWriter.prototype.writeUint64 = function(a2, b) {
      b != null && (goog.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_64), this.writeUnsignedVarint64_(a2, b));
    };
    jspb.BinaryWriter.prototype.writeUint64String = function(a2, b) {
      b != null && (b = jspb.arith.UInt64.fromString(b), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSplitVarint64(b.lo, b.hi));
    };
    jspb.BinaryWriter.prototype.writeSint32 = function(a2, b) {
      b != null && (goog.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_31 && b < jspb.BinaryConstants.TWO_TO_31), this.writeZigzagVarint32_(a2, b));
    };
    jspb.BinaryWriter.prototype.writeSint64 = function(a2, b) {
      b != null && (goog.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_63 && b < jspb.BinaryConstants.TWO_TO_63), this.writeZigzagVarint64_(a2, b));
    };
    jspb.BinaryWriter.prototype.writeSintHash64 = function(a2, b) {
      b != null && this.writeZigzagVarintHash64_(a2, b);
    };
    jspb.BinaryWriter.prototype.writeSint64String = function(a2, b) {
      b != null && this.writeZigzagVarint64String_(a2, b);
    };
    jspb.BinaryWriter.prototype.writeFixed32 = function(a2, b) {
      b != null && (goog.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_32), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.FIXED32), this.encoder_.writeUint32(b));
    };
    jspb.BinaryWriter.prototype.writeFixed64 = function(a2, b) {
      b != null && (goog.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_64), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeUint64(b));
    };
    jspb.BinaryWriter.prototype.writeFixed64String = function(a2, b) {
      b != null && (b = jspb.arith.UInt64.fromString(b), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeSplitFixed64(b.lo, b.hi));
    };
    jspb.BinaryWriter.prototype.writeSfixed32 = function(a2, b) {
      b != null && (goog.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_31 && b < jspb.BinaryConstants.TWO_TO_31), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.FIXED32), this.encoder_.writeInt32(b));
    };
    jspb.BinaryWriter.prototype.writeSfixed64 = function(a2, b) {
      b != null && (goog.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_63 && b < jspb.BinaryConstants.TWO_TO_63), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeInt64(b));
    };
    jspb.BinaryWriter.prototype.writeSfixed64String = function(a2, b) {
      b != null && (b = jspb.arith.Int64.fromString(b), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeSplitFixed64(b.lo, b.hi));
    };
    jspb.BinaryWriter.prototype.writeFloat = function(a2, b) {
      b != null && (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.FIXED32), this.encoder_.writeFloat(b));
    };
    jspb.BinaryWriter.prototype.writeDouble = function(a2, b) {
      b != null && (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeDouble(b));
    };
    jspb.BinaryWriter.prototype.writeBool = function(a2, b) {
      b != null && (goog.asserts.assert(typeof b === "boolean" || typeof b === "number"), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeBool(b));
    };
    jspb.BinaryWriter.prototype.writeEnum = function(a2, b) {
      b != null && (goog.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_31 && b < jspb.BinaryConstants.TWO_TO_31), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSignedVarint32(b));
    };
    jspb.BinaryWriter.prototype.writeString = function(a2, b) {
      b != null && (a2 = this.beginDelimited_(a2), this.encoder_.writeString(b), this.endDelimited_(a2));
    };
    jspb.BinaryWriter.prototype.writeBytes = function(a2, b) {
      b != null && (b = jspb.utils.byteSourceToUint8Array(b), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(b.length), this.appendUint8Array_(b));
    };
    jspb.BinaryWriter.prototype.writeMessage = function(a2, b, c2) {
      b != null && (a2 = this.beginDelimited_(a2), c2(b, this), this.endDelimited_(a2));
    };
    jspb.BinaryWriter.prototype.writeMessageSet = function(a2, b, c2) {
      b != null && (this.writeFieldHeader_(1, jspb.BinaryConstants.WireType.START_GROUP), this.writeFieldHeader_(2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSignedVarint32(a2), a2 = this.beginDelimited_(3), c2(b, this), this.endDelimited_(a2), this.writeFieldHeader_(1, jspb.BinaryConstants.WireType.END_GROUP));
    };
    jspb.BinaryWriter.prototype.writeGroup = function(a2, b, c2) {
      b != null && (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.START_GROUP), c2(b, this), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.END_GROUP));
    };
    jspb.BinaryWriter.prototype.writeFixedHash64 = function(a2, b) {
      b != null && (goog.asserts.assert(b.length == 8), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeFixedHash64(b));
    };
    jspb.BinaryWriter.prototype.writeVarintHash64 = function(a2, b) {
      b != null && (goog.asserts.assert(b.length == 8), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeVarintHash64(b));
    };
    jspb.BinaryWriter.prototype.writeSplitFixed64 = function(a2, b, c2) {
      this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.FIXED64);
      this.encoder_.writeSplitFixed64(b, c2);
    };
    jspb.BinaryWriter.prototype.writeSplitVarint64 = function(a2, b, c2) {
      this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT);
      this.encoder_.writeSplitVarint64(b, c2);
    };
    jspb.BinaryWriter.prototype.writeSplitZigzagVarint64 = function(a2, b, c2) {
      this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT);
      var d2 = this.encoder_;
      jspb.utils.toZigzag64(b, c2, function(a3, b2) {
        d2.writeSplitVarint64(a3 >>> 0, b2 >>> 0);
      });
    };
    jspb.BinaryWriter.prototype.writeRepeatedInt32 = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeSignedVarint32_(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedInt32String = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeInt32String(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedInt64 = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeSignedVarint64_(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedSplitFixed64 = function(a2, b, c2, d2) {
      if (b != null)
        for (var e2 = 0; e2 < b.length; e2++)
          this.writeSplitFixed64(a2, c2(b[e2]), d2(b[e2]));
    };
    jspb.BinaryWriter.prototype.writeRepeatedSplitVarint64 = function(a2, b, c2, d2) {
      if (b != null)
        for (var e2 = 0; e2 < b.length; e2++)
          this.writeSplitVarint64(a2, c2(b[e2]), d2(b[e2]));
    };
    jspb.BinaryWriter.prototype.writeRepeatedSplitZigzagVarint64 = function(a2, b, c2, d2) {
      if (b != null)
        for (var e2 = 0; e2 < b.length; e2++)
          this.writeSplitZigzagVarint64(a2, c2(b[e2]), d2(b[e2]));
    };
    jspb.BinaryWriter.prototype.writeRepeatedInt64String = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeInt64String(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedUint32 = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeUnsignedVarint32_(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedUint32String = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeUint32String(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedUint64 = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeUnsignedVarint64_(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedUint64String = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeUint64String(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedSint32 = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeZigzagVarint32_(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedSint64 = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeZigzagVarint64_(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedSint64String = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeZigzagVarint64String_(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedSintHash64 = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeZigzagVarintHash64_(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedFixed32 = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeFixed32(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedFixed64 = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeFixed64(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedFixed64String = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeFixed64String(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedSfixed32 = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeSfixed32(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedSfixed64 = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeSfixed64(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedSfixed64String = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeSfixed64String(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedFloat = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeFloat(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedDouble = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeDouble(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedBool = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeBool(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedEnum = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeEnum(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedString = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeString(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedBytes = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeBytes(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedMessage = function(a2, b, c2) {
      if (b != null)
        for (var d2 = 0; d2 < b.length; d2++) {
          var e2 = this.beginDelimited_(a2);
          c2(b[d2], this);
          this.endDelimited_(e2);
        }
    };
    jspb.BinaryWriter.prototype.writeRepeatedGroup = function(a2, b, c2) {
      if (b != null)
        for (var d2 = 0; d2 < b.length; d2++)
          this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.START_GROUP), c2(b[d2], this), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.END_GROUP);
    };
    jspb.BinaryWriter.prototype.writeRepeatedFixedHash64 = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeFixedHash64(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedVarintHash64 = function(a2, b) {
      if (b != null)
        for (var c2 = 0; c2 < b.length; c2++)
          this.writeVarintHash64(a2, b[c2]);
    };
    jspb.BinaryWriter.prototype.writePackedInt32 = function(a2, b) {
      if (b != null && b.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b.length; c2++)
          this.encoder_.writeSignedVarint32(b[c2]);
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedInt32String = function(a2, b) {
      if (b != null && b.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b.length; c2++)
          this.encoder_.writeSignedVarint32(parseInt(b[c2], 10));
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedInt64 = function(a2, b) {
      if (b != null && b.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b.length; c2++)
          this.encoder_.writeSignedVarint64(b[c2]);
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedSplitFixed64 = function(a2, b, c2, d2) {
      if (b != null) {
        a2 = this.beginDelimited_(a2);
        for (var e2 = 0; e2 < b.length; e2++)
          this.encoder_.writeSplitFixed64(c2(b[e2]), d2(b[e2]));
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedSplitVarint64 = function(a2, b, c2, d2) {
      if (b != null) {
        a2 = this.beginDelimited_(a2);
        for (var e2 = 0; e2 < b.length; e2++)
          this.encoder_.writeSplitVarint64(c2(b[e2]), d2(b[e2]));
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedSplitZigzagVarint64 = function(a2, b, c2, d2) {
      if (b != null) {
        a2 = this.beginDelimited_(a2);
        for (var e2 = this.encoder_, f = 0; f < b.length; f++)
          jspb.utils.toZigzag64(c2(b[f]), d2(b[f]), function(a3, b2) {
            e2.writeSplitVarint64(a3 >>> 0, b2 >>> 0);
          });
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedInt64String = function(a2, b) {
      if (b != null && b.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b.length; c2++) {
          var d2 = jspb.arith.Int64.fromString(b[c2]);
          this.encoder_.writeSplitVarint64(d2.lo, d2.hi);
        }
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedUint32 = function(a2, b) {
      if (b != null && b.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b.length; c2++)
          this.encoder_.writeUnsignedVarint32(b[c2]);
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedUint32String = function(a2, b) {
      if (b != null && b.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b.length; c2++)
          this.encoder_.writeUnsignedVarint32(parseInt(b[c2], 10));
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedUint64 = function(a2, b) {
      if (b != null && b.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b.length; c2++)
          this.encoder_.writeUnsignedVarint64(b[c2]);
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedUint64String = function(a2, b) {
      if (b != null && b.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b.length; c2++) {
          var d2 = jspb.arith.UInt64.fromString(b[c2]);
          this.encoder_.writeSplitVarint64(d2.lo, d2.hi);
        }
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedSint32 = function(a2, b) {
      if (b != null && b.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b.length; c2++)
          this.encoder_.writeZigzagVarint32(b[c2]);
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedSint64 = function(a2, b) {
      if (b != null && b.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b.length; c2++)
          this.encoder_.writeZigzagVarint64(b[c2]);
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedSint64String = function(a2, b) {
      if (b != null && b.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b.length; c2++)
          this.encoder_.writeZigzagVarintHash64(jspb.utils.decimalStringToHash64(b[c2]));
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedSintHash64 = function(a2, b) {
      if (b != null && b.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b.length; c2++)
          this.encoder_.writeZigzagVarintHash64(b[c2]);
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedFixed32 = function(a2, b) {
      if (b != null && b.length)
        for (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(4 * b.length), a2 = 0; a2 < b.length; a2++)
          this.encoder_.writeUint32(b[a2]);
    };
    jspb.BinaryWriter.prototype.writePackedFixed64 = function(a2, b) {
      if (b != null && b.length)
        for (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * b.length), a2 = 0; a2 < b.length; a2++)
          this.encoder_.writeUint64(b[a2]);
    };
    jspb.BinaryWriter.prototype.writePackedFixed64String = function(a2, b) {
      if (b != null && b.length)
        for (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * b.length), a2 = 0; a2 < b.length; a2++) {
          var c2 = jspb.arith.UInt64.fromString(b[a2]);
          this.encoder_.writeSplitFixed64(c2.lo, c2.hi);
        }
    };
    jspb.BinaryWriter.prototype.writePackedSfixed32 = function(a2, b) {
      if (b != null && b.length)
        for (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(4 * b.length), a2 = 0; a2 < b.length; a2++)
          this.encoder_.writeInt32(b[a2]);
    };
    jspb.BinaryWriter.prototype.writePackedSfixed64 = function(a2, b) {
      if (b != null && b.length)
        for (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * b.length), a2 = 0; a2 < b.length; a2++)
          this.encoder_.writeInt64(b[a2]);
    };
    jspb.BinaryWriter.prototype.writePackedSfixed64String = function(a2, b) {
      if (b != null && b.length)
        for (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * b.length), a2 = 0; a2 < b.length; a2++)
          this.encoder_.writeInt64String(b[a2]);
    };
    jspb.BinaryWriter.prototype.writePackedFloat = function(a2, b) {
      if (b != null && b.length)
        for (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(4 * b.length), a2 = 0; a2 < b.length; a2++)
          this.encoder_.writeFloat(b[a2]);
    };
    jspb.BinaryWriter.prototype.writePackedDouble = function(a2, b) {
      if (b != null && b.length)
        for (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * b.length), a2 = 0; a2 < b.length; a2++)
          this.encoder_.writeDouble(b[a2]);
    };
    jspb.BinaryWriter.prototype.writePackedBool = function(a2, b) {
      if (b != null && b.length)
        for (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(b.length), a2 = 0; a2 < b.length; a2++)
          this.encoder_.writeBool(b[a2]);
    };
    jspb.BinaryWriter.prototype.writePackedEnum = function(a2, b) {
      if (b != null && b.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b.length; c2++)
          this.encoder_.writeEnum(b[c2]);
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedFixedHash64 = function(a2, b) {
      if (b != null && b.length)
        for (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * b.length), a2 = 0; a2 < b.length; a2++)
          this.encoder_.writeFixedHash64(b[a2]);
    };
    jspb.BinaryWriter.prototype.writePackedVarintHash64 = function(a2, b) {
      if (b != null && b.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b.length; c2++)
          this.encoder_.writeVarintHash64(b[c2]);
        this.endDelimited_(a2);
      }
    };
    jspb.Map = function(a2, b) {
      this.arr_ = a2;
      this.valueCtor_ = b;
      this.map_ = {};
      this.arrClean = true;
      0 < this.arr_.length && this.loadFromArray_();
    };
    jspb.Map.prototype.loadFromArray_ = function() {
      for (var a2 = 0; a2 < this.arr_.length; a2++) {
        var b = this.arr_[a2], c2 = b[0];
        this.map_[c2.toString()] = new jspb.Map.Entry_(c2, b[1]);
      }
      this.arrClean = true;
    };
    jspb.Map.prototype.toArray = function() {
      if (this.arrClean) {
        if (this.valueCtor_) {
          var a2 = this.map_, b;
          for (b in a2)
            if (Object.prototype.hasOwnProperty.call(a2, b)) {
              var c2 = a2[b].valueWrapper;
              c2 && c2.toArray();
            }
        }
      } else {
        this.arr_.length = 0;
        a2 = this.stringKeys_();
        a2.sort();
        for (b = 0; b < a2.length; b++) {
          var d2 = this.map_[a2[b]];
          (c2 = d2.valueWrapper) && c2.toArray();
          this.arr_.push([d2.key, d2.value]);
        }
        this.arrClean = true;
      }
      return this.arr_;
    };
    jspb.Map.prototype.toObject = function(a2, b) {
      for (var c2 = this.toArray(), d2 = [], e2 = 0; e2 < c2.length; e2++) {
        var f = this.map_[c2[e2][0].toString()];
        this.wrapEntry_(f);
        var g = f.valueWrapper;
        g ? (goog.asserts.assert(b), d2.push([f.key, b(a2, g)])) : d2.push([f.key, f.value]);
      }
      return d2;
    };
    jspb.Map.fromObject = function(a2, b, c2) {
      b = new jspb.Map([], b);
      for (var d2 = 0; d2 < a2.length; d2++) {
        var e2 = a2[d2][0], f = c2(a2[d2][1]);
        b.set(e2, f);
      }
      return b;
    };
    jspb.Map.ArrayIteratorIterable_ = function(a2) {
      this.idx_ = 0;
      this.arr_ = a2;
    };
    jspb.Map.ArrayIteratorIterable_.prototype.next = function() {
      return this.idx_ < this.arr_.length ? { done: false, value: this.arr_[this.idx_++] } : { done: true, value: void 0 };
    };
    typeof Symbol != "undefined" && (jspb.Map.ArrayIteratorIterable_.prototype[Symbol.iterator] = function() {
      return this;
    });
    jspb.Map.prototype.getLength = function() {
      return this.stringKeys_().length;
    };
    jspb.Map.prototype.clear = function() {
      this.map_ = {};
      this.arrClean = false;
    };
    jspb.Map.prototype.del = function(a2) {
      a2 = a2.toString();
      var b = this.map_.hasOwnProperty(a2);
      delete this.map_[a2];
      this.arrClean = false;
      return b;
    };
    jspb.Map.prototype.getEntryList = function() {
      var a2 = [], b = this.stringKeys_();
      b.sort();
      for (var c2 = 0; c2 < b.length; c2++) {
        var d2 = this.map_[b[c2]];
        a2.push([d2.key, d2.value]);
      }
      return a2;
    };
    jspb.Map.prototype.entries = function() {
      var a2 = [], b = this.stringKeys_();
      b.sort();
      for (var c2 = 0; c2 < b.length; c2++) {
        var d2 = this.map_[b[c2]];
        a2.push([d2.key, this.wrapEntry_(d2)]);
      }
      return new jspb.Map.ArrayIteratorIterable_(a2);
    };
    jspb.Map.prototype.keys = function() {
      var a2 = [], b = this.stringKeys_();
      b.sort();
      for (var c2 = 0; c2 < b.length; c2++)
        a2.push(this.map_[b[c2]].key);
      return new jspb.Map.ArrayIteratorIterable_(a2);
    };
    jspb.Map.prototype.values = function() {
      var a2 = [], b = this.stringKeys_();
      b.sort();
      for (var c2 = 0; c2 < b.length; c2++)
        a2.push(this.wrapEntry_(this.map_[b[c2]]));
      return new jspb.Map.ArrayIteratorIterable_(a2);
    };
    jspb.Map.prototype.forEach = function(a2, b) {
      var c2 = this.stringKeys_();
      c2.sort();
      for (var d2 = 0; d2 < c2.length; d2++) {
        var e2 = this.map_[c2[d2]];
        a2.call(b, this.wrapEntry_(e2), e2.key, this);
      }
    };
    jspb.Map.prototype.set = function(a2, b) {
      var c2 = new jspb.Map.Entry_(a2);
      this.valueCtor_ ? (c2.valueWrapper = b, c2.value = b.toArray()) : c2.value = b;
      this.map_[a2.toString()] = c2;
      this.arrClean = false;
      return this;
    };
    jspb.Map.prototype.wrapEntry_ = function(a2) {
      return this.valueCtor_ ? (a2.valueWrapper || (a2.valueWrapper = new this.valueCtor_(a2.value)), a2.valueWrapper) : a2.value;
    };
    jspb.Map.prototype.get = function(a2) {
      if (a2 = this.map_[a2.toString()])
        return this.wrapEntry_(a2);
    };
    jspb.Map.prototype.has = function(a2) {
      return a2.toString() in this.map_;
    };
    jspb.Map.prototype.serializeBinary = function(a2, b, c2, d2, e2) {
      var f = this.stringKeys_();
      f.sort();
      for (var g = 0; g < f.length; g++) {
        var h2 = this.map_[f[g]];
        b.beginSubMessage(a2);
        c2.call(b, 1, h2.key);
        this.valueCtor_ ? d2.call(b, 2, this.wrapEntry_(h2), e2) : d2.call(b, 2, h2.value);
        b.endSubMessage();
      }
    };
    jspb.Map.deserializeBinary = function(a2, b, c2, d2, e2, f, g) {
      for (; b.nextField() && !b.isEndGroup(); ) {
        var h2 = b.getFieldNumber();
        h2 == 1 ? f = c2.call(b) : h2 == 2 && (a2.valueCtor_ ? (goog.asserts.assert(e2), g || (g = new a2.valueCtor_()), d2.call(b, g, e2)) : g = d2.call(b));
      }
      goog.asserts.assert(f != void 0);
      goog.asserts.assert(g != void 0);
      a2.set(f, g);
    };
    jspb.Map.prototype.stringKeys_ = function() {
      var a2 = this.map_, b = [], c2;
      for (c2 in a2)
        Object.prototype.hasOwnProperty.call(a2, c2) && b.push(c2);
      return b;
    };
    jspb.Map.Entry_ = function(a2, b) {
      this.key = a2;
      this.value = b;
      this.valueWrapper = void 0;
    };
    jspb.ExtensionFieldInfo = function(a2, b, c2, d2, e2) {
      this.fieldIndex = a2;
      this.fieldName = b;
      this.ctor = c2;
      this.toObjectFn = d2;
      this.isRepeated = e2;
    };
    jspb.ExtensionFieldBinaryInfo = function(a2, b, c2, d2, e2, f) {
      this.fieldInfo = a2;
      this.binaryReaderFn = b;
      this.binaryWriterFn = c2;
      this.binaryMessageSerializeFn = d2;
      this.binaryMessageDeserializeFn = e2;
      this.isPacked = f;
    };
    jspb.ExtensionFieldInfo.prototype.isMessageType = function() {
      return !!this.ctor;
    };
    jspb.Message = function() {
    };
    jspb.Message.GENERATE_TO_OBJECT = true;
    jspb.Message.GENERATE_FROM_OBJECT = !goog.DISALLOW_TEST_ONLY_CODE;
    jspb.Message.GENERATE_TO_STRING = true;
    jspb.Message.ASSUME_LOCAL_ARRAYS = false;
    jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS = true;
    jspb.Message.SUPPORTS_UINT8ARRAY_ = typeof Uint8Array == "function";
    jspb.Message.prototype.getJsPbMessageId = function() {
      return this.messageId_;
    };
    jspb.Message.getIndex_ = function(a2, b) {
      return b + a2.arrayIndexOffset_;
    };
    jspb.Message.hiddenES6Property_ = function() {
    };
    jspb.Message.getFieldNumber_ = function(a2, b) {
      return b - a2.arrayIndexOffset_;
    };
    jspb.Message.initialize = function(a2, b, c2, d2, e2, f) {
      a2.wrappers_ = null;
      b || (b = c2 ? [c2] : []);
      a2.messageId_ = c2 ? String(c2) : void 0;
      a2.arrayIndexOffset_ = c2 === 0 ? -1 : 0;
      a2.array = b;
      jspb.Message.initPivotAndExtensionObject_(a2, d2);
      a2.convertedPrimitiveFields_ = {};
      jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS || (a2.repeatedFields = e2);
      if (e2)
        for (b = 0; b < e2.length; b++)
          c2 = e2[b], c2 < a2.pivot_ ? (c2 = jspb.Message.getIndex_(a2, c2), a2.array[c2] = a2.array[c2] || jspb.Message.EMPTY_LIST_SENTINEL_) : (jspb.Message.maybeInitEmptyExtensionObject_(a2), a2.extensionObject_[c2] = a2.extensionObject_[c2] || jspb.Message.EMPTY_LIST_SENTINEL_);
      if (f && f.length)
        for (b = 0; b < f.length; b++)
          jspb.Message.computeOneofCase(a2, f[b]);
    };
    jspb.Message.EMPTY_LIST_SENTINEL_ = goog.DEBUG && Object.freeze ? Object.freeze([]) : [];
    jspb.Message.isArray_ = function(a2) {
      return jspb.Message.ASSUME_LOCAL_ARRAYS ? a2 instanceof Array : Array.isArray(a2);
    };
    jspb.Message.isExtensionObject_ = function(a2) {
      return a2 !== null && typeof a2 == "object" && !jspb.Message.isArray_(a2) && !(jspb.Message.SUPPORTS_UINT8ARRAY_ && a2 instanceof Uint8Array);
    };
    jspb.Message.initPivotAndExtensionObject_ = function(a2, b) {
      var c2 = a2.array.length, d2 = -1;
      if (c2 && (d2 = c2 - 1, c2 = a2.array[d2], jspb.Message.isExtensionObject_(c2))) {
        a2.pivot_ = jspb.Message.getFieldNumber_(a2, d2);
        a2.extensionObject_ = c2;
        return;
      }
      -1 < b ? (a2.pivot_ = Math.max(b, jspb.Message.getFieldNumber_(a2, d2 + 1)), a2.extensionObject_ = null) : a2.pivot_ = Number.MAX_VALUE;
    };
    jspb.Message.maybeInitEmptyExtensionObject_ = function(a2) {
      var b = jspb.Message.getIndex_(a2, a2.pivot_);
      a2.array[b] || (a2.extensionObject_ = a2.array[b] = {});
    };
    jspb.Message.toObjectList = function(a2, b, c2) {
      for (var d2 = [], e2 = 0; e2 < a2.length; e2++)
        d2[e2] = b.call(a2[e2], c2, a2[e2]);
      return d2;
    };
    jspb.Message.toObjectExtension = function(a2, b, c2, d2, e2) {
      for (var f in c2) {
        var g = c2[f], h2 = d2.call(a2, g);
        if (h2 != null) {
          for (var k in g.fieldName)
            if (g.fieldName.hasOwnProperty(k))
              break;
          b[k] = g.toObjectFn ? g.isRepeated ? jspb.Message.toObjectList(h2, g.toObjectFn, e2) : g.toObjectFn(e2, h2) : h2;
        }
      }
    };
    jspb.Message.serializeBinaryExtensions = function(a2, b, c2, d2) {
      for (var e2 in c2) {
        var f = c2[e2], g = f.fieldInfo;
        if (!f.binaryWriterFn)
          throw Error("Message extension present that was generated without binary serialization support");
        var h2 = d2.call(a2, g);
        if (h2 != null)
          if (g.isMessageType())
            if (f.binaryMessageSerializeFn)
              f.binaryWriterFn.call(b, g.fieldIndex, h2, f.binaryMessageSerializeFn);
            else
              throw Error("Message extension present holding submessage without binary support enabled, and message is being serialized to binary format");
          else
            f.binaryWriterFn.call(b, g.fieldIndex, h2);
      }
    };
    jspb.Message.readBinaryExtension = function(a2, b, c2, d2, e2) {
      var f = c2[b.getFieldNumber()];
      if (f) {
        c2 = f.fieldInfo;
        if (!f.binaryReaderFn)
          throw Error("Deserializing extension whose generated code does not support binary format");
        if (c2.isMessageType()) {
          var g = new c2.ctor();
          f.binaryReaderFn.call(b, g, f.binaryMessageDeserializeFn);
        } else
          g = f.binaryReaderFn.call(b);
        c2.isRepeated && !f.isPacked ? (b = d2.call(a2, c2)) ? b.push(g) : e2.call(a2, c2, [g]) : e2.call(a2, c2, g);
      } else
        b.skipField();
    };
    jspb.Message.getField = function(a2, b) {
      if (b < a2.pivot_) {
        b = jspb.Message.getIndex_(a2, b);
        var c2 = a2.array[b];
        return c2 === jspb.Message.EMPTY_LIST_SENTINEL_ ? a2.array[b] = [] : c2;
      }
      if (a2.extensionObject_)
        return c2 = a2.extensionObject_[b], c2 === jspb.Message.EMPTY_LIST_SENTINEL_ ? a2.extensionObject_[b] = [] : c2;
    };
    jspb.Message.getRepeatedField = function(a2, b) {
      return jspb.Message.getField(a2, b);
    };
    jspb.Message.getOptionalFloatingPointField = function(a2, b) {
      a2 = jspb.Message.getField(a2, b);
      return a2 == null ? a2 : +a2;
    };
    jspb.Message.getBooleanField = function(a2, b) {
      a2 = jspb.Message.getField(a2, b);
      return a2 == null ? a2 : !!a2;
    };
    jspb.Message.getRepeatedFloatingPointField = function(a2, b) {
      var c2 = jspb.Message.getRepeatedField(a2, b);
      a2.convertedPrimitiveFields_ || (a2.convertedPrimitiveFields_ = {});
      if (!a2.convertedPrimitiveFields_[b]) {
        for (var d2 = 0; d2 < c2.length; d2++)
          c2[d2] = +c2[d2];
        a2.convertedPrimitiveFields_[b] = true;
      }
      return c2;
    };
    jspb.Message.getRepeatedBooleanField = function(a2, b) {
      var c2 = jspb.Message.getRepeatedField(a2, b);
      a2.convertedPrimitiveFields_ || (a2.convertedPrimitiveFields_ = {});
      if (!a2.convertedPrimitiveFields_[b]) {
        for (var d2 = 0; d2 < c2.length; d2++)
          c2[d2] = !!c2[d2];
        a2.convertedPrimitiveFields_[b] = true;
      }
      return c2;
    };
    jspb.Message.bytesAsB64 = function(a2) {
      if (a2 == null || typeof a2 === "string")
        return a2;
      if (jspb.Message.SUPPORTS_UINT8ARRAY_ && a2 instanceof Uint8Array)
        return goog.crypt.base64.encodeByteArray(a2);
      goog.asserts.fail("Cannot coerce to b64 string: " + goog.typeOf(a2));
      return null;
    };
    jspb.Message.bytesAsU8 = function(a2) {
      if (a2 == null || a2 instanceof Uint8Array)
        return a2;
      if (typeof a2 === "string")
        return goog.crypt.base64.decodeStringToUint8Array(a2);
      goog.asserts.fail("Cannot coerce to Uint8Array: " + goog.typeOf(a2));
      return null;
    };
    jspb.Message.bytesListAsB64 = function(a2) {
      jspb.Message.assertConsistentTypes_(a2);
      return a2.length && typeof a2[0] !== "string" ? goog.array.map(a2, jspb.Message.bytesAsB64) : a2;
    };
    jspb.Message.bytesListAsU8 = function(a2) {
      jspb.Message.assertConsistentTypes_(a2);
      return !a2.length || a2[0] instanceof Uint8Array ? a2 : goog.array.map(a2, jspb.Message.bytesAsU8);
    };
    jspb.Message.assertConsistentTypes_ = function(a2) {
      if (goog.DEBUG && a2 && 1 < a2.length) {
        var b = goog.typeOf(a2[0]);
        goog.array.forEach(a2, function(a3) {
          goog.typeOf(a3) != b && goog.asserts.fail("Inconsistent type in JSPB repeated field array. Got " + goog.typeOf(a3) + " expected " + b);
        });
      }
    };
    jspb.Message.getFieldWithDefault = function(a2, b, c2) {
      a2 = jspb.Message.getField(a2, b);
      return a2 == null ? c2 : a2;
    };
    jspb.Message.getBooleanFieldWithDefault = function(a2, b, c2) {
      a2 = jspb.Message.getBooleanField(a2, b);
      return a2 == null ? c2 : a2;
    };
    jspb.Message.getFloatingPointFieldWithDefault = function(a2, b, c2) {
      a2 = jspb.Message.getOptionalFloatingPointField(a2, b);
      return a2 == null ? c2 : a2;
    };
    jspb.Message.getFieldProto3 = jspb.Message.getFieldWithDefault;
    jspb.Message.getMapField = function(a2, b, c2, d2) {
      a2.wrappers_ || (a2.wrappers_ = {});
      if (b in a2.wrappers_)
        return a2.wrappers_[b];
      var e2 = jspb.Message.getField(a2, b);
      if (!e2) {
        if (c2)
          return;
        e2 = [];
        jspb.Message.setField(a2, b, e2);
      }
      return a2.wrappers_[b] = new jspb.Map(e2, d2);
    };
    jspb.Message.setField = function(a2, b, c2) {
      goog.asserts.assertInstanceof(a2, jspb.Message);
      b < a2.pivot_ ? a2.array[jspb.Message.getIndex_(a2, b)] = c2 : (jspb.Message.maybeInitEmptyExtensionObject_(a2), a2.extensionObject_[b] = c2);
      return a2;
    };
    jspb.Message.setProto3IntField = function(a2, b, c2) {
      return jspb.Message.setFieldIgnoringDefault_(a2, b, c2, 0);
    };
    jspb.Message.setProto3FloatField = function(a2, b, c2) {
      return jspb.Message.setFieldIgnoringDefault_(a2, b, c2, 0);
    };
    jspb.Message.setProto3BooleanField = function(a2, b, c2) {
      return jspb.Message.setFieldIgnoringDefault_(a2, b, c2, false);
    };
    jspb.Message.setProto3StringField = function(a2, b, c2) {
      return jspb.Message.setFieldIgnoringDefault_(a2, b, c2, "");
    };
    jspb.Message.setProto3BytesField = function(a2, b, c2) {
      return jspb.Message.setFieldIgnoringDefault_(a2, b, c2, "");
    };
    jspb.Message.setProto3EnumField = function(a2, b, c2) {
      return jspb.Message.setFieldIgnoringDefault_(a2, b, c2, 0);
    };
    jspb.Message.setProto3StringIntField = function(a2, b, c2) {
      return jspb.Message.setFieldIgnoringDefault_(a2, b, c2, "0");
    };
    jspb.Message.setFieldIgnoringDefault_ = function(a2, b, c2, d2) {
      goog.asserts.assertInstanceof(a2, jspb.Message);
      c2 !== d2 ? jspb.Message.setField(a2, b, c2) : b < a2.pivot_ ? a2.array[jspb.Message.getIndex_(a2, b)] = null : (jspb.Message.maybeInitEmptyExtensionObject_(a2), delete a2.extensionObject_[b]);
      return a2;
    };
    jspb.Message.addToRepeatedField = function(a2, b, c2, d2) {
      goog.asserts.assertInstanceof(a2, jspb.Message);
      b = jspb.Message.getRepeatedField(a2, b);
      d2 != void 0 ? b.splice(d2, 0, c2) : b.push(c2);
      return a2;
    };
    jspb.Message.setOneofField = function(a2, b, c2, d2) {
      goog.asserts.assertInstanceof(a2, jspb.Message);
      (c2 = jspb.Message.computeOneofCase(a2, c2)) && c2 !== b && d2 !== void 0 && (a2.wrappers_ && c2 in a2.wrappers_ && (a2.wrappers_[c2] = void 0), jspb.Message.setField(a2, c2, void 0));
      return jspb.Message.setField(a2, b, d2);
    };
    jspb.Message.computeOneofCase = function(a2, b) {
      for (var c2, d2, e2 = 0; e2 < b.length; e2++) {
        var f = b[e2], g = jspb.Message.getField(a2, f);
        g != null && (c2 = f, d2 = g, jspb.Message.setField(a2, f, void 0));
      }
      return c2 ? (jspb.Message.setField(a2, c2, d2), c2) : 0;
    };
    jspb.Message.getWrapperField = function(a2, b, c2, d2) {
      a2.wrappers_ || (a2.wrappers_ = {});
      if (!a2.wrappers_[c2]) {
        var e2 = jspb.Message.getField(a2, c2);
        if (d2 || e2)
          a2.wrappers_[c2] = new b(e2);
      }
      return a2.wrappers_[c2];
    };
    jspb.Message.getRepeatedWrapperField = function(a2, b, c2) {
      jspb.Message.wrapRepeatedField_(a2, b, c2);
      b = a2.wrappers_[c2];
      b == jspb.Message.EMPTY_LIST_SENTINEL_ && (b = a2.wrappers_[c2] = []);
      return b;
    };
    jspb.Message.wrapRepeatedField_ = function(a2, b, c2) {
      a2.wrappers_ || (a2.wrappers_ = {});
      if (!a2.wrappers_[c2]) {
        for (var d2 = jspb.Message.getRepeatedField(a2, c2), e2 = [], f = 0; f < d2.length; f++)
          e2[f] = new b(d2[f]);
        a2.wrappers_[c2] = e2;
      }
    };
    jspb.Message.setWrapperField = function(a2, b, c2) {
      goog.asserts.assertInstanceof(a2, jspb.Message);
      a2.wrappers_ || (a2.wrappers_ = {});
      var d2 = c2 ? c2.toArray() : c2;
      a2.wrappers_[b] = c2;
      return jspb.Message.setField(a2, b, d2);
    };
    jspb.Message.setOneofWrapperField = function(a2, b, c2, d2) {
      goog.asserts.assertInstanceof(a2, jspb.Message);
      a2.wrappers_ || (a2.wrappers_ = {});
      var e2 = d2 ? d2.toArray() : d2;
      a2.wrappers_[b] = d2;
      return jspb.Message.setOneofField(a2, b, c2, e2);
    };
    jspb.Message.setRepeatedWrapperField = function(a2, b, c2) {
      goog.asserts.assertInstanceof(a2, jspb.Message);
      a2.wrappers_ || (a2.wrappers_ = {});
      c2 = c2 || [];
      for (var d2 = [], e2 = 0; e2 < c2.length; e2++)
        d2[e2] = c2[e2].toArray();
      a2.wrappers_[b] = c2;
      return jspb.Message.setField(a2, b, d2);
    };
    jspb.Message.addToRepeatedWrapperField = function(a2, b, c2, d2, e2) {
      jspb.Message.wrapRepeatedField_(a2, d2, b);
      var f = a2.wrappers_[b];
      f || (f = a2.wrappers_[b] = []);
      c2 = c2 ? c2 : new d2();
      a2 = jspb.Message.getRepeatedField(a2, b);
      e2 != void 0 ? (f.splice(e2, 0, c2), a2.splice(e2, 0, c2.toArray())) : (f.push(c2), a2.push(c2.toArray()));
      return c2;
    };
    jspb.Message.toMap = function(a2, b, c2, d2) {
      for (var e2 = {}, f = 0; f < a2.length; f++)
        e2[b.call(a2[f])] = c2 ? c2.call(a2[f], d2, a2[f]) : a2[f];
      return e2;
    };
    jspb.Message.prototype.syncMapFields_ = function() {
      if (this.wrappers_)
        for (var a2 in this.wrappers_) {
          var b = this.wrappers_[a2];
          if (Array.isArray(b))
            for (var c2 = 0; c2 < b.length; c2++)
              b[c2] && b[c2].toArray();
          else
            b && b.toArray();
        }
    };
    jspb.Message.prototype.toArray = function() {
      this.syncMapFields_();
      return this.array;
    };
    jspb.Message.GENERATE_TO_STRING && (jspb.Message.prototype.toString = function() {
      this.syncMapFields_();
      return this.array.toString();
    });
    jspb.Message.prototype.getExtension = function(a2) {
      if (this.extensionObject_) {
        this.wrappers_ || (this.wrappers_ = {});
        var b = a2.fieldIndex;
        if (a2.isRepeated) {
          if (a2.isMessageType())
            return this.wrappers_[b] || (this.wrappers_[b] = goog.array.map(this.extensionObject_[b] || [], function(b2) {
              return new a2.ctor(b2);
            })), this.wrappers_[b];
        } else if (a2.isMessageType())
          return !this.wrappers_[b] && this.extensionObject_[b] && (this.wrappers_[b] = new a2.ctor(this.extensionObject_[b])), this.wrappers_[b];
        return this.extensionObject_[b];
      }
    };
    jspb.Message.prototype.setExtension = function(a2, b) {
      this.wrappers_ || (this.wrappers_ = {});
      jspb.Message.maybeInitEmptyExtensionObject_(this);
      var c2 = a2.fieldIndex;
      a2.isRepeated ? (b = b || [], a2.isMessageType() ? (this.wrappers_[c2] = b, this.extensionObject_[c2] = goog.array.map(b, function(a3) {
        return a3.toArray();
      })) : this.extensionObject_[c2] = b) : a2.isMessageType() ? (this.wrappers_[c2] = b, this.extensionObject_[c2] = b ? b.toArray() : b) : this.extensionObject_[c2] = b;
      return this;
    };
    jspb.Message.difference = function(a2, b) {
      if (!(a2 instanceof b.constructor))
        throw Error("Messages have different types.");
      var c2 = a2.toArray();
      b = b.toArray();
      var d2 = [], e2 = 0, f = c2.length > b.length ? c2.length : b.length;
      a2.getJsPbMessageId() && (d2[0] = a2.getJsPbMessageId(), e2 = 1);
      for (; e2 < f; e2++)
        jspb.Message.compareFields(c2[e2], b[e2]) || (d2[e2] = b[e2]);
      return new a2.constructor(d2);
    };
    jspb.Message.equals = function(a2, b) {
      return a2 == b || !(!a2 || !b) && a2 instanceof b.constructor && jspb.Message.compareFields(a2.toArray(), b.toArray());
    };
    jspb.Message.compareExtensions = function(a2, b) {
      a2 = a2 || {};
      b = b || {};
      var c2 = {}, d2;
      for (d2 in a2)
        c2[d2] = 0;
      for (d2 in b)
        c2[d2] = 0;
      for (d2 in c2)
        if (!jspb.Message.compareFields(a2[d2], b[d2]))
          return false;
      return true;
    };
    jspb.Message.compareFields = function(a2, b) {
      if (a2 == b)
        return true;
      if (!goog.isObject(a2) || !goog.isObject(b))
        return typeof a2 === "number" && isNaN(a2) || typeof b === "number" && isNaN(b) ? String(a2) == String(b) : false;
      if (a2.constructor != b.constructor)
        return false;
      if (jspb.Message.SUPPORTS_UINT8ARRAY_ && a2.constructor === Uint8Array) {
        if (a2.length != b.length)
          return false;
        for (var c2 = 0; c2 < a2.length; c2++)
          if (a2[c2] != b[c2])
            return false;
        return true;
      }
      if (a2.constructor === Array) {
        var d2 = void 0, e2 = void 0, f = Math.max(a2.length, b.length);
        for (c2 = 0; c2 < f; c2++) {
          var g = a2[c2], h2 = b[c2];
          g && g.constructor == Object && (goog.asserts.assert(d2 === void 0), goog.asserts.assert(c2 === a2.length - 1), d2 = g, g = void 0);
          h2 && h2.constructor == Object && (goog.asserts.assert(e2 === void 0), goog.asserts.assert(c2 === b.length - 1), e2 = h2, h2 = void 0);
          if (!jspb.Message.compareFields(g, h2))
            return false;
        }
        return d2 || e2 ? (d2 = d2 || {}, e2 = e2 || {}, jspb.Message.compareExtensions(d2, e2)) : true;
      }
      if (a2.constructor === Object)
        return jspb.Message.compareExtensions(a2, b);
      throw Error("Invalid type in JSPB array");
    };
    jspb.Message.prototype.cloneMessage = function() {
      return jspb.Message.cloneMessage(this);
    };
    jspb.Message.prototype.clone = function() {
      return jspb.Message.cloneMessage(this);
    };
    jspb.Message.clone = function(a2) {
      return jspb.Message.cloneMessage(a2);
    };
    jspb.Message.cloneMessage = function(a2) {
      return new a2.constructor(jspb.Message.clone_(a2.toArray()));
    };
    jspb.Message.copyInto = function(a2, b) {
      goog.asserts.assertInstanceof(a2, jspb.Message);
      goog.asserts.assertInstanceof(b, jspb.Message);
      goog.asserts.assert(a2.constructor == b.constructor, "Copy source and target message should have the same type.");
      a2 = jspb.Message.clone(a2);
      for (var c2 = b.toArray(), d2 = a2.toArray(), e2 = c2.length = 0; e2 < d2.length; e2++)
        c2[e2] = d2[e2];
      b.wrappers_ = a2.wrappers_;
      b.extensionObject_ = a2.extensionObject_;
    };
    jspb.Message.clone_ = function(a2) {
      if (Array.isArray(a2)) {
        for (var b = Array(a2.length), c2 = 0; c2 < a2.length; c2++) {
          var d2 = a2[c2];
          d2 != null && (b[c2] = typeof d2 == "object" ? jspb.Message.clone_(goog.asserts.assert(d2)) : d2);
        }
        return b;
      }
      if (jspb.Message.SUPPORTS_UINT8ARRAY_ && a2 instanceof Uint8Array)
        return new Uint8Array(a2);
      b = {};
      for (c2 in a2)
        d2 = a2[c2], d2 != null && (b[c2] = typeof d2 == "object" ? jspb.Message.clone_(goog.asserts.assert(d2)) : d2);
      return b;
    };
    jspb.Message.registerMessageType = function(a2, b) {
      b.messageId = a2;
    };
    jspb.Message.messageSetExtensions = {};
    jspb.Message.messageSetExtensionsBinary = {};
    jspb.Export = {};
    exports.Map = jspb.Map;
    exports.Message = jspb.Message;
    exports.BinaryReader = jspb.BinaryReader;
    exports.BinaryWriter = jspb.BinaryWriter;
    exports.ExtensionFieldInfo = jspb.ExtensionFieldInfo;
    exports.ExtensionFieldBinaryInfo = jspb.ExtensionFieldBinaryInfo;
    exports.exportSymbol = goog.exportSymbol;
    exports.inherits = goog.inherits;
    exports.object = { extend: goog.object.extend };
    exports.typeOf = goog.typeOf;
  }
});

// ../../node_modules/.pnpm/js-sha3@0.8.0/node_modules/js-sha3/src/sha3.js
var require_sha3 = __commonJS({
  "../../node_modules/.pnpm/js-sha3@0.8.0/node_modules/js-sha3/src/sha3.js"(exports2, module2) {
    (function() {
      "use strict";
      var INPUT_ERROR = "input is invalid type";
      var FINALIZE_ERROR = "finalize already called";
      var WINDOW = typeof window === "object";
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === "object";
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
      if (NODE_JS) {
        root = global;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module2 === "object" && module2.exports;
      var AMD = typeof define === "function" && define.amd;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
      var HEX_CHARS = "0123456789abcdef".split("");
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [
        1,
        0,
        32898,
        0,
        32906,
        2147483648,
        2147516416,
        2147483648,
        32907,
        0,
        2147483649,
        0,
        2147516545,
        2147483648,
        32777,
        2147483648,
        138,
        0,
        136,
        0,
        2147516425,
        0,
        2147483658,
        0,
        2147516555,
        0,
        139,
        2147483648,
        32905,
        2147483648,
        32771,
        2147483648,
        32770,
        2147483648,
        128,
        2147483648,
        32778,
        0,
        2147483658,
        2147483648,
        2147516545,
        2147483648,
        32896,
        2147483648,
        2147483649,
        0,
        2147516424,
        2147483648
      ];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array", "digest"];
      var CSHAKE_BYTEPAD = {
        "128": 168,
        "256": 136
      };
      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function(obj) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        };
      }
      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function(obj) {
          return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }
      var createOutputMethod = function(bits2, padding, outputType) {
        return function(message) {
          return new Keccak(bits2, padding, bits2).update(message)[outputType]();
        };
      };
      var createShakeOutputMethod = function(bits2, padding, outputType) {
        return function(message, outputBits) {
          return new Keccak(bits2, padding, outputBits).update(message)[outputType]();
        };
      };
      var createCshakeOutputMethod = function(bits2, padding, outputType) {
        return function(message, outputBits, n2, s) {
          return methods["cshake" + bits2].update(message, outputBits, n2, s)[outputType]();
        };
      };
      var createKmacOutputMethod = function(bits2, padding, outputType) {
        return function(key, message, outputBits, s) {
          return methods["kmac" + bits2].update(key, message, outputBits, s)[outputType]();
        };
      };
      var createOutputMethods = function(method, createMethod2, bits2, padding) {
        for (var i3 = 0; i3 < OUTPUT_TYPES.length; ++i3) {
          var type = OUTPUT_TYPES[i3];
          method[type] = createMethod2(bits2, padding, type);
        }
        return method;
      };
      var createMethod = function(bits2, padding) {
        var method = createOutputMethod(bits2, padding, "hex");
        method.create = function() {
          return new Keccak(bits2, padding, bits2);
        };
        method.update = function(message) {
          return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits2, padding);
      };
      var createShakeMethod = function(bits2, padding) {
        var method = createShakeOutputMethod(bits2, padding, "hex");
        method.create = function(outputBits) {
          return new Keccak(bits2, padding, outputBits);
        };
        method.update = function(message, outputBits) {
          return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits2, padding);
      };
      var createCshakeMethod = function(bits2, padding) {
        var w = CSHAKE_BYTEPAD[bits2];
        var method = createCshakeOutputMethod(bits2, padding, "hex");
        method.create = function(outputBits, n2, s) {
          if (!n2 && !s) {
            return methods["shake" + bits2].create(outputBits);
          } else {
            return new Keccak(bits2, padding, outputBits).bytepad([n2, s], w);
          }
        };
        method.update = function(message, outputBits, n2, s) {
          return method.create(outputBits, n2, s).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits2, padding);
      };
      var createKmacMethod = function(bits2, padding) {
        var w = CSHAKE_BYTEPAD[bits2];
        var method = createKmacOutputMethod(bits2, padding, "hex");
        method.create = function(key, outputBits, s) {
          return new Kmac(bits2, padding, outputBits).bytepad(["KMAC", s], w).bytepad([key], w);
        };
        method.update = function(key, message, outputBits, s) {
          return method.create(key, outputBits, s).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits2, padding);
      };
      var algorithms = [
        { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod },
        { name: "sha3", padding: PADDING, bits: BITS, createMethod },
        { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: "cshake", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: "kmac", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];
      var methods = {}, methodNames = [];
      for (var i2 = 0; i2 < algorithms.length; ++i2) {
        var algorithm = algorithms[i2];
        var bits = algorithm.bits;
        for (var j = 0; j < bits.length; ++j) {
          var methodName = algorithm.name + "_" + bits[j];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
          if (algorithm.name !== "sha3") {
            var newMethodName = algorithm.name + bits[j];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }
      function Keccak(bits2, padding, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = 1600 - (bits2 << 1) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;
        for (var i3 = 0; i3 < 50; ++i3) {
          this.s[i3] = 0;
        }
      }
      Keccak.prototype.update = function(message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var notString, type = typeof message;
        if (type !== "string") {
          if (type === "object") {
            if (message === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length = message.length, blockCount = this.blockCount, index = 0, s = this.s, i3, code;
        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i3 = 1; i3 < blockCount + 1; ++i3) {
              blocks[i3] = 0;
            }
          }
          if (notString) {
            for (i3 = this.start; index < length && i3 < byteCount; ++index) {
              blocks[i3 >> 2] |= message[index] << SHIFT[i3++ & 3];
            }
          } else {
            for (i3 = this.start; index < length && i3 < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 128) {
                blocks[i3 >> 2] |= code << SHIFT[i3++ & 3];
              } else if (code < 2048) {
                blocks[i3 >> 2] |= (192 | code >> 6) << SHIFT[i3++ & 3];
                blocks[i3 >> 2] |= (128 | code & 63) << SHIFT[i3++ & 3];
              } else if (code < 55296 || code >= 57344) {
                blocks[i3 >> 2] |= (224 | code >> 12) << SHIFT[i3++ & 3];
                blocks[i3 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i3++ & 3];
                blocks[i3 >> 2] |= (128 | code & 63) << SHIFT[i3++ & 3];
              } else {
                code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                blocks[i3 >> 2] |= (240 | code >> 18) << SHIFT[i3++ & 3];
                blocks[i3 >> 2] |= (128 | code >> 12 & 63) << SHIFT[i3++ & 3];
                blocks[i3 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i3++ & 3];
                blocks[i3 >> 2] |= (128 | code & 63) << SHIFT[i3++ & 3];
              }
            }
          }
          this.lastByteIndex = i3;
          if (i3 >= byteCount) {
            this.start = i3 - byteCount;
            this.block = blocks[blockCount];
            for (i3 = 0; i3 < blockCount; ++i3) {
              s[i3] ^= blocks[i3];
            }
            f(s);
            this.reset = true;
          } else {
            this.start = i3;
          }
        }
        return this;
      };
      Keccak.prototype.encode = function(x, right) {
        var o2 = x & 255, n2 = 1;
        var bytes = [o2];
        x = x >> 8;
        o2 = x & 255;
        while (o2 > 0) {
          bytes.unshift(o2);
          x = x >> 8;
          o2 = x & 255;
          ++n2;
        }
        if (right) {
          bytes.push(n2);
        } else {
          bytes.unshift(n2);
        }
        this.update(bytes);
        return bytes.length;
      };
      Keccak.prototype.encodeString = function(str) {
        var notString, type = typeof str;
        if (type !== "string") {
          if (type === "object") {
            if (str === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
              str = new Uint8Array(str);
            } else if (!Array.isArray(str)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var bytes = 0, length = str.length;
        if (notString) {
          bytes = length;
        } else {
          for (var i3 = 0; i3 < str.length; ++i3) {
            var code = str.charCodeAt(i3);
            if (code < 128) {
              bytes += 1;
            } else if (code < 2048) {
              bytes += 2;
            } else if (code < 55296 || code >= 57344) {
              bytes += 3;
            } else {
              code = 65536 + ((code & 1023) << 10 | str.charCodeAt(++i3) & 1023);
              bytes += 4;
            }
          }
        }
        bytes += this.encode(bytes * 8);
        this.update(str);
        return bytes;
      };
      Keccak.prototype.bytepad = function(strs, w) {
        var bytes = this.encode(w);
        for (var i3 = 0; i3 < strs.length; ++i3) {
          bytes += this.encodeString(strs[i3]);
        }
        var paddingBytes = w - bytes % w;
        var zeros = [];
        zeros.length = paddingBytes;
        this.update(zeros);
        return this;
      };
      Keccak.prototype.finalize = function() {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i3 = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
        blocks[i3 >> 2] |= this.padding[i3 & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i3 = 1; i3 < blockCount + 1; ++i3) {
            blocks[i3] = 0;
          }
        }
        blocks[blockCount - 1] |= 2147483648;
        for (i3 = 0; i3 < blockCount; ++i3) {
          s[i3] ^= blocks[i3];
        }
        f(s);
      };
      Keccak.prototype.toString = Keccak.prototype.hex = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i3 = 0, j2 = 0;
        var hex = "", block;
        while (j2 < outputBlocks) {
          for (i3 = 0; i3 < blockCount && j2 < outputBlocks; ++i3, ++j2) {
            block = s[i3];
            hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
          }
          if (j2 % blockCount === 0) {
            f(s);
            i3 = 0;
          }
        }
        if (extraBytes) {
          block = s[i3];
          hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];
          if (extraBytes > 1) {
            hex += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];
          }
        }
        return hex;
      };
      Keccak.prototype.arrayBuffer = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i3 = 0, j2 = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer(outputBlocks + 1 << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j2 < outputBlocks) {
          for (i3 = 0; i3 < blockCount && j2 < outputBlocks; ++i3, ++j2) {
            array[j2] = s[i3];
          }
          if (j2 % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          array[i3] = s[i3];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };
      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
      Keccak.prototype.digest = Keccak.prototype.array = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i3 = 0, j2 = 0;
        var array = [], offset, block;
        while (j2 < outputBlocks) {
          for (i3 = 0; i3 < blockCount && j2 < outputBlocks; ++i3, ++j2) {
            offset = j2 << 2;
            block = s[i3];
            array[offset] = block & 255;
            array[offset + 1] = block >> 8 & 255;
            array[offset + 2] = block >> 16 & 255;
            array[offset + 3] = block >> 24 & 255;
          }
          if (j2 % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          offset = j2 << 2;
          block = s[i3];
          array[offset] = block & 255;
          if (extraBytes > 1) {
            array[offset + 1] = block >> 8 & 255;
          }
          if (extraBytes > 2) {
            array[offset + 2] = block >> 16 & 255;
          }
        }
        return array;
      };
      function Kmac(bits2, padding, outputBits) {
        Keccak.call(this, bits2, padding, outputBits);
      }
      Kmac.prototype = new Keccak();
      Kmac.prototype.finalize = function() {
        this.encode(this.outputBits, true);
        return Keccak.prototype.finalize.call(this);
      };
      var f = function(s) {
        var h2, l2, n2, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n2 = 0; n2 < 48; n2 += 2) {
          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
          h2 = c8 ^ (c2 << 1 | c3 >>> 31);
          l2 = c9 ^ (c3 << 1 | c2 >>> 31);
          s[0] ^= h2;
          s[1] ^= l2;
          s[10] ^= h2;
          s[11] ^= l2;
          s[20] ^= h2;
          s[21] ^= l2;
          s[30] ^= h2;
          s[31] ^= l2;
          s[40] ^= h2;
          s[41] ^= l2;
          h2 = c0 ^ (c4 << 1 | c5 >>> 31);
          l2 = c1 ^ (c5 << 1 | c4 >>> 31);
          s[2] ^= h2;
          s[3] ^= l2;
          s[12] ^= h2;
          s[13] ^= l2;
          s[22] ^= h2;
          s[23] ^= l2;
          s[32] ^= h2;
          s[33] ^= l2;
          s[42] ^= h2;
          s[43] ^= l2;
          h2 = c2 ^ (c6 << 1 | c7 >>> 31);
          l2 = c3 ^ (c7 << 1 | c6 >>> 31);
          s[4] ^= h2;
          s[5] ^= l2;
          s[14] ^= h2;
          s[15] ^= l2;
          s[24] ^= h2;
          s[25] ^= l2;
          s[34] ^= h2;
          s[35] ^= l2;
          s[44] ^= h2;
          s[45] ^= l2;
          h2 = c4 ^ (c8 << 1 | c9 >>> 31);
          l2 = c5 ^ (c9 << 1 | c8 >>> 31);
          s[6] ^= h2;
          s[7] ^= l2;
          s[16] ^= h2;
          s[17] ^= l2;
          s[26] ^= h2;
          s[27] ^= l2;
          s[36] ^= h2;
          s[37] ^= l2;
          s[46] ^= h2;
          s[47] ^= l2;
          h2 = c6 ^ (c0 << 1 | c1 >>> 31);
          l2 = c7 ^ (c1 << 1 | c0 >>> 31);
          s[8] ^= h2;
          s[9] ^= l2;
          s[18] ^= h2;
          s[19] ^= l2;
          s[28] ^= h2;
          s[29] ^= l2;
          s[38] ^= h2;
          s[39] ^= l2;
          s[48] ^= h2;
          s[49] ^= l2;
          b0 = s[0];
          b1 = s[1];
          b32 = s[11] << 4 | s[10] >>> 28;
          b33 = s[10] << 4 | s[11] >>> 28;
          b14 = s[20] << 3 | s[21] >>> 29;
          b15 = s[21] << 3 | s[20] >>> 29;
          b46 = s[31] << 9 | s[30] >>> 23;
          b47 = s[30] << 9 | s[31] >>> 23;
          b28 = s[40] << 18 | s[41] >>> 14;
          b29 = s[41] << 18 | s[40] >>> 14;
          b20 = s[2] << 1 | s[3] >>> 31;
          b21 = s[3] << 1 | s[2] >>> 31;
          b2 = s[13] << 12 | s[12] >>> 20;
          b3 = s[12] << 12 | s[13] >>> 20;
          b34 = s[22] << 10 | s[23] >>> 22;
          b35 = s[23] << 10 | s[22] >>> 22;
          b16 = s[33] << 13 | s[32] >>> 19;
          b17 = s[32] << 13 | s[33] >>> 19;
          b48 = s[42] << 2 | s[43] >>> 30;
          b49 = s[43] << 2 | s[42] >>> 30;
          b40 = s[5] << 30 | s[4] >>> 2;
          b41 = s[4] << 30 | s[5] >>> 2;
          b22 = s[14] << 6 | s[15] >>> 26;
          b23 = s[15] << 6 | s[14] >>> 26;
          b4 = s[25] << 11 | s[24] >>> 21;
          b5 = s[24] << 11 | s[25] >>> 21;
          b36 = s[34] << 15 | s[35] >>> 17;
          b37 = s[35] << 15 | s[34] >>> 17;
          b18 = s[45] << 29 | s[44] >>> 3;
          b19 = s[44] << 29 | s[45] >>> 3;
          b10 = s[6] << 28 | s[7] >>> 4;
          b11 = s[7] << 28 | s[6] >>> 4;
          b42 = s[17] << 23 | s[16] >>> 9;
          b43 = s[16] << 23 | s[17] >>> 9;
          b24 = s[26] << 25 | s[27] >>> 7;
          b25 = s[27] << 25 | s[26] >>> 7;
          b6 = s[36] << 21 | s[37] >>> 11;
          b7 = s[37] << 21 | s[36] >>> 11;
          b38 = s[47] << 24 | s[46] >>> 8;
          b39 = s[46] << 24 | s[47] >>> 8;
          b30 = s[8] << 27 | s[9] >>> 5;
          b31 = s[9] << 27 | s[8] >>> 5;
          b12 = s[18] << 20 | s[19] >>> 12;
          b13 = s[19] << 20 | s[18] >>> 12;
          b44 = s[29] << 7 | s[28] >>> 25;
          b45 = s[28] << 7 | s[29] >>> 25;
          b26 = s[38] << 8 | s[39] >>> 24;
          b27 = s[39] << 8 | s[38] >>> 24;
          b8 = s[48] << 14 | s[49] >>> 18;
          b9 = s[49] << 14 | s[48] >>> 18;
          s[0] = b0 ^ ~b2 & b4;
          s[1] = b1 ^ ~b3 & b5;
          s[10] = b10 ^ ~b12 & b14;
          s[11] = b11 ^ ~b13 & b15;
          s[20] = b20 ^ ~b22 & b24;
          s[21] = b21 ^ ~b23 & b25;
          s[30] = b30 ^ ~b32 & b34;
          s[31] = b31 ^ ~b33 & b35;
          s[40] = b40 ^ ~b42 & b44;
          s[41] = b41 ^ ~b43 & b45;
          s[2] = b2 ^ ~b4 & b6;
          s[3] = b3 ^ ~b5 & b7;
          s[12] = b12 ^ ~b14 & b16;
          s[13] = b13 ^ ~b15 & b17;
          s[22] = b22 ^ ~b24 & b26;
          s[23] = b23 ^ ~b25 & b27;
          s[32] = b32 ^ ~b34 & b36;
          s[33] = b33 ^ ~b35 & b37;
          s[42] = b42 ^ ~b44 & b46;
          s[43] = b43 ^ ~b45 & b47;
          s[4] = b4 ^ ~b6 & b8;
          s[5] = b5 ^ ~b7 & b9;
          s[14] = b14 ^ ~b16 & b18;
          s[15] = b15 ^ ~b17 & b19;
          s[24] = b24 ^ ~b26 & b28;
          s[25] = b25 ^ ~b27 & b29;
          s[34] = b34 ^ ~b36 & b38;
          s[35] = b35 ^ ~b37 & b39;
          s[44] = b44 ^ ~b46 & b48;
          s[45] = b45 ^ ~b47 & b49;
          s[6] = b6 ^ ~b8 & b0;
          s[7] = b7 ^ ~b9 & b1;
          s[16] = b16 ^ ~b18 & b10;
          s[17] = b17 ^ ~b19 & b11;
          s[26] = b26 ^ ~b28 & b20;
          s[27] = b27 ^ ~b29 & b21;
          s[36] = b36 ^ ~b38 & b30;
          s[37] = b37 ^ ~b39 & b31;
          s[46] = b46 ^ ~b48 & b40;
          s[47] = b47 ^ ~b49 & b41;
          s[8] = b8 ^ ~b0 & b2;
          s[9] = b9 ^ ~b1 & b3;
          s[18] = b18 ^ ~b10 & b12;
          s[19] = b19 ^ ~b11 & b13;
          s[28] = b28 ^ ~b20 & b22;
          s[29] = b29 ^ ~b21 & b23;
          s[38] = b38 ^ ~b30 & b32;
          s[39] = b39 ^ ~b31 & b33;
          s[48] = b48 ^ ~b40 & b42;
          s[49] = b49 ^ ~b41 & b43;
          s[0] ^= RC[n2];
          s[1] ^= RC[n2 + 1];
        }
      };
      if (COMMON_JS) {
        module2.exports = methods;
      } else {
        for (i2 = 0; i2 < methodNames.length; ++i2) {
          root[methodNames[i2]] = methods[methodNames[i2]];
        }
        if (AMD) {
          define(function() {
            return methods;
          });
        }
      }
    })();
  }
});

// src/connectors/cf-client/effects.ts
var import_axios = __toModule(require_axios2());
var cfExploreDeploy = async ({ net, code }) => {
  try {
    const res = await import_axios.default.get("/explore", {
      params: {
        net,
        code
      }
    });
    const responseData = res.data;
    return responseData;
  } catch (e2) {
    throw new Error(e2);
  }
};

// src/connectors/rnode-http-js/rnode-web.ts
var R = __toModule(require_src2());
var import_elliptic3 = __toModule(require_elliptic());

// src/connectors/rnode-http-js/codecs.ts
var import_bs58 = __toModule(require_bs58());
var encodeBase16 = (bytes) => Array.from(bytes).map((x) => (x & 255).toString(16).padStart(2, "0")).join("");
var decodeBase16 = (hexStr) => {
  const removed0x = hexStr.replace(/^0x/, "");
  const byte2hex = ([arr, bhi], x) => bhi ? [[...arr, parseInt(`${bhi}${x}`, 16)], ""] : [arr, x];
  const [resArr] = Array.from(removed0x).reduce(byte2hex, [[], ""]);
  return Uint8Array.from(resArr);
};
var encodeBase58 = (hexStr) => {
  const bytes = decodeBase16(hexStr);
  return import_bs58.default.encode(bytes);
};
var decodeBase58safe = (str) => {
  try {
    return import_bs58.default.decode(str);
  } catch {
    return void 0;
  }
};
var decodeAscii = (str = "") => Array.from(str).map((x) => `${x}`.charCodeAt(0));

// src/connectors/rnode-http-js/eth/eth-sign.ts
var import_elliptic2 = __toModule(require_elliptic());
var ethUtil = __toModule(require_dist2());

// src/connectors/rnode-http-js/rnode-sign.ts
var import_blakejs = __toModule(require_blakejs());
var import_elliptic = __toModule(require_elliptic());
var import_google_protobuf = __toModule(require_google_protobuf());
var signDeploy = function(privateKey, deployObj) {
  const { term, timestamp, phloPrice, phloLimit, validAfterBlockNumber } = deployObj;
  const sigAlgorithm = "secp256k1";
  const deploySerialized = deployDataProtobufSerialize({
    term,
    timestamp,
    phloPrice,
    phloLimit,
    validAfterBlockNumber
  });
  const crypt = new import_elliptic.ec(sigAlgorithm);
  const key = getSignKey(crypt, privateKey);
  const deployer = Uint8Array.from(key.getPublic("array"));
  const hashed = import_blakejs.default.blake2bHex(deploySerialized, void 0, 32);
  const sigArray = key.sign(hashed, { canonical: true }).toDER("array");
  const sig = Uint8Array.from(sigArray);
  return {
    term,
    timestamp,
    phloPrice,
    phloLimit,
    validAfterBlockNumber,
    sigAlgorithm,
    deployer,
    sig
  };
};
var verifyDeploy = (deployObj) => {
  const { term, timestamp, phloPrice, phloLimit, validAfterBlockNumber, sigAlgorithm, deployer, sig } = deployObj;
  const deploySerialized = deployDataProtobufSerialize({
    term,
    timestamp,
    phloPrice,
    phloLimit,
    validAfterBlockNumber
  });
  const crypt = new import_elliptic.ec(sigAlgorithm);
  const key = crypt.keyFromPublic(deployer);
  const hashed = import_blakejs.default.blake2bHex(deploySerialized, void 0, 32);
  const isValid = key.verify(hashed, sig);
  return isValid;
};
var deployDataProtobufSerialize = (deployData) => {
  const { term, timestamp, phloPrice, phloLimit, validAfterBlockNumber } = deployData;
  const writer = new import_google_protobuf.default.BinaryWriter();
  const writeString = (order, val) => val != "" && writer.writeString(order, val);
  const writeInt64 = (order, val) => val != 0 && writer.writeInt64(order, val);
  writeString(2, term);
  writeInt64(3, timestamp);
  writeInt64(7, phloPrice);
  writeInt64(8, phloLimit);
  writeInt64(10, validAfterBlockNumber);
  return writer.getResultBuffer();
};
var getSignKey = (crypt, pk) => pk && typeof pk !== "string" && pk.sign && pk.sign.constructor == Function ? pk : crypt.keyFromPrivate(pk);

// src/connectors/rnode-http-js/eth/eth-sign.ts
var recoverPublicKeyEth = (data, sigHex) => {
  const hashed = ethUtil.hashPersonalMessage(ethUtil.toBuffer([...data]));
  const { v, r, s } = ethUtil.fromRpcSig(sigHex);
  const pubkeyRecover = ethUtil.ecrecover(hashed, v, r, s);
  return ethUtil.bufferToHex(Buffer.from([4, ...pubkeyRecover]));
};
var verifyDeployEth = (deploySigned) => {
  const { term, timestamp, phloPrice, phloLimit, validAfterBlockNumber, deployer, sig } = deploySigned;
  const deploySerialized = deployDataProtobufSerialize({
    term,
    timestamp,
    phloPrice,
    phloLimit,
    validAfterBlockNumber
  });
  const deployLen = deploySerialized.length;
  const msgPrefix = `Ethereum Signed Message:
${deployLen}`;
  const prefixBin = decodeAscii(msgPrefix);
  const msg = [...prefixBin, ...deploySerialized];
  const hashed = ethUtil.keccak256(Buffer.from(msg));
  const crypt = new import_elliptic2.ec("secp256k1");
  const key = crypt.keyFromPublic(deployer);
  const sigRS = { r: sig.slice(0, 32), s: sig.slice(32, 64) };
  const isValid = key.verify(hashed, sigRS);
  return isValid;
};

// src/connectors/rnode-http-js/eth/eth-wrapper.ts
var getEth = () => {
  if (typeof window !== "undefined") {
    const eth_ = window.ethereum;
    return eth_;
  } else {
    const eth_ = void 0;
    return eth_;
  }
};
var ethDetected = !!getEth();
if (getEth()) {
  const eth_ = getEth();
  eth_.autoRefreshOnNetworkChange = false;
}
var ethRequest = (method, args, eth_) => {
  if (!eth_)
    throw Error(`Ethereum (Metamask) not detected.`);
  return eth_.request(__spreadValues({ method }, args));
};
var ethereumAddress = async () => {
  const eth_ = getEth();
  const accounts = await ethRequest("eth_requestAccounts", "", eth_);
  if (!Array.isArray(accounts))
    throw Error(`Ethereum RPC response is not a list of accounts (${accounts}).`);
  return accounts[0];
};
var ethereumSign = async (bytes, ethAddr) => {
  const args = { params: [[...bytes], ethAddr] };
  return await ethRequest("personal_sign", args, getEth());
};

// src/connectors/rnode-http-js/rnode-web.ts
function makeRNodeWeb(effects) {
  const { now } = effects;
  const rnodeHttp = makeRNodeHttpInternal();
  return {
    rnodeHttp,
    sendDeploy: sendDeploy(rnodeHttp, now),
    getDataForDeploy: getDataForDeploy(rnodeHttp),
    propose: propose(rnodeHttp),
    getSignedDeploy: getSignedDeploy(rnodeHttp, now)
  };
}
var makeRNodeHttpInternal = () => async (httpUrl, apiMethod, data) => {
  const postMethods = ["prepare-deploy", "deploy", "data-at-name", "explore-deploy", "propose"];
  const isPost = !!data && R.includes(apiMethod, postMethods);
  const httpMethod = isPost ? "POST" : "GET";
  const url = (method) => `${httpUrl}/api/${method}`;
  const body = typeof data === "string" ? data : JSON.stringify(data);
  const opt = { method: httpMethod, body };
  const resp = await fetch(url(apiMethod), opt);
  const result = await resp.json();
  if (!resp.ok) {
    const ex = Error(result);
    ex.status = resp.status;
    throw ex;
  }
  return result;
};
var getSignedDeploy = (rnodeHttp, now) => async ({ httpUrl }, account, code, phloLimit) => {
  if (!account.privKey) {
    const selEthAddr = account.ethAddr;
    if (ethDetected && !!selEthAddr) {
      const ethAddr = await ethereumAddress();
      const ethFromMM = ethAddr.replace(/^0x/, "").trim().toLowerCase();
      const ethSaved = selEthAddr.trim().toLowerCase();
      console.log({ ethFromMM, ethSaved });
      if (ethAddr.replace(/^0x/, "").trim().toLowerCase() !== selEthAddr.trim().toLowerCase())
        throw Error("Selected account is not the same as Metamask account.");
    } else {
      throw Error(`Selected account doesn't have private key and cannot be used for signing.`);
    }
  }
  const [{ blockNumber }] = await rnodeHttp(httpUrl, "blocks/1");
  const phloLimitNum = !!phloLimit || phloLimit == 0 ? phloLimit : 25e4;
  const deployData = {
    term: code,
    phloLimit: phloLimitNum,
    phloPrice: 1,
    validAfterBlockNumber: blockNumber,
    timestamp: now()
  };
  const deploy2 = account.privKey ? signPrivKey(deployData, account.privKey) : await signMetamask(deployData);
  return deploy2;
};
var sendDeploy = (rnodeHttp, now) => async ({ httpUrl }, account, code, phloLimit) => {
  if (!account.privKey) {
    const { ethAddr } = account;
    if (ethDetected && !!ethAddr) {
      const ethAddr2 = await ethereumAddress();
      if (ethAddr2.replace(/^0x/, "") !== account.ethAddr)
        throw Error("Selected account is not the same as Metamask account.");
    } else {
      throw Error(`Selected account doesn't have private key and cannot be used for signing.`);
    }
  }
  const [{ blockNumber }] = await rnodeHttp(httpUrl, "blocks/1");
  const phloLimitNum = !!phloLimit || phloLimit == 0 ? phloLimit : 25e4;
  const deployData = {
    term: code,
    phloLimit: phloLimitNum,
    phloPrice: 1,
    validAfterBlockNumber: blockNumber,
    timestamp: now()
  };
  const deploy2 = account.privKey ? signPrivKey(deployData, account.privKey) : await signMetamask(deployData);
  await rnodeHttp(httpUrl, "deploy", deploy2);
  return deploy2;
};
var GET_DATA_TIMEOUT_HANDLE;
var getDataForDeploy = (rnodeHttp) => async ({ httpUrl }, deployId, onProgress) => {
  GET_DATA_TIMEOUT_HANDLE && clearTimeout(GET_DATA_TIMEOUT_HANDLE);
  const getData = (resolve, reject) => async () => {
    const getDataUnsafe = async () => {
      const deploy2 = await fetchDeploy(rnodeHttp)({ httpUrl }, deployId);
      if (deploy2) {
        const args = {
          depth: 1,
          name: { UnforgDeploy: { data: deployId } }
        };
        const { exprs } = await rnodeHttp(httpUrl, "data-at-name", args);
        const { cost } = deploy2;
        const { errored, systemDeployError } = deploy2;
        if (errored) {
          throw Error(`Deploy error when executing Rholang code.`);
        } else if (systemDeployError) {
          throw Error(`${systemDeployError} (system error).`);
        }
        resolve({ data: exprs[0], cost });
      } else {
        GET_DATA_TIMEOUT_HANDLE && clearTimeout(GET_DATA_TIMEOUT_HANDLE);
        GET_DATA_TIMEOUT_HANDLE = setTimeout(getData(resolve, reject), 7500);
      }
    };
    try {
      await getDataUnsafe();
    } catch (ex) {
      reject(ex);
    }
  };
  return new Promise((resolve, reject) => {
    getData(resolve, reject)();
  });
};
var fetchDeploy = (rnodeHttp) => async ({ httpUrl }, deployId) => {
  const block = await rnodeHttp(httpUrl, `deploy/${deployId}`).catch((ex) => {
    if (ex.status !== 400) {
      throw ex;
    }
  });
  if (block) {
    const { deploys } = await rnodeHttp(httpUrl, `block/${block.blockHash}`);
    const deploy2 = deploys.find(({ sig }) => sig === deployId);
    if (!deploy2)
      throw Error(`Deploy is not found in the block (${block.blockHash}).`);
    return deploy2;
  }
};
var propose = (rnodeHttp) => ({ httpAdminUrl }) => rnodeHttp(httpAdminUrl, "propose", {}).catch((ex) => {
  if (ex.status == 400) {
    throw ex;
  }
});
var signMetamask = async function(deployData) {
  const data = deployDataProtobufSerialize(deployData);
  const ethAddr = await ethereumAddress();
  const sigHex = await ethereumSign(data, ethAddr);
  const pubKeyHex = recoverPublicKeyEth(data, sigHex);
  const deploy2 = __spreadProps(__spreadValues({}, deployData), {
    sig: decodeBase16(sigHex),
    deployer: decodeBase16(pubKeyHex),
    sigAlgorithm: "secp256k1:eth"
  });
  const isValidDeploy = verifyDeployEth(deploy2);
  if (!isValidDeploy)
    throw Error("Metamask signature verification failed.");
  return toWebDeploy(deploy2);
};
var signPrivKey = function(deployData, privateKey) {
  const secp256k12 = new import_elliptic3.ec("secp256k1");
  const key = secp256k12.keyFromPrivate(privateKey);
  const deploy2 = signDeploy(key, deployData);
  const isValidDeploy = verifyDeploy(deploy2);
  if (!isValidDeploy)
    throw Error("Deploy signature verification failed.");
  return toWebDeploy(deploy2);
};
var toWebDeploy = function(deployData) {
  const { term, timestamp, phloPrice, phloLimit, validAfterBlockNumber, deployer, sig, sigAlgorithm } = deployData;
  return {
    data: { term, timestamp, phloPrice, phloLimit, validAfterBlockNumber },
    sigAlgorithm,
    signature: encodeBase16(sig),
    deployer: encodeBase16(deployer)
  };
};

// src/connectors/rnode-http-js/rev-address.ts
var import_js_sha3 = __toModule(require_sha3());
var import_blakejs2 = __toModule(require_blakejs());
var import_elliptic4 = __toModule(require_elliptic());
var secp256k1 = new import_elliptic4.ec("secp256k1");
var prefix = { coinId: "000000", version: "00" };
function getAddrFromEth(ethAddrRaw) {
  const ethAddr = ethAddrRaw.replace(/^0x/, "");
  if (!ethAddr || ethAddr.length !== 40)
    return;
  const ethAddrBytes = decodeBase16(ethAddr);
  const ethHash = (0, import_js_sha3.keccak256)(ethAddrBytes);
  const payload = `${prefix.coinId}${prefix.version}${ethHash}`;
  const payloadBytes = decodeBase16(payload);
  const checksum = import_blakejs2.default.blake2bHex(payloadBytes, void 0, 32).slice(0, 8);
  return encodeBase58(`${payload}${checksum}`);
}
function getAddrFromPublicKey(publicKeyRaw) {
  const publicKey = publicKeyRaw.replace(/^0x/, "");
  if (!publicKey || publicKey.length !== 130)
    return void 0;
  const pubKeyBytes = decodeBase16(publicKey);
  const pkHash = (0, import_js_sha3.keccak256)(pubKeyBytes.slice(1));
  const pkHash40 = pkHash.slice(-40);
  const revAddr = getAddrFromEth(pkHash40);
  return revAddr ? { revAddr, ethAddr: pkHash40 } : void 0;
}
function getAddrFromPrivateKey(privateKeyRaw) {
  const privateKey = privateKeyRaw.replace(/^0x/, "");
  if (!privateKey || privateKey.length !== 64)
    return;
  const key = secp256k1.keyFromPrivate(privateKey);
  const pubKey = key.getPublic("hex");
  const addr = getAddrFromPublicKey(pubKey);
  return addr ? __spreadValues({ pubKey }, addr) : void 0;
}
function verifyRevAddr(revAddr) {
  const revBytes = decodeBase58safe(revAddr);
  if (!revBytes)
    return false;
  const revHex = encodeBase16(revBytes);
  const payload = revHex.slice(0, -8);
  const checksum = revHex.slice(-8);
  const payloadBytes = decodeBase16(payload);
  const checksumCalc = import_blakejs2.default.blake2bHex(payloadBytes, void 0, 32).slice(0, 8);
  return checksum === checksumCalc;
}
function newRevAccount() {
  const key = secp256k1.genKeyPair();
  const privKey = key.getPrivate("hex");
  const addr = getAddrFromPrivateKey(privKey);
  return __spreadValues({ privKey }, addr);
}
function createRevAccount(text) {
  const val = text.replace(/^0x/, "").trim();
  const fromPriv = getAddrFromPrivateKey(val);
  const fromPub = getAddrFromPublicKey(val);
  const fromEth = getAddrFromEth(val);
  const isRev = verifyRevAddr(val);
  if (isRev) {
    return { revAddr: text };
  }
  if (fromPriv) {
    return __spreadValues({ privKey: val }, fromPriv);
  }
  if (fromPub) {
    return __spreadValues({ pubKey: val }, fromPub);
  }
  if (fromEth) {
    return { privKey: "", pubKey: "", ethAddr: val, revAddr: fromEth };
  }
  return void 0;
}

// src/connectors/rnode-http-js/rho-json.ts
var R2 = __toModule(require_src2());
var rhoExprToJson = (input) => {
  const loop = (rhoExpr) => convert(rhoExpr)(converters);
  const converters = R2.toPairs(converterMapping(loop));
  return loop(input);
};
var converterMapping = (loop) => ({
  ExprInt: R2.identity,
  ExprBool: R2.identity,
  ExprString: R2.identity,
  ExprBytes: R2.identity,
  ExprUri: R2.identity,
  UnforgDeploy: R2.identity,
  UnforgDeployer: R2.identity,
  UnforgPrivate: R2.identity,
  ExprUnforg: loop,
  ExprPar: R2.map(loop),
  ExprTuple: R2.map(loop),
  ExprList: R2.map(loop),
  ExprSet: R2.map(loop),
  ExprMap: R2.mapObjIndexed(loop)
});
var convert = (rhoExpr) => R2.pipe(R2.map(matchTypeConverter(rhoExpr)), R2.find((x) => !R2.isNil(x)), (x) => R2.isNil(x) ? [R2.identity, rhoExpr] : x, ([f, d2]) => f(d2));
var matchTypeConverter = (rhoExpr) => ([type, f]) => {
  const d2 = R2.path([type, "data"], rhoExpr);
  return R2.isNil(d2) ? void 0 : [f, d2];
};

// src/connectors/rnode-http-js/effects.ts
var R3 = __toModule(require_src2());
var exploreDeploy = ({ rnodeHttp, node }) => async function({ code }) {
  const {
    expr: [e2]
  } = await rnodeHttp(node.httpUrl, "explore-deploy", code);
  console.log(e2);
  const message = rhoExprToJson(e2);
  const dataError = e2 && e2.ExprString && e2.ExprString.data || "";
  return { success: "true", message };
};
var deploy = (effects) => async ({ code, account, phloLimit }) => {
  const { node, sendDeploy: sendDeploy2, getDataForDeploy: getDataForDeploy2, propose: propose2 } = effects;
  const phloLimitNum = R3.isNil(phloLimit) ? phloLimit : parseInt(phloLimit);
  const { signature } = await sendDeploy2(node, account, code, phloLimitNum);
  const pData = await propose2(node);
  const updateProgress = () => true;
  const { data, cost } = await getDataForDeploy2(node, signature, () => true);
  const args = data ? rhoExprToJson(data.expr) : void 0;
  const [sArgs, message] = R3.isNil(args) ? [false, "deploy found in the block but data is not sent on `rho:rchain:deployId` channel"] : [true, R3.is(Array, args) ? args : args];
  const success = pData ? sArgs.toString() : sArgs.toString() + pData;
  return { success, message };
};
var getMetamaskAccount = async () => {
  const ethAddr = await ethereumAddress();
  const revAddress = createRevAccount(ethAddr);
  const revAccountAddress = __spreadValues({ ethAddr }, revAddress);
  const revAccountName = { name: "revWallet" };
  const revAccount = __spreadValues(__spreadValues({}, revAccountAddress), revAccountName);
  return revAccount;
};
var createRnodeService = (node) => {
  const rnodeWeb = makeRNodeWeb({ now: Date.now });
  const { rnodeHttp, sendDeploy: sendDeploy2, getDataForDeploy: getDataForDeploy2, propose: propose2 } = rnodeWeb;
  return {
    exploreDeploy: exploreDeploy({ rnodeHttp, node }),
    deploy: deploy({ node, sendDeploy: sendDeploy2, getDataForDeploy: getDataForDeploy2, propose: propose2 })
  };
};

// src/connectors/rnode-http-js/network.ts
var R4 = __toModule(require_src2());
var defaultPorts = {
  grpc: 40401,
  http: 40403,
  httpAdmin: 40405
};
var defaultPortsSSL = {
  grpc: 40401,
  https: 443,
  httpAdmin: 40405
};
var localNet = {
  title: "Local network",
  name: "localnet",
  hosts: [
    __spreadValues({ domain: "localhost" }, defaultPorts),
    { domain: "localhost", grpc: 40411, http: 40413, httpAdmin: 40415 },
    { domain: "localhost", grpc: 40421, http: 40423, httpAdmin: 40425 },
    { domain: "localhost", grpc: 40431, http: 40433, httpAdmin: 40435 },
    { domain: "localhost", grpc: 40441, http: 40443, httpAdmin: 40445 },
    { domain: "localhost", grpc: 40451, http: 40453, httpAdmin: 40455 }
  ],
  readOnlys: [
    __spreadValues({ domain: "localhost" }, defaultPorts),
    { domain: "localhost", grpc: 40411, http: 40413, httpAdmin: 40415 },
    { domain: "localhost", grpc: 40421, http: 40423, httpAdmin: 40425 },
    { domain: "localhost", grpc: 40431, http: 40433, httpAdmin: 40435 },
    { domain: "localhost", grpc: 40441, http: 40443, httpAdmin: 40445 },
    { domain: "localhost", grpc: 40451, http: 40453, httpAdmin: 40455 }
  ]
};
var getTestNetUrls = (n2) => {
  const instance = `node${n2}`;
  return __spreadValues({
    domain: `${instance}.testnet.rchain.coop`,
    instance
  }, defaultPortsSSL);
};
var testnetHosts = R4.range(0, 5).map(getTestNetUrls);
var testNet = {
  title: "RChain testing network",
  name: "testnet",
  hosts: testnetHosts,
  readOnlys: [
    __spreadValues({
      domain: "observer.testnet.rchain.coop",
      instance: "observer"
    }, defaultPortsSSL),
    __spreadValues({ domain: "rnode1.rhobot.net" }, defaultPortsSSL)
  ]
};
var getMainNetUrls = function(n2) {
  return __spreadValues({
    domain: `node${n2}.root-shard.mainnet.rchain.coop`
  }, defaultPortsSSL);
};
var mainnetHosts = R4.range(0, 30).map(getMainNetUrls);
var mainNet = {
  title: "RChain MAIN network",
  name: "mainnet",
  hosts: mainnetHosts,
  readOnlys: [
    { domain: "observer.services.mainnet.rchain.coop", https: 443 },
    __spreadValues({ domain: "observer-us.services.mainnet.rchain.coop" }, defaultPortsSSL),
    __spreadValues({
      domain: "observer-asia.services.mainnet.rchain.coop"
    }, defaultPortsSSL),
    __spreadValues({ domain: "observer-eu.services.mainnet.rchain.coop" }, defaultPortsSSL)
  ]
};
var getNodeUrls = function({
  name,
  domain: domain2,
  grpc,
  http,
  https,
  httpAdmin,
  httpsAdmin,
  instance
}) {
  const scheme = https ? "https" : http ? "http" : "";
  const schemeAdmin = httpsAdmin ? "https" : httpAdmin ? "http" : "";
  const httpUrl = !!https || !!http ? `${scheme}://${domain2}:${https || http}` : "";
  const httpAdminUrl = !!httpsAdmin || !!httpAdmin ? `${schemeAdmin}://${domain2}:${httpsAdmin || httpAdmin}` : "";
  const grpcUrl = grpc ? `${domain2}:${grpc}` : "";
  return {
    network: name,
    grpcUrl,
    httpUrl,
    httpAdminUrl,
    statusUrl: `${httpUrl}/status`,
    getBlocksUrl: `${httpUrl}/api/blocks`,
    logsUrl: instance && `http://${domain2}:8181/logs/name:${instance}`
  };
};

// ../../node_modules/.pnpm/effector@21.8.12/node_modules/effector/effector.mjs
function e(e2, t2, r, a2) {
  (V(e2) || J(e2)) && ("family" in e2 || "graphite" in e2) || B(`${t2}: expect ${r} to be a unit (store, event or effect)${a2}`);
}
function t(t2, r, a2) {
  if (Array.isArray(t2))
    for (let n2 = 0; n2 < t2.length; n2++)
      e(t2[n2], r, `${n2} item of ${a2}`, "");
  else
    e(t2, r, a2, " or array of units");
}
function a({ node: e2 = [], from: t2, source: r, parent: a2 = t2 || r, to: n2, target: o2, child: s = n2 || o2, scope: l2 = {}, meta: i2 = {}, family: f = { type: "regular" }, regional: c2 } = {}) {
  let u2 = Fe(a2), p2 = Fe(f.links), d2 = Fe(f.owners), m2 = [], h2 = {};
  for (let t3 = 0; t3 < e2.length; t3++) {
    let r2 = e2[t3];
    r2 && (m2.push(r2), Re(r2, h2));
  }
  let g = { id: Y(), seq: m2, next: Fe(s), meta: i2, scope: l2, family: { type: f.type || "crosslink", links: p2, owners: d2 }, reg: h2 };
  for (let e3 = 0; e3 < p2.length; e3++)
    ye(p2[e3]).push(g);
  for (let e3 = 0; e3 < d2.length; e3++)
    ke(d2[e3]).push(g);
  for (let e3 = 0; e3 < u2.length; e3++)
    u2[e3].next.push(g);
  return c2 && Ce && Ae(Se(Ce), [g]), g;
}
function n(e2, t2, r) {
  let a2 = Be, n2 = null, o2 = He;
  if (e2.target && (t2 = e2.params, r = e2.defer, a2 = "page" in e2 ? e2.page : a2, e2.stack && (n2 = e2.stack), o2 = Ne(e2) || o2, e2 = e2.target), o2 && He && o2 !== He && (He = null), Array.isArray(e2))
    for (let r2 = 0; r2 < e2.length; r2++)
      Ee("pure", a2, ge(e2[r2]), n2, t2[r2], o2);
  else
    Ee("pure", a2, ge(e2), n2, t2, o2);
  if (r && !Ge)
    return;
  let s, l2, i2, f, c2, u2, p2 = { isRoot: Ge, currentPage: Be, forkPage: He, isWatch: Ue };
  Ge = 0;
  e:
    for (; f = $e(); ) {
      let { idx: e3, stack: t3, type: r2 } = f;
      i2 = t3.node, Be = c2 = t3.page, He = Ne(t3), u2 = (c2 || i2).reg;
      let a3 = { fail: 0, scope: i2.scope };
      s = l2 = 0;
      for (let n3 = e3; n3 < i2.seq.length && !s; n3++) {
        let o3 = i2.seq[n3], f2 = o3.data;
        switch (o3.type) {
          case "barrier": {
            let a4 = f2.barrierID;
            c2 && (a4 = `${c2.fullID}_${a4}`);
            let o4 = f2.priority;
            if (n3 !== e3 || r2 !== o4) {
              Te.has(a4) || (Te.add(a4), ze(n3, t3, o4, a4));
              continue e;
            }
            Te.delete(a4);
            break;
          }
          case "mov": {
            let e4;
            switch (f2.from) {
              case "stack":
                e4 = Se(t3);
                break;
              case "a":
              case "b":
                e4 = t3[f2.from];
                break;
              case "value":
                e4 = f2.store;
                break;
              case I:
                u2[f2.store.id] || (t3.page = c2 = Ke(c2, f2.store.id), u2 = c2 ? c2.reg : i2.reg), e4 = pe(u2[f2.store.id]);
            }
            switch (f2.to) {
              case "stack":
                t3.value = e4;
                break;
              case "a":
              case "b":
                t3[f2.to] = e4;
                break;
              case I:
                Le(c2, i2, f2.target.id).current = e4;
            }
            break;
          }
          case "check":
            switch (f2.type) {
              case "defined":
                l2 = Se(t3) === void 0;
                break;
              case "changed":
                l2 = Se(t3) === pe(Le(c2, i2, f2.store.id));
            }
            break;
          case "filter":
            l2 = !Qe(a3, f2, t3);
            break;
          case "run":
            if (n3 !== e3 || r2 !== "effect") {
              ze(n3, t3, "effect");
              continue e;
            }
          case "compute":
            Ue = i2.meta.op === "watch", t3.value = Qe(a3, f2, t3), Ue = p2.isWatch;
        }
        s = a3.fail || l2;
      }
      if (!s)
        for (let e4 = 0; e4 < i2.next.length; e4++)
          Ee("child", c2, i2.next[e4], t3, Se(t3), Ne(t3));
    }
  Ge = p2.isRoot, Be = p2.currentPage, He = Ne(p2);
}
function o(e2, t2 = "combine") {
  let r = t2 + "(", a2 = "", n2 = 0;
  for (let t3 in e2) {
    let o2 = e2[t3];
    if (o2 != null && (r += a2, r += E(o2) ? o2.compositeName.fullName : o2.toString()), n2 += 1, n2 === 25)
      break;
    a2 = ", ";
  }
  return r += ")", r;
}
function l(e2, t2) {
  let r, a2, n2, o2 = e2;
  return t2 ? (n2 = t2.compositeName, e2.length === 0 ? (r = n2.path, a2 = n2.fullName) : (r = n2.path.concat([e2]), a2 = n2.fullName.length === 0 ? e2 : n2.fullName + "/" + e2)) : (r = e2.length === 0 ? [] : [e2], a2 = e2), { shortName: o2, fullName: a2, path: r };
}
function i(e2, t2) {
  for (let r in e2)
    t2(e2[r], r);
}
function c(e2, t2) {
  let r = (e3, ...t3) => Be ? ((e4, t4, r2, a2) => {
    let n2 = Be, o3 = null;
    if (t4)
      for (o3 = Be; o3 && o3.template !== t4; )
        o3 = xe(o3);
    Je(o3);
    let s = e4.create(r2, a2);
    return Je(n2), s;
  })(r, o2, e3, t3) : r.create(e3, t3);
  r.graphite = a({ meta: ht("event", r, t2, e2), regional: 1 }), r.create = (e3) => (n(He ? He.find(r) : r, e3), e3), r.watch = Z(ut, r), r.map = (e3) => {
    let t3, a2;
    V(e3) && (t3 = e3, a2 = e3.name, e3 = e3.fn);
    let n2 = c(Ye(r, a2), t3);
    return yt(r, n2, $, e3), n2;
  }, r.filter = (e3) => kt(r, "filter", e3.fn ? e3 : e3.fn, [le({ fn: he })]), r.filterMap = (e3) => kt(r, "filterMap", e3, [se({ fn: he }), oe.defined()]), r.prepend = (e3) => {
    let t3 = c("* \u2192 " + r.shortName, { parent: xe(r) }), a2 = je();
    return a2 && ge(t3).seq.push(a2.upward), yt(t3, r, "prepend", e3), mt(r, t3), t3;
  };
  let o2 = je();
  return r;
}
function u(e2, r) {
  function o2(e3, t2) {
    p2.off(e3), qe(p2).set(e3, lt(bt(e3, p2, "on", 1, t2, m2)));
  }
  let s = ue(e2), l2 = ue(e2), i2 = gt("updates"), f = je();
  s.after = [{ type: "copy", to: l2 }], f && f.plain.push(s, l2);
  let c2 = s.id, p2 = { subscribers: new Map(), updates: i2, defaultState: e2, stateRef: s, getState() {
    let e3, t2 = s;
    if (Be) {
      let t3 = Be;
      for (; t3 && !t3.reg[c2]; )
        t3 = xe(t3);
      t3 && (e3 = t3);
    }
    return !e3 && He && He.reg[c2] && (e3 = He), e3 && (t2 = e3.reg[c2]), pe(t2);
  }, setState(e3) {
    let t2;
    He && (t2 = He.nodeMap[ge(p2).id]), t2 || (t2 = p2), n({ target: t2, params: e3, defer: 1 });
  }, reset(...e3) {
    for (let t2 of e3)
      p2.on(t2, () => p2.defaultState);
    return p2;
  }, on(e3, r2) {
    if (t(e3, ".on", "first argument"), Array.isArray(e3))
      for (let t2 of e3)
        o2(t2, r2);
    else
      o2(e3, r2);
    return p2;
  }, off(e3) {
    let t2 = qe(p2).get(e3);
    return t2 && (t2(), qe(p2).delete(e3)), p2;
  }, map(e3, t2) {
    let r2, a2, n2;
    V(e3) && (r2 = e3, a2 = e3.name, t2 = e3.firstState, e3 = e3.fn);
    let o3 = p2.getState(), l3 = je();
    l3 ? n2 = null : o3 !== void 0 && (n2 = e3(o3, t2));
    let i3 = u(n2, { name: Ye(p2, a2), config: r2, strict: 0 }), f2 = bt(p2, i3, $, 0, e3);
    return be(i3).before = [{ type: $, fn: e3, from: s }], l3 && (tt(l3.plain, s) || tt(f2.seq, l3.loader) || f2.seq.unshift(l3.loader)), i3;
  }, watch(e3, t2) {
    if (!t2 || !E(e3)) {
      let t3 = ut(p2, e3), r2 = je();
      return r2 ? r2.watch.push({ of: s, fn: e3 }) : e3(p2.getState()), t3;
    }
    return J(t2) || B("second argument should be a function"), e3.watch((e4) => t2(p2.getState(), e4));
  } }, d2 = ht(I, p2, r), m2 = p2.defaultConfig.updateFilter;
  return p2.graphite = a({ scope: { state: s }, node: [oe.defined(), oe.changed({ store: l2 }), m2 && ne({ store: l2, to: "a" }), m2 && le({ fn: (e3, t2, { a: r2 }) => m2(e3, r2) }), fe({ store: s }), fe({ store: l2 })], child: i2, meta: d2, regional: 1 }), dt && e2 === void 0 && B("current state can't be undefined, use null instead"), Ae(p2, [i2]), p2;
}
function p(...e2) {
  let t2, r, a2;
  Ze(e2[0], (t3, r2) => {
    a2 = t3, e2 = r2;
  });
  let n2, o2, s = e2[e2.length - 1];
  if (J(s) ? (r = e2.slice(0, -1), t2 = s) : r = e2, r.length === 1) {
    let e3 = r[0];
    W(e3) || (n2 = e3, o2 = 1);
  }
  return o2 || (n2 = r, t2 && (t2 = vt(t2))), V(n2) || B("shape should be an object"), wt(Array.isArray(n2), n2, a2, t2);
}
function d() {
  let e2 = {};
  return e2.req = new Promise((t2, r) => {
    e2.rs = t2, e2.rj = r;
  }), e2.req.catch(() => {
  }), e2;
}
function m(e2, t2) {
  let r = c(e2, t2), o2 = r.defaultConfig.handler || (() => B(`no handler used in ${r.getType()}`)), s = ge(r);
  s.meta.onCopy = ["runner"], s.meta.unit = r.kind = "effect", r.use = (e3) => (J(e3) || B(".use argument should be a function"), o2 = e3, r);
  let l2 = r.finally = gt("finally"), i2 = r.done = l2.filterMap({ named: "done", fn({ status: e3, params: t3, result: r2 }) {
    if (e3 === "done")
      return { params: t3, result: r2 };
  } }), f = r.fail = l2.filterMap({ named: "fail", fn({ status: e3, params: t3, error: r2 }) {
    if (e3 === "fail")
      return { params: t3, error: r2 };
  } }), p2 = r.doneData = i2.map({ named: "doneData", fn: ({ result: e3 }) => e3 }), m2 = r.failData = f.map({ named: "failData", fn: ({ error: e3 }) => e3 }), h2 = a({ scope: { getHandler: r.use.getCurrent = () => o2, finally: l2 }, node: [ie({ fn({ params: e3, req: t3 }, { finally: r2, getHandler: a2 }, n2) {
    let o3, s2 = St({ params: e3, req: t3, ok: 1, anyway: r2, stack: n2 }), l3 = St({ params: e3, req: t3, ok: 0, anyway: r2, stack: n2 });
    try {
      o3 = a2()(e3);
    } catch (e4) {
      return void l3(e4);
    }
    V(o3) && J(o3.then) ? o3.then(s2, l3) : s2(o3);
  } })], meta: { op: "fx", fx: "runner", onCopy: ["finally"] } });
  s.scope.runner = h2, s.seq.push(se({ fn: (e3, t3, r2) => xe(r2) ? { params: e3, req: { rs(e4) {
  }, rj(e4) {
  } } } : e3 }), ie({ fn: (e3, { runner: t3 }, r2) => (n({ target: t3, params: e3, defer: 1, forkPage: Ne(r2) }), e3.params) })), r.create = (e3) => {
    let t3 = d(), a2 = { params: e3, req: t3 };
    if (He) {
      if (!Ue) {
        let e4 = He;
        t3.req.finally(() => {
          Ve(e4);
        }).catch(() => {
        });
      }
      n(He.find(r), a2);
    } else
      n(r, a2);
    return t3.req;
  };
  let g = r.inFlight = u(0, { named: "inFlight" }).on(r, (e3) => e3 + 1).on(l2, (e3) => e3 - 1), y2 = r.pending = g.map({ fn: (e3) => e3 > 0, named: "pending" });
  return Ae(r, [l2, i2, f, p2, m2, y2, g, h2]), r;
}
function h(e2) {
  let t2;
  Ze(e2, (r2, a3) => {
    t2 = r2, e2 = a3;
  });
  let { source: r, effect: a2, mapParams: o2 } = e2;
  o2 || (o2 = r ? (e3, t3) => t3 : (e3) => e3);
  let s, l2 = m(e2, t2), { runner: i2 } = ge(l2).scope, f = ({ params: e3, req: t3 }, { finally: r2, effect: a3 }, s2) => {
    let l3, i3 = St({ params: e3, req: t3, ok: 0, anyway: r2, stack: s2 });
    try {
      l3 = o2(e3, s2.a);
    } catch (e4) {
      return i3(e4);
    }
    n({ target: a3, params: { params: l3, req: { rs: St({ params: e3, req: t3, ok: 1, anyway: r2, stack: s2 }), rj: i3 } }, page: s2.page, defer: 1 });
  };
  if (r) {
    let e3;
    W(r) ? (e3 = r, Ae(r, [l2])) : (e3 = p(r), Ae(l2, [e3]));
    let t3 = ne({ from: I, store: be(e3), to: "a" });
    s = [ie({ fn: (e4) => e4 }), t3, se({ fn: f })], Re(t3, i2.reg);
  } else
    s = [ie({ fn: f })];
  return Ae(a2, [l2]), i2.scope.effect = a2, i2.meta.onCopy.push("effect"), i2.seq.splice(0, 1, ...s), mt(a2, l2, "effect"), l2;
}
function y(e2, t2) {
  let r = new Set(), n2 = new Set(), o2 = new Set(), s = new Set(), l2 = a({ family: { type: "domain" }, regional: 1 }), f = { history: { domains: r, stores: n2, effects: o2, events: s }, graphite: l2 };
  l2.meta = ht("domain", f, t2, e2);
  let [p2, d2, h2, g] = ["onEvent", "onEffect", "onStore", "onDomain"].map(gt);
  f.hooks = { event: p2, effect: d2, store: h2, domain: g }, f.onCreateEvent = xt(p2, s, f), f.onCreateEffect = xt(d2, o2, f), f.onCreateStore = xt(h2, n2, f), f.onCreateDomain = xt(g, r, f), f.createEvent = f.event = (e3, t3) => p2(c(e3, { parent: f, config: t3 })), f.createEffect = f.effect = (e3, t3) => d2(m(e3, { parent: f, config: t3 })), f.createDomain = f.domain = (e3, t3) => y({ name: e3, parent: f, config: t3 }), f.createStore = f.store = (e3, t3) => h2(u(e3, { parent: f, config: t3 }));
  let k = xe(f);
  return k && (i(f.hooks, (e3, t3) => {
    ct({ from: e3, to: k.hooks[t3] });
  }), k.hooks.domain(f)), f;
}
var _ = typeof Symbol != "undefined" && Symbol.observable || "@@observable";
var I = "store";
var M = "effect";
var $ = "map";
var E = (e2) => (J(e2) || V(e2)) && "kind" in e2;
var z = (e2) => (t2) => E(t2) && t2.kind === e2;
var W = z(I);
var T = z("event");
var H = z(M);
var G = z("domain");
var B = (e2) => {
  throw Error(e2);
};
var V = (e2) => typeof e2 == "object" && e2 !== null;
var J = (e2) => typeof e2 == "function";
var K = (e2) => {
  V(e2) || J(e2) || B("expect first argument be an object");
};
var L = () => {
  let e2 = 0;
  return () => (++e2).toString(36);
};
var Q = L();
var X = L();
var Y = L();
var Z = (e2, t2) => e2.bind(null, t2);
var ee = (e2, t2, r) => e2.bind(null, t2, r);
var te = (e2, t2, r) => ({ id: X(), type: e2, data: r, hasRef: t2 });
var re = 0;
var ae = ({ priority: e2 = "barrier" }) => te("barrier", 0, { barrierID: ++re, priority: e2 });
var ne = ({ from: e2 = I, store: t2, target: r, to: a2 = r ? I : "stack" }) => te("mov", e2 === I, { from: e2, store: t2, to: a2, target: r });
var oe = { defined: () => te("check", 0, { type: "defined" }), changed: ({ store: e2 }) => te("check", 1, { type: "changed", store: e2 }) };
var se = ee(te, "compute", 0);
var le = ee(te, "filter", 0);
var ie = ee(te, "run", 0);
var fe = ({ store: e2 }) => ne({ from: "stack", target: e2 });
var ue = (e2) => ({ id: X(), current: e2 });
var pe = ({ current: e2 }) => e2;
var de = (e2, { fn: t2 }, { a: r }) => t2(e2, r);
var me = (e2, { fn: t2 }, { a: r }) => t2(r, e2);
var he = (e2, { fn: t2 }) => t2(e2);
var ge = (e2) => e2.graphite || e2;
var ye = (e2) => e2.family.owners;
var ke = (e2) => e2.family.links;
var be = (e2) => e2.stateRef;
var ve = (e2) => e2.config;
var we = (e2) => e2.\u0254;
var Se = (e2) => e2.value;
var qe = (e2) => e2.subscribers;
var xe = (e2) => e2.parent;
var Ne = (e2) => e2.forkPage;
var Ae = (e2, t2) => {
  let r = ge(e2);
  for (let e3 = 0; e3 < t2.length; e3++) {
    let a2 = ge(t2[e3]);
    r.family.type !== "domain" && (a2.family.type = "crosslink"), ye(a2).push(r), ke(r).push(a2);
  }
};
var Ce = null;
var je = () => Ce && Ce.template;
var Oe = (e2) => (e2 && Ce && Ce.sidRoot && (e2 = `${Ce.sidRoot}\u0254${e2}`), e2);
var Fe = (e2 = []) => {
  let t2 = [];
  if (Array.isArray(e2))
    for (let r = 0; r < e2.length; r++)
      Array.isArray(e2[r]) ? t2.push(...e2[r]) : t2.push(e2[r]);
  else
    t2.push(e2);
  return t2.map(ge);
};
var Re = ({ hasRef: e2, type: t2, data: r }, a2) => {
  let n2;
  e2 && (n2 = r.store, a2[n2.id] = n2), t2 === "mov" && r.to === I && (n2 = r.target, a2[n2.id] = n2);
};
var De = null;
var _e = (e2, t2) => {
  if (!e2)
    return t2;
  if (!t2)
    return e2;
  let r, a2 = e2.v.type === t2.v.type;
  return (a2 && e2.v.id > t2.v.id || !a2 && e2.v.type === "sampler") && (r = e2, e2 = t2, t2 = r), r = _e(e2.r, t2), e2.r = e2.l, e2.l = r, e2;
};
var Ie = [];
var Me = 0;
for (; Me < 5; )
  Ie.push({ first: null, last: null, size: 0 }), Me += 1;
var $e = () => {
  for (let e2 = 0; e2 < 5; e2++) {
    let t2 = Ie[e2];
    if (t2.size > 0) {
      if (e2 === 2 || e2 === 3) {
        t2.size -= 1;
        let e3 = De.v;
        return De = _e(De.l, De.r), e3;
      }
      t2.size === 1 && (t2.last = null);
      let r = t2.first;
      return t2.first = r.r, t2.size -= 1, r.v;
    }
  }
};
var Ee = (e2, t2, r, a2, n2, o2) => ze(0, { a: null, b: null, node: r, parent: a2, value: n2, page: t2, forkPage: o2 }, e2);
var ze = (e2, t2, r, a2 = 0) => {
  let n2 = We(r), o2 = Ie[n2], s = { v: { idx: e2, stack: t2, type: r, id: a2 }, l: 0, r: 0 };
  n2 === 2 || n2 === 3 ? De = _e(De, s) : (o2.size === 0 ? o2.first = s : o2.last.r = s, o2.last = s), o2.size += 1;
};
var We = (e2) => {
  switch (e2) {
    case "child":
      return 0;
    case "pure":
      return 1;
    case "barrier":
      return 2;
    case "sampler":
      return 3;
    case M:
      return 4;
    default:
      return -1;
  }
};
var Te = new Set();
var He;
var Ge = 1;
var Ue = 0;
var Be = null;
var Ve = (e2) => {
  He = e2;
};
var Je = (e2) => {
  Be = e2;
};
var Ke = (e2, t2) => {
  if (e2) {
    for (; e2 && !e2.reg[t2]; )
      e2 = xe(e2);
    if (e2)
      return e2;
  }
  return null;
};
var Le = (e2, t2, r) => (Ke(e2, r) || t2).reg[r];
var Qe = (e2, { fn: t2 }, r) => {
  try {
    return t2(Se(r), e2.scope, r);
  } catch (t3) {
    console.error(t3), e2.fail = 1;
  }
};
var Xe = (e2, t2) => "" + e2.shortName + t2;
var Ye = (e2, t2) => t2 == null ? Xe(e2, " \u2192 *") : t2;
var Ze = (e2, t2) => {
  K(e2), we(e2) && t2(ve(e2), we(e2));
};
var tt = (e2, t2) => e2.includes(t2);
var rt = (e2, t2) => {
  let r = e2.indexOf(t2);
  r !== -1 && e2.splice(r, 1);
};
var at = (e2, t2) => {
  rt(e2.next, t2), rt(ye(e2), t2), rt(ke(e2), t2);
};
var nt = (e2, t2, r) => {
  let a2;
  e2.next.length = 0, e2.seq.length = 0, e2.scope = null;
  let n2 = ke(e2);
  for (; a2 = n2.pop(); )
    at(a2, e2), (t2 || r && !e2.meta.sample || a2.family.type === "crosslink") && nt(a2, t2, a2.meta.op !== "on" && r);
  for (n2 = ye(e2); a2 = n2.pop(); )
    at(a2, e2), r && a2.family.type === "crosslink" && nt(a2, t2, a2.meta.op !== "on" && r);
};
var ot = (e2) => e2.clear();
var st = (e2, { deep: t2 } = {}) => {
  let r = 0;
  if (e2.ownerSet && e2.ownerSet.delete(e2), W(e2))
    ot(qe(e2));
  else if (G(e2)) {
    r = 1;
    let t3 = e2.history;
    ot(t3.events), ot(t3.effects), ot(t3.stores), ot(t3.domains);
  }
  nt(ge(e2), !!t2, r);
};
var lt = (e2) => {
  let t2 = ee(st, e2, void 0);
  return t2.unsubscribe = t2, t2;
};
var ft = (e2, t2, { node: r, scope: n2, meta: o2 }) => a({ node: r, parent: e2, child: t2, scope: n2, meta: o2, family: { owners: [e2, t2], links: t2 }, regional: 1 });
var ct = (e2) => {
  let r;
  Ze(e2, (t2, a2) => {
    r = t2, e2 = a2;
  });
  let { from: n2, to: o2, meta: s = { op: "forward" } } = e2;
  return t(n2, "forward", '"from"'), t(o2, "forward", '"to"'), r && (s.config = r), lt(a({ parent: n2, child: o2, meta: s, family: {}, regional: 1 }));
};
var ut = (e2, t2) => {
  if (J(t2) || B(".watch argument should be a function"), He) {
    let t3 = He.nodeMap[ge(e2).id];
    t3 && (e2 = t3);
  }
  return lt(a({ scope: { fn: t2 }, node: [ie({ fn: he })], parent: e2, meta: { op: "watch" }, family: { owners: e2 }, regional: 1 }));
};
var pt = (e2, t2) => (V(e2) && (pt(ve(e2), t2), e2.name != null && (V(e2.name) ? pt(e2.name, t2) : J(e2.name) ? t2.handler = e2.name : t2.name = e2.name), e2.loc && (t2.loc = e2.loc), (e2.sid || e2.sid === null) && (t2.sid = e2.sid), e2.handler && (t2.handler = e2.handler), e2.updateFilter && (t2.updateFilter = e2.updateFilter), xe(e2) && (t2.parent = xe(e2)), "strict" in e2 && (t2.strict = e2.strict), e2.named && (t2.named = e2.named), pt(we(e2), t2)), t2);
var dt;
var mt = (e2, t2, r = "event") => {
  xe(e2) && xe(e2).hooks[r](t2);
};
var ht = (e2, t2, r, a2) => {
  let n2 = pt({ name: a2, config: r }, {}), o2 = e2 === "domain", s = Q(), { parent: i2 = null, sid: f = null, strict: c2 = 1, named: u2 = null } = n2, p2 = u2 || n2.name || (o2 ? "" : s), d2 = l(p2, i2), m2 = { unit: t2.kind = e2, name: t2.shortName = p2, sid: t2.sid = Oe(f), named: u2, unitId: t2.id = s };
  if (t2.parent = i2, t2.compositeName = d2, t2.defaultConfig = n2, t2.thru = (e3) => e3(t2), t2.getType = () => d2.fullName, !o2) {
    t2.subscribe = (e4) => (K(e4), t2.watch(J(e4) ? e4 : (t3) => {
      e4.next && e4.next(t3);
    })), t2[_] = () => t2;
    let e3 = je();
    e3 && (m2.nativeTemplate = e3);
  }
  return dt = c2, m2;
};
var gt = (e2) => c({ named: e2 });
var yt = (e2, t2, r, a2) => ft(e2, t2, { scope: { fn: a2 }, node: [se({ fn: he })], meta: { op: r } });
var kt = (e2, t2, r, a2) => {
  let n2;
  V(r) && (n2 = r, r = r.fn);
  let o2 = c(Xe(e2, " \u2192? *"), n2);
  return ft(e2, o2, { scope: { fn: r }, node: a2, meta: { op: t2 } }), o2;
};
var bt = (e2, t2, r, a2, n2, o2) => {
  let s = be(t2), l2 = [ne({ store: s, to: "a" }), se({ fn: a2 ? me : de }), oe.defined(), oe.changed({ store: s }), o2 && le({ fn: (e3, t3, { a: r2 }) => o2(e3, r2) }), fe({ store: s })], i2 = je();
  if (i2 && (l2.unshift(i2.loader), l2.push(i2.upward), W(e2))) {
    let t3 = be(e2);
    tt(i2.plain, t3) || (tt(i2.closure, t3) || i2.closure.push(t3), s.before || (s.before = []), s.before.push({ type: "closure", of: t3 }));
  }
  return ft(e2, t2, { scope: { fn: n2 }, node: l2, meta: { op: r } });
};
var vt = (e2) => (t2) => e2(...t2);
var wt = (e2, t2, r, a2) => {
  let n2 = e2 ? (e3) => e3.slice() : (e3) => __spreadValues({}, e3), s = e2 ? [] : {}, l2 = je(), f = n2(s), c2 = ue(f), p2 = ue(1);
  c2.type = e2 ? "list" : "shape", l2 && l2.plain.push(c2, p2);
  let d2 = u(f, { name: r || o(t2) });
  ge(d2).meta.isCombine = 1;
  let m2 = [oe.defined(), ne({ store: c2, to: "a" }), le({ fn: (e3, { key: t3 }, { a: r2 }) => e3 !== r2[t3] }), ne({ store: p2, to: "b" }), se({ fn(e3, { clone: t3, key: r2 }, a3) {
    a3.b && (a3.a = t3(a3.a)), a3.a[r2] = e3;
  } }), ne({ from: "a", target: c2 }), ne({ from: "value", store: 0, target: p2 }), ae({ priority: "barrier" }), ne({ from: "value", store: 1, target: p2 }), ne({ store: c2 }), a2 && se({ fn: a2 }), oe.changed({ store: be(d2) })], h2 = c2.before = [];
  return i(t2, (e3, t3) => {
    if (!W(e3))
      return void (f[t3] = s[t3] = e3);
    s[t3] = e3.defaultState, f[t3] = e3.getState();
    let r2 = ft(e3, d2, { scope: { key: t3, clone: n2 }, node: m2, meta: { op: "combine" } }), a3 = be(e3);
    h2.push({ type: "field", field: t3, from: a3 }), l2 && (tt(l2.plain, a3) || r2.seq.unshift(l2.loader));
  }), d2.defaultShape = t2, c2.after = [a2 ? { type: $, to: be(d2), fn: a2 } : { type: "copy", to: be(d2) }], l2 || (d2.defaultState = a2 ? be(d2).current = a2(f) : s), d2;
};
var St = ({ params: e2, req: t2, ok: r, anyway: a2, stack: o2 }) => (s) => n({ target: [a2, qt], params: [r ? { status: "done", params: e2, result: s } : { status: "fail", params: e2, error: s }, { fn: r ? t2.rs : t2.rj, value: s }], defer: 1, page: o2.page, forkPage: Ne(o2) });
var qt = a({ node: [ie({ fn({ fn: e2, value: t2 }) {
  e2(t2);
} })], meta: { op: "fx", fx: "sidechain" } });
var xt = (e2, t2, r) => (e2.create = (t3) => (n(e2, t3), t3), ge(e2).seq.push(se({ fn: (e3, t3, r2) => (r2.forkPage = null, e3) })), e2.watch((e3) => {
  Ae(r, [e3]), t2.add(e3), e3.ownerSet || (e3.ownerSet = t2), xe(e3) || (e3.parent = r);
}), Ae(r, [e2]), (r2) => (t2.forEach(r2), e2.watch(r2)));

// src/connectors/rnode-router/model.ts
var domain = y();
var changeNode = domain.event();
var addWallet = domain.event();
var removeWallet = domain.event();
var changeWallet = domain.event();
var changeSelectedWallet = domain.event();
var getNode = domain.event();
var nets = [localNet, testNet, mainNet].map(({ title, name, hosts, readOnlys }) => ({
  title,
  name,
  hosts: hosts.map((x) => __spreadProps(__spreadValues({}, x), { title, name })),
  readOnlys: readOnlys.map((x) => __spreadProps(__spreadValues({}, x), { title, name }))
}));
var initNet = nets[0];
var initRnodeStore = {
  nets,
  valNode: initNet.hosts[0],
  readNode: initNet.readOnlys[0],
  wallets: [
    {
      name: "localWallet",
      revAddr: "11113y7AfYj7hShN49oAHHd3KiWxZRsodesdBi8QwSrPR5Veyh77S",
      privKey: "bb6f30056d1981b98e729cef72a82920e6242a4395e500bd24bd6c6e6a65c36c"
    },
    {
      name: "testnetWallet",
      revAddr: "111125rrPWgw5tGQWEHFW9ByFeLvHTkTSWFcvfsPVFxZnCgMZ4crL1",
      privKey: "4b25510e29397fe9097860cc17aba769f887e4da33b52c6fe58eb9c144a401c3"
    }
  ],
  walletSelected: {
    name: "localWallet",
    revAddr: "11113y7AfYj7hShN49oAHHd3KiWxZRsodesdBi8QwSrPR5Veyh77S",
    privKey: "bb6f30056d1981b98e729cef72a82920e6242a4395e500bd24bd6c6e6a65c36c"
  },
  status: { success: "", message: "" }
};
var initWalletStore = { walletConnected: false };
var $rnodeStore = domain.store(initRnodeStore);
var $walletStore = domain.store(initWalletStore);
var Event = {
  changeNode,
  addWallet,
  removeWallet,
  changeWallet,
  changeSelectedWallet,
  getNode
};
var Store = {
  $rnodeStore,
  $walletStore
};

// src/connectors/rnode-router/effects.ts
var effectsRouter = async ({ fn, client, params, node }) => {
  const { exploreDeploy: exploreDeploy2, deploy: deploy2 } = createRnodeService(node);
  const net = node.network;
  switch (client) {
    case "cf": {
      switch (fn) {
        case "exploreDeploy": {
          const status = await cfExploreDeploy({ net, code: params.code });
          return status;
        }
        default: {
          const status = { success: "", message: "" };
          return status;
        }
      }
    }
    case "rnode": {
      switch (fn) {
        case "exploreDeploy": {
          const status = await exploreDeploy2({ code: params.code });
          return status;
        }
        case "deploy": {
          if (params.account && params.phloLimit) {
            const status = await deploy2({
              code: params.code,
              account: params.account,
              phloLimit: params.phloLimit
            });
            return status;
          }
          return { success: "", message: "" };
        }
        default: {
          const status = { success: "", message: "" };
          return status;
        }
      }
    }
    default: {
      const status = { success: "", message: "" };
      return status;
    }
  }
};
var routerFx = domain.effect(effectsRouter);
var addWalletFx = domain.effect(getMetamaskAccount);
var exploreDeployFx = h({
  effect: routerFx,
  source: Store.$rnodeStore,
  mapParams: (params, data) => {
    const node = getNodeUrls(data.readNode);
    const paramsR = {
      code: params.code
    };
    return {
      fn: "exploreDeploy",
      client: params.client,
      params: paramsR,
      node
    };
  }
});
var deployFx = h({
  effect: routerFx,
  source: Store.$rnodeStore,
  mapParams: (params, data) => {
    const node = getNodeUrls(data.valNode);
    const account = data.walletSelected;
    const paramsR = {
      code: params.code,
      account,
      phloLimit: params.phloLimit
    };
    return { fn: "deploy", client: params.client, params: paramsR, node };
  }
});
var Effects = {
  deployFx,
  exploreDeployFx,
  addWalletFx
};

// src/connectors/rnode-router/update.ts
Store.$rnodeStore.on(Effects.exploreDeployFx.doneData, (state, status) => __spreadProps(__spreadValues({}, state), { status })).on(Effects.deployFx.doneData, (state, status) => __spreadProps(__spreadValues({}, state), { status })).on(Event.changeSelectedWallet, (state, newSelectedWallet) => {
  const filteredWallet = state.wallets.filter((item) => item.name === newSelectedWallet);
  if (filteredWallet) {
    return __spreadProps(__spreadValues({}, state), { walletSelected: filteredWallet[0] });
  }
  return state;
}).on(Event.changeNode, (state, newNode) => {
  const node = newNode === "localnet" ? nets[0] : nets[1];
  return __spreadProps(__spreadValues({}, state), { valNode: node.hosts[0], readNode: node.readOnlys[0] });
}).on(Effects.addWalletFx.doneData, (state, revAccount) => {
  const { wallets } = state;
  const filteredWallets = wallets.filter((item) => item.name === "revWallet");
  if (filteredWallets.length === 0) {
    wallets.splice(wallets.length, 0, __spreadValues({}, revAccount));
    const walletSelected = {
      name: revAccount.name,
      ethAddr: revAccount.ethAddr,
      revAddr: revAccount.revAddr
    };
    return __spreadProps(__spreadValues({}, state), { wallets, walletSelected });
  }
  return state;
});
Store.$walletStore.on(Effects.addWalletFx.doneData, () => ({ walletConnected: true }));
export {
  Effects,
  Event,
  Store,
  cfExploreDeploy,
  createRevAccount,
  createRnodeService,
  decodeAscii,
  decodeBase16,
  decodeBase58safe,
  deployDataProtobufSerialize,
  domain,
  effectsRouter,
  encodeBase16,
  encodeBase58,
  ethDetected,
  ethereumAddress,
  ethereumSign,
  getAddrFromEth,
  getAddrFromPrivateKey,
  getAddrFromPublicKey,
  getMetamaskAccount,
  getNodeUrls,
  initNet,
  localNet,
  mainNet,
  makeRNodeWeb,
  nets,
  newRevAccount,
  recoverPublicKeyEth,
  rhoExprToJson,
  signDeploy,
  signMetamask,
  signPrivKey,
  testNet,
  toWebDeploy,
  verifyDeploy,
  verifyDeployEth,
  verifyRevAddr
};
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */
//# sourceMappingURL=index.mjs.map
